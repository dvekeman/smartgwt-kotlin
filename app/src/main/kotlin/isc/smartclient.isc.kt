@file:Suppress("INTERFACE_WITH_SUPERCLASS", "OVERRIDING_FINAL_MEMBER", "RETURN_TYPE_MISMATCH_ON_OVERRIDE", "CONFLICTING_OVERLOADS", "EXTERNAL_DELEGATION", "NESTED_CLASS_IN_EXTERNAL_INTERFACE")
@file:JsQualifier("isc")
package isc

import org.w3c.dom.Element
import org.w3c.dom.Node
import org.w3c.dom.Text

external interface Map<T> {
    @nativeGetter
    operator fun get(key: String): T?
    @nativeSetter
    operator fun set(key: String, value: T)
}
external fun showPrompt(message: String, properties: Dialog? = definedExternally /* null */): Unit = definedExternally
external fun clearPrompt(): Unit = definedExternally
external fun showFadingPrompt(message: String, duration: Number, callback: Any? = definedExternally /* null */, properties: Dialog? = definedExternally /* null */): Unit = definedExternally
external fun warn(message: String, callback: Any? = definedExternally /* null */, properties: Dialog? = definedExternally /* null */): Unit = definedExternally
external fun say(message: String, callback: Any? = definedExternally /* null */, properties: Dialog? = definedExternally /* null */): Unit = definedExternally
external fun ask(message: String, callback: Any? = definedExternally /* null */, properties: Dialog? = definedExternally /* null */): Unit = definedExternally
external fun confirm(message: String, callback: Any? = definedExternally /* null */, properties: Dialog? = definedExternally /* null */): Unit = definedExternally
external fun askForValue(message: String, callback: Any? = definedExternally /* null */, properties: Dialog? = definedExternally /* null */): Unit = definedExternally
external fun dismissCurrentDialog(): Unit = definedExternally
external fun showLoginDialog(loginFunc: Any?, properties: LoginDialog? = definedExternally /* null */): Unit = definedExternally
external fun logWarn(message: String, category: String? = definedExternally /* null */): Unit = definedExternally
external fun echo(value: Any): String = definedExternally
external fun echoAll(value: Any): String = definedExternally
external fun echoLeaf(value: Any): String = definedExternally
external fun logEcho(value: Any, message: String): Unit = definedExternally
external fun logEchoAll(value: Any, message: String): Unit = definedExternally
external fun addProperties(destination: Any, vararg args: Any): Any = definedExternally
external fun getKeys(`object`: Any): Array<Any> = definedExternally
external fun firstKey(`object`: Any): String = definedExternally
external fun getValues(`object`: Any): Array<Any> = definedExternally
external fun sortObject(`object`: Any, comparator: Function<*>? = definedExternally /* null */): Any = definedExternally
external fun sortObjectByProperties(`object`: Any, comparator: Function<*>? = definedExternally /* null */): Any = definedExternally
external fun addDefaults(destination: Any, source: Any): Any = definedExternally
external fun propertyDefined(`object`: Any, propertyName: String): Boolean = definedExternally
external fun defineClass(className: String, superClass: Class? = definedExternally /* null */): Class = definedExternally
external fun overwriteClass(): Unit = definedExternally
external fun eval(expression: String): Any = definedExternally
external fun timeStamp(): Number = definedExternally
external fun showConsole(): Unit = definedExternally
external fun getValueForKey(key: String, valueMap: Any, defaultValue: Any? = definedExternally /* null */): Any = definedExternally
external fun getValueForKey(key: Number, valueMap: Any, defaultValue: Any? = definedExternally /* null */): Any = definedExternally
external fun getKeyForValue(value: String, valueMap: Any, defaultKey: Any? = definedExternally /* null */): Any = definedExternally
external fun getKeyForValue(value: Number, valueMap: Any, defaultKey: Any? = definedExternally /* null */): Any = definedExternally
external fun makeReverseMap(valueMap: Any): Any = definedExternally
external fun setAutoDraw(enable: Boolean? = definedExternally /* null */): Unit = definedExternally
external fun clone(`object`: Any): Any = definedExternally
external fun shallowClone(`object`: Any?): dynamic /* Any? | Array<Any?> */ = definedExternally
external fun shallowClone(`object`: Array<Any>): dynamic /* Any? | Array<Any?> */ = definedExternally
external fun setScreenReaderMode(newState: Boolean): Unit = definedExternally
external fun getIconLeft(icon: Any): Number = definedExternally
external fun getIconTop(icon: Any): Number = definedExternally
external fun getIconRect(icon: Any): Array<Any> = definedExternally
external fun getIconPageRect(icon: Any): Array<Any> = definedExternally
external open class IndicatorCanvas : EventCanvas {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): IndicatorCanvas = definedExternally
    }
}
external open class CellSelection : Class {
    open fun cellIsSelected(rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun anySelected(): Boolean = definedExternally
    open fun getSelectedCells(): Array<Any> = definedExternally
    open fun getSelectedRecord(): ListGridRecord = definedExternally
    open fun selectionChanged(): Unit = definedExternally
    open fun selectCell(rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun deselectCell(rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun selectCellList(list: Array<Any?>): Boolean = definedExternally
    open fun deselectCellList(list: Array<Any?>): Boolean = definedExternally
    open fun selectSingleCell(rowNum: Number, colNum: Number): Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): CellSelection = definedExternally
    }
}
external open class FacetChartEditProxy : DrawPaneEditProxy {
    open var dataSeparatorChar: String = definedExternally
    open var dataDisplaySeparatorChar: String = definedExternally
    open var dataEscapeChar: String = definedExternally
//    override fun getInlineEditText(): Unit = definedExternally
//    override fun setInlineEditText(newValue: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): FacetChartEditProxy = definedExternally
    }
}
external open class Dialog : Window {
//    override var defaultWidth: Number = definedExternally
//    override var styleName: String = definedExternally
    open var message: String = definedExternally
    open var messageStyle: String = definedExternally
    open var messageLabel: Label = definedExternally
    open var messageIcon: Img = definedExternally
    open var messageStack: Layout = definedExternally
    open var icon: String = definedExternally
    open var iconSize: Number = definedExternally
    open var showToolbar: Boolean = definedExternally
    open var autoFocus: Boolean = definedExternally
    open var toolbar: Toolbar = definedExternally
    open var buttons: Array<Any?> = definedExternally
    open var toolbarButtons: Array<Any?> = definedExternally
    open var askIcon: String = definedExternally
    open var sayIcon: String = definedExternally
    open var warnIcon: String = definedExternally
    open var confirmIcon: String = definedExternally
    open fun setButtons(newButtons: Array<Any?>): Unit = definedExternally
    open fun setToolbarButtons(newButtons: Array<Any?>): Unit = definedExternally
    open fun saveData(): Unit = definedExternally
//    override fun closeClick(): Boolean = definedExternally
    open fun cancelClick(): Unit = definedExternally
    open fun okClick(): Unit = definedExternally
    open fun applyClick(): Unit = definedExternally
    open fun yesClick(): Unit = definedExternally
    open fun noClick(): Unit = definedExternally
    open fun doneClick(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Dialog = definedExternally
        var OK_BUTTON_TITLE: String = definedExternally
        var APPLY_BUTTON_TITLE: String = definedExternally
        var YES_BUTTON_TITLE: String = definedExternally
        var NO_BUTTON_TITLE: String = definedExternally
        var CANCEL_BUTTON_TITLE: String = definedExternally
        var DONE_BUTTON_TITLE: String = definedExternally
        var CONFIRM_TITLE: String = definedExternally
        var SAY_TITLE: String = definedExternally
        var WARN_TITLE: String = definedExternally
        var ASK_TITLE: String = definedExternally
        var ASK_FOR_VALUE_TITLE: String = definedExternally
        var Prompt: Dialog = definedExternally
        var Warn: Dialog = definedExternally
        var Ask: Dialog = definedExternally
    }
}
external interface Palette {
    var defaultEditContext: dynamic /* EditContext | EditTree | EditPane */ get() = definedExternally; set(value) = definedExternally
    var generateNames: Boolean? get() = definedExternally; set(value) = definedExternally
    val setDefaultEditContext: ((defaultEditContext: dynamic /* EditContext | EditTree | EditPane */) -> Unit)? get() = definedExternally
    val makeEditNode: ((paletteNode: PaletteNode) -> EditNode)? get() = definedExternally
}
external open class RecordEditor : ListGrid {
//    override var baseStyle: String = definedExternally
//    override var skinImgDir: String = definedExternally
    open var filterImg: String = definedExternally
    open var actionButton: Button = definedExternally
    open var actionButtonProperties: Button = definedExternally
    open var actionButtonStyle: String = definedExternally
    open fun performAction(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): RecordEditor = definedExternally
    }
}
external open class DrawLabelEditProxy : DrawItemEditProxy {
//    override fun getInlineEditText(): Unit = definedExternally
//    override fun setInlineEditText(newValue: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DrawLabelEditProxy = definedExternally
    }
}
external open class Gauge : DrawPane {
    open var pivotPointHeight: dynamic /* String | Number */ = definedExternally
    open var pivotShape: DrawItem = definedExternally
    open var needle: DrawItem = definedExternally
    open var valueLabel: DrawLabel = definedExternally
    open var tickLine: DrawItem = definedExternally
    open var sectorShape: DrawSector = definedExternally
    open var dialRadius: Number = definedExternally
    open var fontSize: Number = definedExternally
    open var borderWidth: Number = definedExternally
    open var borderColor: String = definedExternally
    open var sectorColors: Array<String> = definedExternally
    open var minValue: Number = definedExternally
    open var maxValue: Number = definedExternally
    open var value: Number = definedExternally
    open var numMajorTicks: Number = definedExternally
    open var numMinorTicks: Number = definedExternally
    open var labelPrefix: String = definedExternally
    open var labelSuffix: String = definedExternally
    open var drawnClockwise: Boolean = definedExternally
    open var sectors: Array<Any?> = definedExternally
    open var pivotPoint: Point = definedExternally
    open fun setMinValue(minValue: Number): Unit = definedExternally
    open fun setDialRadius(dialRadius: Number): Unit = definedExternally
    open fun setPivotPoint(point: Point): Unit = definedExternally
    open fun setMaxValue(maxValue: Number): Unit = definedExternally
    open fun setValue(value: Number): Unit = definedExternally
    open fun setNumMajorTicks(numMajorTicks: Number): Unit = definedExternally
    open fun setNumMinorTicks(numMinorTicks: Number): Unit = definedExternally
    open fun setLabelPrefix(labelPrefix: String): Unit = definedExternally
    open fun setLabelSuffix(labelSuffix: String): Unit = definedExternally
    open fun setDrawnClockwise(drawnClockwise: Boolean): Unit = definedExternally
    open fun formatLabelContents(value: Number): String = definedExternally
    open fun reformatLabelContents(): Unit = definedExternally
    open fun getNumSectors(): Number = definedExternally
    open fun getSectorValue(sectorIndex: Number): Number = definedExternally
    open fun getDefaultFillColor(sectorIndex: Number): String = definedExternally
    open fun getSectorFillColor(sectorIndex: Number): String = definedExternally
    open fun setSectorFillColor(sectorIndex: Number, fillColor: String): Unit = definedExternally
    open fun getSectorLabelContents(sectorIndex: Number): String = definedExternally
    open fun setSectors(sectors: Array<Any?>): Unit = definedExternally
    open fun addSector(newSector: Number): Number = definedExternally
    open fun addSector(newSector: GaugeSector): Number = definedExternally
    open fun removeSector(sectorIndex: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Gauge = definedExternally
    }
}
external open class BlurbItem : FormItem {
//    override var showTitle: Boolean = definedExternally
//    override var colSpan: dynamic /* String | Number */ = definedExternally
//    override var textBoxStyle: String = definedExternally
//    override var canSelectText: Boolean = definedExternally
    open var wrap: Boolean = definedExternally
    open var clipValue: Boolean = definedExternally
//    override var editProxyConstructor: String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): BlurbItem = definedExternally
    }
}
external open class Window : Layout {
//    override var canDragReposition: Boolean = definedExternally
//    override var keepInParentRect: dynamic /* Boolean | Any */ = definedExternally
//    override var canDragResize: Boolean = definedExternally
//    override var useBackMask: Boolean = definedExternally
//    override var opacity: Number = definedExternally
    open var isModal: Boolean = definedExternally
    open var modalMask: Canvas = definedExternally
    open var showModalMask: Boolean = definedExternally
    open var modalMaskOpacity: Number = definedExternally
    open var modalMaskStyle: String = definedExternally
    open var autoCenter: Boolean = definedExternally
    open var dismissOnOutsideClick: Boolean = definedExternally
    open var dismissOnEscape: Boolean = definedExternally
    open var body: Canvas = definedExternally
    open var showBody: Boolean = definedExternally
    open var bodyStyle: String = definedExternally
    open var printBodyStyle: String = definedExternally
    open var bodyColor: String = definedExternally
    open var hiliteBodyColor: String = definedExternally
    open var items: dynamic /* String | Canvas | Array<Any?> */ = definedExternally
    open var src: String = definedExternally
    open var contentsType: String = definedExternally
    open var bodyConstructor: String = definedExternally
    open var bodyDefaults: Any = definedExternally
    open var contentLayout: dynamic /* String /* "none" */ | String /* "vertical" */ | String /* "horizontal" */ */ = definedExternally
    open var autoSize: Boolean = definedExternally
    open var header: HLayout = definedExternally
    open var showHeader: Boolean = definedExternally
    open var headerBackground: Img = definedExternally
    open var showHeaderBackground: Boolean = definedExternally
    open var headerStyle: String = definedExternally
    open var printHeaderStyle: String = definedExternally
    open var headerSrc: String = definedExternally
    open var headerControls: Array<String> = definedExternally
    open var hiliteHeaderStyle: String = definedExternally
    open var hiliteHeaderSrc: String = definedExternally
    open var headerLabel: Label = definedExternally
    open var showTitle: Boolean = definedExternally
    open var title: String = definedExternally
    open var headerLabelDefaults: Any = definedExternally
    open var headerIcon: Img = definedExternally
    open var showHeaderIcon: Boolean = definedExternally
    open var headerIconDefaults: Any = definedExternally
    open var canFocusInHeaderButtons: Boolean = definedExternally
    open var closeButton: ImgButton = definedExternally
    open var showCloseButton: Boolean = definedExternally
    open var minimizeButton: ImgButton = definedExternally
    open var showMinimizeButton: Boolean = definedExternally
    open var minimized: Boolean = definedExternally
    open var defaultMinimizeHeight: Number = definedExternally
    open var minimizeHeight: Number = definedExternally
    open var animateMinimize: Boolean = definedExternally
    open var minimizeTime: Number = definedExternally
    open var minimizeAcceleration: dynamic /* String /* "none" */ | String /* "smoothStart" */ | String /* "smoothEnd" */ | String /* "smoothStartEnd" */ */ = definedExternally
    open var restoreButton: ImgButton = definedExternally
    open var maximized: Boolean = definedExternally
    open var maximizeButton: ImgButton = definedExternally
    open var showMaximizeButton: Boolean = definedExternally
    open var footer: HLayout = definedExternally
    open var showFooter: Boolean = definedExternally
    open var footerHeight: Number = definedExternally
    open var footerControls: Array<String> = definedExternally
    open var statusBar: Canvas = definedExternally
    open var showStatusBar: Boolean = definedExternally
    open var resizer: ImgButton = definedExternally
    open var showResizer: Boolean = definedExternally
    open var placement: dynamic /* String /* "none" */ | String /* "nearOrigin" */ | String /* "fillPanel" */ | String /* "fillScreen" */ | String /* "halfScreen" */ */ = definedExternally
//    override var showEdges: Boolean = definedExternally
//    override var showShadow: Boolean = definedExternally
    open var fillSpaceStyleName: String = definedExternally
    open var bringToFrontOnMouseUp: Boolean = definedExternally
    open var status: String = definedExternally
//    override var editProxyConstructor: String = definedExternally
    open fun setHeaderStyle(newHeaderStyle: String): Unit = definedExternally
    open fun setShowCloseButton(): Unit = definedExternally
    open fun setShowMinimizeButton(): Unit = definedExternally
    open fun setShowMaximizeButton(): Unit = definedExternally
    open fun setShowHeaderIcon(): Unit = definedExternally
    open fun setTitle(newTitle: String): Unit = definedExternally
    open fun setStatus(statusString: String): Unit = definedExternally
    open fun setSrc(url: String): Unit = definedExternally
    open fun setBodyStyle(newBodyStyle: String): Unit = definedExternally
    open fun setBodyColor(newBodyColor: String): Unit = definedExternally
    open fun setHiliteBodyColor(newHiliteBodyColor: String): Unit = definedExternally
    open fun addItem(item: Canvas): Array<Any> = definedExternally
    open fun removeItem(item: Canvas): Array<Any> = definedExternally
    open fun addItems(items: Array<Any?>): Array<Any> = definedExternally
    open fun removeItems(items: Array<Any?>): Array<Any> = definedExternally
//    override fun addMember(newMember: Canvas, position: Number?): Unit = definedExternally
//    override fun addMembers(newMembers: Canvas, position: Number?): Unit = definedExternally
//    override fun addMembers(newMembers: Array<Any?>): Unit = definedExternally
//    override fun revealChild(child: String): Unit = definedExternally
//    override fun revealChild(child: Canvas): Unit = definedExternally
    open fun setAutoSize(autoSize: Boolean): Unit = definedExternally
    open fun shouldDismissOnEscape(): Boolean = definedExternally
    open fun centerInPage(): Unit = definedExternally
    open fun flash(): Unit = definedExternally
    open fun minimize(): Unit = definedExternally
    open fun restore(): Unit = definedExternally
    open fun maximize(): Unit = definedExternally
    open fun closeClick(): Boolean = definedExternally
    open fun close(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Window = definedExternally
        var NONE: String = definedExternally
        var VERTICAL: String = definedExternally
        var HORIZONTAL: String = definedExternally
    }
}
external open class WSRequest {
    open var wsOperation: String = definedExternally
    open var data: Any = definedExternally
    open var useFlatFields: Boolean = definedExternally
    open var xmlNamespaces: Any = definedExternally
    open var xmlResult: Boolean = definedExternally
    open var headerData: Any = definedExternally
}
external open class IPickTreeItem : PickTreeItem {
//    override var button: Canvas = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): IPickTreeItem = definedExternally
    }
}
external open class DoubleItem : FloatItem {
    open fun getValueAsDouble(): Number = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DoubleItem = definedExternally
    }
}
external open class ImgSplitbar : Img {
    open var target: Canvas = definedExternally
    open var vertical: Boolean = definedExternally
//    override var canDrag: Boolean = definedExternally
    open var canCollapse: Boolean = definedExternally
//    override var skinImgDir: String = definedExternally
//    override var src: String = definedExternally
    open var hSrc: String = definedExternally
    open var vSrc: String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ImgSplitbar = definedExternally
    }
}
external open class HLayout : Layout {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): HLayout = definedExternally
    }
}
external open class PortalPosition {
    open var colNum: Number = definedExternally
    open var rowNum: Number = definedExternally
    open var position: Number = definedExternally
}
external open class LinearGradient : Gradient {
    open var x1: String = definedExternally
    open var y1: String = definedExternally
    open var x2: String = definedExternally
    open var y2: String = definedExternally
}
external open class FilterBuilder : Layout {
    open var missingFieldPrompt: String = definedExternally
    open var fieldDataSource: DataSource = definedExternally
    open var sortFields: Boolean = definedExternally
    open var fieldPicker: PickList = definedExternally
    open var fieldPickerTitle: String = definedExternally
    open var fieldPickerProperties: FormItem = definedExternally
    open var operatorPicker: SelectItem = definedExternally
    open var operatorPickerProperties: FormItem = definedExternally
    open var operatorPickerTitle: String = definedExternally
    open var fieldPickerWidth: dynamic /* String | Number */ = definedExternally
    open var operatorPickerWidth: dynamic /* String | Number */ = definedExternally
    open var valueItemWidth: dynamic /* String | Number */ = definedExternally
    open var dataSource: dynamic /* String | DataSource */ = definedExternally
    open var criteria: AdvancedCriteria = definedExternally
    open var saveOnEnter: Boolean = definedExternally
    open var showFieldTitles: Boolean = definedExternally
    open var validateOnChange: Boolean = definedExternally
    open var showRemoveButton: Boolean = definedExternally
    open var removeButtonPrompt: String = definedExternally
    open var removeButton: ImgButton = definedExternally
    open var showAddButton: Boolean = definedExternally
    open var addButtonPrompt: String = definedExternally
    open var addButton: ImgButton = definedExternally
    open var allowEmpty: Boolean = definedExternally
    open var retainValuesAcrossFields: Boolean = definedExternally
    open var topOperatorOptions: Array<dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */> = definedExternally
    open var topOperator: dynamic /* String /* "and" */ | String /* "not" */ | String /* "or" */ */ = definedExternally
    open var radioOptions: Array<dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */> = definedExternally
    open var topOperatorAppearance: dynamic /* String /* "none" */ | String /* "radio" */ | String /* "bracket" */ | String /* "inline" */ */ = definedExternally
    open var radioOperatorLayout: HLayout = definedExternally
    open var radioOperatorForm: DynamicForm = definedExternally
    open var modeSwitcher: Label = definedExternally
    open var radioOperatorTitle: String = definedExternally
    open var showSelectionCheckbox: Boolean = definedExternally
    open var topOperatorForm: DynamicForm = definedExternally
    open var topOperatorItem: SelectItem = definedExternally
    open var topOperatorItemWidth: dynamic /* String | Number */ = definedExternally
    open var topOperatorTitle: String = definedExternally
    open var defaultSubClauseOperator: dynamic /* String /* "and" */ | String /* "not" */ | String /* "or" */ */ = definedExternally
    open var matchAllTitle: String = definedExternally
    open var matchNoneTitle: String = definedExternally
    open var matchAnyTitle: String = definedExternally
    open var inlineAndTitle: String = definedExternally
    open var inlineOrTitle: String = definedExternally
    open var inlineAndNotTitle: String = definedExternally
    open var modeSwitcherAdvancedMessage: String = definedExternally
    open var modeSwitcherSimpleMessage: String = definedExternally
    open var modeSwitcherFlattenWarningMessage: String = definedExternally
    open var showModeSwitcher: Boolean = definedExternally
    open var clauseStack: VStack = definedExternally
    open var rangeSeparator: String = definedExternally
    open var showSubClauseButton: Boolean = definedExternally
    open var subClauseButtonTitle: String = definedExternally
    open var subClauseButtonPrompt: String = definedExternally
    open var subClauseButton: IButton = definedExternally
    open var bracket: Canvas = definedExternally
    open fun removeClause(clause: FilterClause): Unit = definedExternally
    open fun setTopOperator(operator: String /* "and" */): Unit = definedExternally
    open fun setTopOperator(operator: String /* "not" */): Unit = definedExternally
    open fun setTopOperator(operator: String /* "or" */): Unit = definedExternally
    open fun setTopOperatorAppearance(appearance: String /* "none" */): Unit = definedExternally
    open fun setTopOperatorAppearance(appearance: String /* "radio" */): Unit = definedExternally
    open fun setTopOperatorAppearance(appearance: String /* "bracket" */): Unit = definedExternally
    open fun setTopOperatorAppearance(appearance: String /* "inline" */): Unit = definedExternally
    open fun addClause(filterClause: FilterClause): Unit = definedExternally
    open fun getChildFilters(): Array<Any?> = definedExternally
    open fun getFilterDescription(): String = definedExternally
    open fun validate(): Boolean = definedExternally
    open fun getFieldOperators(fieldName: String): Array<dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */> = definedExternally
    open fun getValueFieldProperties(type: dynamic /* String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "datetime" */ | String /* "enum" */ | String /* "intEnum" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ | String /* "any" */ | String /* "custom" */ | String /* "modifier" */ | String /* "modifierTimestamp" */ | String /* "creator" */ | String /* "creatorTimestamp" */ | String /* "password" */ | String /* "ntext" */ | String /* "localeInt" */ | String /* "localeFloat" */ | String /* "localeCurrency" */ | String /* "phoneNumber" */ */, fieldName: String, operatorId: dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */, itemType: String /* "value" */): FormItem = definedExternally
    open fun getValueFieldProperties(type: dynamic /* String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "datetime" */ | String /* "enum" */ | String /* "intEnum" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ | String /* "any" */ | String /* "custom" */ | String /* "modifier" */ | String /* "modifierTimestamp" */ | String /* "creator" */ | String /* "creatorTimestamp" */ | String /* "password" */ | String /* "ntext" */ | String /* "localeInt" */ | String /* "localeFloat" */ | String /* "localeCurrency" */ | String /* "phoneNumber" */ */, fieldName: String, operatorId: dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */, itemType: String /* "name" */): FormItem = definedExternally
    open fun getValueFieldProperties(type: dynamic /* String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "datetime" */ | String /* "enum" */ | String /* "intEnum" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ | String /* "any" */ | String /* "custom" */ | String /* "modifier" */ | String /* "modifierTimestamp" */ | String /* "creator" */ | String /* "creatorTimestamp" */ | String /* "password" */ | String /* "ntext" */ | String /* "localeInt" */ | String /* "localeFloat" */ | String /* "localeCurrency" */ | String /* "phoneNumber" */ */, fieldName: String, operatorId: dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */, itemType: String /* "start" */): FormItem = definedExternally
    open fun getValueFieldProperties(type: dynamic /* String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "datetime" */ | String /* "enum" */ | String /* "intEnum" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ | String /* "any" */ | String /* "custom" */ | String /* "modifier" */ | String /* "modifierTimestamp" */ | String /* "creator" */ | String /* "creatorTimestamp" */ | String /* "password" */ | String /* "ntext" */ | String /* "localeInt" */ | String /* "localeFloat" */ | String /* "localeCurrency" */ | String /* "phoneNumber" */ */, fieldName: String, operatorId: dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */, itemType: String /* "end" */): FormItem = definedExternally
    open fun getCriteria(includeEmptyValues: Boolean? = definedExternally /* null */): AdvancedCriteria = definedExternally
    open fun setCriteria(criteria: AdvancedCriteria): Unit = definedExternally
    open fun clearCriteria(): Unit = definedExternally
    open fun addCriterion(criterion: Criterion): Unit = definedExternally
    open fun getEditorType(field: DataSourceField, operatorId: dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */): String = definedExternally
    open fun getSelectedClauses(): Array<Any?> = definedExternally
    open fun search(criteria: AdvancedCriteria): Unit = definedExternally
    open fun filterChanged(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): FilterBuilder = definedExternally
        fun getFilterDescription(criteria: AdvancedCriteria, dataSource: DataSource): String = definedExternally
        fun getFilterDescription(criteria: Criterion, dataSource: DataSource): String = definedExternally
    }
}
external open class FormItemEditProxy : EditProxy {
    open var valueMapSeparatorChar: String = definedExternally
    open var valueMapDisplaySeparatorChar: String = definedExternally
    open var valueMapSelectedChar: String = definedExternally
    open var valueMapEscapeChar: String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): FormItemEditProxy = definedExternally
    }
}
external open class ToolStripResizer : ImgSplitbar {
//    override var skinImgDir: String = definedExternally
//    override var vSrc: String = definedExternally
//    override var hSrc: String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ToolStripResizer = definedExternally
    }
}
external open class AdvancedHiliteEditor : VStack {
    open var filterBuilder: FilterBuilder = definedExternally
    open var filterGroupTitle: String = definedExternally
    open var hiliteIcons: Array<String> = definedExternally
    open var hiliteForm: DynamicForm = definedExternally
    open var appearanceGroupTitle: String = definedExternally
    open var targetFieldsItemTitle: String = definedExternally
    open var saveButton: StatefulCanvas = definedExternally
    open var saveButtonTitle: String = definedExternally
    open var cancelButton: StatefulCanvas = definedExternally
    open var cancelButtonTitle: String = definedExternally
    open var invalidHilitePrompt: String = definedExternally
    open var title: String = definedExternally
    open var callback: Any? = definedExternally
    open fun saveHilite(): Unit = definedExternally
    open fun cancelEditing(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): AdvancedHiliteEditor = definedExternally
    }
}
external open class KeyIdentifier {
    open var keyName: String = definedExternally
    open var shiftKey: Boolean = definedExternally
    open var ctrlKey: Boolean = definedExternally
    open var altKey: Boolean = definedExternally
}
external open class ListPalette : ListGrid, Palette {
//    override var defaultEditContext: dynamic /* EditContext | EditTree | EditPane */ = definedExternally
//    override var generateNames: Boolean = definedExternally
//    override fun setDefaultEditContext(defaultEditContext: EditContext): Unit = definedExternally
//    override fun setDefaultEditContext(defaultEditContext: EditTree): Unit = definedExternally
//    override fun setDefaultEditContext(defaultEditContext: EditPane): Unit = definedExternally
//    override fun makeEditNode(paletteNode: PaletteNode): EditNode = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ListPalette = definedExternally
    }
}
external open class DrawLinePath : DrawItem {
    open var connectorStyle: dynamic /* String /* "diagonal" */ | String /* "rightAngle" */ */ = definedExternally
    open var connectorOrientation: dynamic /* String /* "vertical" */ | String /* "horizontal" */ | String /* "auto" */ */ = definedExternally
//    override var knobs: Array<dynamic /* String /* "resize" */ | String /* "move" */ | String /* "startPoint" */ | String /* "endPoint" */ | String /* "controlPoint1" */ | String /* "controlPoint2" */ | String /* "rotate" */ */> = definedExternally
//    override var titleRotationMode: dynamic /* String /* "neverRotate" */ | String /* "withItem" */ | String /* "withItemAlwaysUp" */ | String /* "withLine" */ | String /* "withLineAlwaysUp" */ */ = definedExternally
//    override var showTitleLabelBackground: Boolean = definedExternally
    open var startPoint: Point = definedExternally
    open var endPoint: Point = definedExternally
    open var controlPoint1: Point = definedExternally
    open var controlPoint2: Point = definedExternally
    open var tailSize: Number = definedExternally
    open var startLeft: Number = definedExternally
    open var startTop: Number = definedExternally
    open var endLeft: Number = definedExternally
    open var endTop: Number = definedExternally
//    override var endArrow: dynamic /* String /* "block" */ | String /* "open" */ */ = definedExternally
//    override fun getCenter(): Point = definedExternally
    open fun setStartPoint(left: Number, top: Number): Unit = definedExternally
    open fun setEndPoint(left: Number, top: Number): Unit = definedExternally
    open fun setControlPoint1(left: Number, top: Number): Unit = definedExternally
    open fun setControlPoint2(left: Number, top: Number): Unit = definedExternally
//    override fun getBoundingBox(): Array<Number> = definedExternally
//    override fun moveBy(left: Number, top: Number): Unit = definedExternally
    open fun moveStartPointTo(left: Number, top: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DrawLinePath = definedExternally
    }
}
external open class EventCanvas : VLayout {
    open var showHeader: Boolean = definedExternally
    open var showBody: Boolean = definedExternally
//    override var vertical: Boolean = definedExternally
//    override var styleName: String = definedExternally
    open var event: CalendarEvent = definedExternally
    open var calendar: Calendar = definedExternally
    open var calendarView: CalendarView = definedExternally
    open var showLabel: Boolean = definedExternally
    open var label: Label = definedExternally
    open var showGripper: Boolean = definedExternally
    open var gripperIcon: String = definedExternally
    open var gripper: Img = definedExternally
    open var headerWrap: Boolean = definedExternally
    open var headerHeight: Number = definedExternally
    open var headerStyle: String = definedExternally
    open var bodyStyle: String = definedExternally
    open var showRolloverControls: Boolean = definedExternally
    open fun setEvent(event: CalendarEvent, styleName: String? = definedExternally /* null */, headerStyle: String? = definedExternally /* null */, bodyStyle: String? = definedExternally /* null */): Unit = definedExternally
    open fun getHeaderHTML(): String = definedExternally
    open fun getBodyHTML(): String = definedExternally
//    override fun getInnerHTML(): String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): EventCanvas = definedExternally
    }
}
external open class TreeMenuButton : MenuButton {
//    override var title: String = definedExternally
    open var unselectedTitle: String = definedExternally
    open var emptyMenuMessage: String = definedExternally
    open var showPath: Boolean = definedExternally
    open var pathSeparatorString: String = definedExternally
    open var selectedBaseStyle: String = definedExternally
    open var dataProperties: Tree = definedExternally
    open var treeMenuConstructor: String = definedExternally
    open var treeMenu: Menu = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): TreeMenuButton = definedExternally
    }
}
external open class GridRenderer : Canvas {
    open var totalRows: Number = definedExternally
    open var showAllRows: Boolean = definedExternally
    open var virtualScrolling: Boolean = definedExternally
    open var showAllColumns: Boolean = definedExternally
    open var drawAllMaxCells: Number = definedExternally
    open var instantScrollTrackRedraw: Boolean = definedExternally
    open var scrollRedrawDelay: Number = definedExternally
    open var dragScrollRedrawDelay: Number = definedExternally
    open var touchScrollRedrawDelay: Number = definedExternally
    open var scrollWheelRedrawDelay: Number = definedExternally
    open var drawAheadRatio: Number = definedExternally
    open var quickDrawAheadRatio: Number = definedExternally
    open var cellHeight: Number = definedExternally
    open var fixedRowHeights: Boolean = definedExternally
    open var fixedColumnWidths: Boolean = definedExternally
    open var autoFit: Boolean = definedExternally
    open var wrapCells: Boolean = definedExternally
    open var cellPadding: Number = definedExternally
    open var canSelectOnRightMouse: Boolean = definedExternally
//    override var canHover: Boolean = definedExternally
//    override var showHover: Boolean = definedExternally
    open var showClippedValuesOnHover: Boolean = definedExternally
    open var baseStyle: String = definedExternally
    open var alternateRowStyles: Boolean = definedExternally
    open var alternateRowSuffix: String = definedExternally
    open var alternateRowFrequency: Number = definedExternally
    open var alternateColumnStyles: Boolean = definedExternally
    open var alternateColumnSuffix: String = definedExternally
    open var alternateColumnFrequency: Number = definedExternally
    open var emptyCellValue: String = definedExternally
    open var showEmptyMessage: Boolean = definedExternally
    open var emptyMessage: String = definedExternally
    open var emptyMessageTableStyle: String = definedExternally
    open var emptyMessageStyle: String = definedExternally
    open var showOfflineMessage: Boolean = definedExternally
    open var offlineMessageStyle: String = definedExternally
    open var offlineMessage: String = definedExternally
    open var fastCellUpdates: Boolean = definedExternally
    open var snapToCells: Boolean = definedExternally
    open var snapInsideBorder: Boolean = definedExternally
    open var recordCustomStyleProperty: String /* "CustomStyle" */ = definedExternally
    open var showSelectedStyle: Boolean = definedExternally
    open fun getCellFromDomElement(element: DOMElement): Array<Any> = definedExternally
    open fun setFastCellUpdates(fastCellUpdates: Boolean): Unit = definedExternally
    open fun cellValueIsClipped(rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun getTotalRows(): Number = definedExternally
    open fun setColumnWidth(colNum: Number, newWidth: Number): Unit = definedExternally
    open fun setColumnWidths(newWidths: Array<Any>): Unit = definedExternally
    open fun getCellStartRow(rowNum: Number, colNum: Number): Number = definedExternally
    open fun getCellRowSpan(rowNum: Number, colNum: Number): Number = definedExternally
    open fun getCellStyle(record: ListGridRecord, rowNum: Number, colNum: Number): String = definedExternally
    open fun cellIsEnabled(rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun refreshCellStyle(rowNum: Number, colNum: Number): Unit = definedExternally
    open fun refreshCell(rowNum: Number, colNum: Number): Unit = definedExternally
    open fun refreshRow(rowNum: Number): Unit = definedExternally
    open fun getCellPageRect(rowNum: Number, colNum: Number): Array<Number> = definedExternally
    open fun getColumnLeft(colNum: Number): Number = definedExternally
    open fun getColumnPageLeft(colNum: Number): Number = definedExternally
    open fun getColumnWidth(colNum: Number): Number = definedExternally
    open fun getRowTop(rowNum: Number): Number = definedExternally
    open fun getRowPageTop(rowNum: Number): Number = definedExternally
    open fun getEventRow(y: Number? = definedExternally /* null */): Number = definedExternally
    open fun getEventColumn(x: Number? = definedExternally /* null */): Number = definedExternally
    open fun getNearestRowToEvent(): Unit = definedExternally
    open fun getNearestColToEvent(): Unit = definedExternally
    open fun getVisibleRows(): Array<Number> = definedExternally
    open fun getDrawnRows(): Array<Any> = definedExternally
    open fun getCellRecord(rowNum: Number, colNum: Number): Any = definedExternally
    open fun getCellValue(record: ListGridRecord, rowNum: Number, colNum: Number): String = definedExternally
    open fun findRowNum(record: ListGridRecord): Number = definedExternally
    open fun findColNum(record: ListGridRecord): Number = definedExternally
    open fun getBaseStyle(record: ListGridRecord, rowNum: Number, colNum: Number): String = definedExternally
    open fun getCellCSSText(record: ListGridRecord, rowNum: Number, colNum: Number): String = definedExternally
    open fun getRowHeight(record: ListGridRecord, rowNum: Number): Number = definedExternally
    open fun getRowSpan(record: ListGridRecord, rowNum: Number, colNum: Number): Number = definedExternally
    open fun cellOut(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun cellOver(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun rowOut(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun rowOver(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun cellContextClick(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun rowContextClick(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun cellMouseDown(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun rowMouseDown(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun cellMouseUp(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun rowMouseUp(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun cellClick(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun cellDoubleClick(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun rowClick(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun rowDoubleClick(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun cellHover(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun cellValueHover(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun rowHover(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun cellHoverHTML(record: ListGridRecord, rowNum: Number, colNum: Number): String = definedExternally
    open fun cellValueHoverHTML(record: ListGridRecord, rowNum: Number, colNum: Number, defaultHTML: String): String = definedExternally
    open fun getCellHoverComponent(record: ListGridRecord, rowNum: Number, colNum: Number): Canvas = definedExternally
    open fun selectionChanged(record: ListGridRecord, state: Boolean): Unit = definedExternally
    open fun cellSelectionChanged(cellList: Array<Any>): Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): GridRenderer = definedExternally
    }
}
external open class EditPane : Canvas {
    open var editContext: EditContext = definedExternally
    open var editContextProperties: EditContext = definedExternally
    open var autoEditNewNodes: Boolean = definedExternally
    open var rootComponent: PaletteNode = definedExternally
    open var defaultPalette: Palette = definedExternally
    open var extraPalettes: Array<Any?> = definedExternally
    open var persistCoordinates: Boolean = definedExternally
    open var allowNestedDrops: Boolean = definedExternally
    open var showSelectedLabel: Boolean = definedExternally
    open var selectedBorder: String = definedExternally
    open var selectedLabelBackgroundColor: String = definedExternally
    open var canGroupSelect: Boolean = definedExternally
    open var canDragGroup: Boolean = definedExternally
    open var hideGroupBorderOnDrag: Boolean = definedExternally
    open var useCopyPasteShortcuts: Boolean = definedExternally
    open fun getEditContext(): EditContext = definedExternally
    open fun getSaveData(): Array<Any?> = definedExternally
    open fun getRootEditNode(): EditNode = definedExternally
    open fun makeEditNode(paletteNode: PaletteNode): EditNode = definedExternally
    open fun getEditNodeTree(): Tree = definedExternally
    open fun addNode(newNode: EditNode, parentNode: EditNode? = definedExternally /* null */, index: Number? = definedExternally /* null */, parentProperty: String? = definedExternally /* null */, skipParentComponentAdd: Boolean? = definedExternally /* null */, forceSingularFieldReplace: Boolean? = definedExternally /* null */): EditNode = definedExternally
    open fun addFromPaletteNode(paletteNode: PaletteNode, parentNode: EditNode? = definedExternally /* null */): EditNode = definedExternally
    open fun addFromPaletteNodes(paletteNodes: Array<Any?>, parentNode: EditNode? = definedExternally /* null */): Array<Any?> = definedExternally
    open fun removeNode(editNode: EditNode): Unit = definedExternally
    open fun reorderNode(parentNode: EditNode, index: Number, moveToIndex: Number): Unit = definedExternally
    open fun removeAll(): Unit = definedExternally
    open fun destroyAll(): Unit = definedExternally
    open fun isNodeEditingOn(editNode: EditNode): Boolean = definedExternally
    open fun enableEditing(editNode: EditNode): Unit = definedExternally
    open fun setNodeProperties(editNode: EditNode, properties: Canvas, skipLiveObjectUpdate: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun removeNodeProperties(editNode: EditNode, properties: Array<String>): Unit = definedExternally
    open fun getDefaultPalette(): Palette = definedExternally
    open fun setDefaultPalette(palette: Palette): Unit = definedExternally
    open fun makePaletteNode(editNode: EditNode): PaletteNode = definedExternally
    open fun makePaletteNodeTree(editNode: EditNode): Tree = definedExternally
    open fun copyEditNodes(editNode: EditNode): Unit = definedExternally
    open fun copyEditNodes(editNode: Array<Any?>): Unit = definedExternally
    open fun pasteEditNodes(targetEditNode: EditNode? = definedExternally /* null */): Unit = definedExternally
    open fun addPaletteNodesFromXML(xmlString: String, parentNode: EditNode? = definedExternally /* null */, globals: Array<String>? = definedExternally /* null */, callback: Function<*>? = definedExternally /* null */): Unit = definedExternally
    open fun addPaletteNodesFromJSON(jsonString: String, parentNode: EditNode? = definedExternally /* null */, globals: Array<String>? = definedExternally /* null */, callback: Function<*>? = definedExternally /* null */): Unit = definedExternally
    open fun getPaletteNodesFromXML(xmlString: String, callback: (paletteNodes: Array<Any?>) -> Unit): Unit = definedExternally
    open fun addPaletteNodesFromJS(jsCode: String, parentNode: EditNode? = definedExternally /* null */, globals: Array<String>? = definedExternally /* null */): Unit = definedExternally
    open fun serializeAllEditNodes(settings: SerializationSettings? = definedExternally /* null */): String = definedExternally
    open fun serializeAllEditNodesAsJSON(settings: SerializationSettings? = definedExternally /* null */): String = definedExternally
    open fun serializeEditNodes(nodes: Array<Any?>, settings: SerializationSettings? = definedExternally /* null */): String = definedExternally
    open fun serializeEditNodesAsJSON(nodes: Array<Any?>, settings: SerializationSettings? = definedExternally /* null */): String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): EditPane = definedExternally
    }
}
external open class FacetValueMap
external open class EventWindow : Window {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): EventWindow = definedExternally
    }
}
external open class Shadow {
    open var color: String = definedExternally
    open var blur: Number = definedExternally
    open var offset: Point = definedExternally
}
external open class Process : Task {
    open var sequences: Array<Any?> = definedExternally
    open var elements: Array<Any?> = definedExternally
    open var startElement: String = definedExternally
    open var wizard: Boolean = definedExternally
    open var containerId: String = definedExternally
    open var state: Record = definedExternally
//    override var ruleScope: String = definedExternally
    open var autoStart: Boolean = definedExternally
    open var traceContext: Any = definedExternally
    open fun getElement(ID: String): ProcessElement = definedExternally
    open fun setState(state: Record): Unit = definedExternally
    open fun start(): Unit = definedExternally
    open fun reset(state: Record): Unit = definedExternally
    open fun finished(state: Record): Unit = definedExternally
    open fun traceElement(element: Task, context: Any): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Process = definedExternally
        fun loadProcess(processId: String, callback: (dsResponse: DSResponse, process: Process) -> Unit): Unit = definedExternally
        fun loadProcess(processId: Array<String>, callback: (dsResponse: DSResponse, process: Process) -> Unit): Unit = definedExternally
        fun getProcess(processId: String): Process = definedExternally
    }
}
external open class DateRangeItem : CanvasItem {
    open var fieldLayout: dynamic /* String /* "vertical" */ | String /* "horizontal" */ */ = definedExternally
//    override var shouldSaveValue: Boolean = definedExternally
    open var fromTitle: String = definedExternally
    open var toTitle: String = definedExternally
    open var innerTitleOrientation: dynamic /* String /* "left" */ | String /* "top" */ | String /* "right" */ */ = definedExternally
    open var allowRelativeDates: Boolean = definedExternally
    open var fromField: FormItem = definedExternally
    open var toField: FormItem = definedExternally
    open var fromDate: dynamic /* String | Date */ = definedExternally
    open var toDate: dynamic /* String | Date */ = definedExternally
    open var dateInputFormat: String = definedExternally
//    override var inputFormat: String = definedExternally
    open var dateDisplayFormat: dynamic /* String /* "toString" */ | String /* "toLocaleString" */ | String /* "toUSShortDate" */ | String /* "toUSShortDatetime" */ | String /* "toEuropeanShortDate" */ | String /* "toEuropeanShortDatetime" */ | String /* "toJapanShortDate" */ | String /* "toJapanShortDatetime" */ | String /* "toSerializeableDate" */ | String /* "toDateStamp" */ */ = definedExternally
//    override var formula: UserFormula = definedExternally
//    override var textFormula: UserSummary = definedExternally
    open var validateCriteria: Boolean = definedExternally
    open var dateRangeForm: DynamicForm = definedExternally
    open var relativeItemConstructor: String = definedExternally
    open var absoluteItemConstructor: String = definedExternally
    open var absoluteDateTimeItemConstructor: String = definedExternally
    open var invalidRangeErrorMessage: String = definedExternally
    open fun setFromDate(fromDate: String): Unit = definedExternally
    open fun setFromDate(fromDate: Date): Unit = definedExternally
    open fun setToDate(fromDate: String): Unit = definedExternally
    open fun setToDate(fromDate: Date): Unit = definedExternally
//    override fun hasAdvancedCriteria(): Boolean = definedExternally
//    override fun getCriterion(): Criterion = definedExternally
    open fun validateRange(): Boolean = definedExternally
//    override fun canEditCriterion(criterion: Criterion): Boolean = definedExternally
//    override fun setCriterion(criterion: Criterion): Unit = definedExternally
    open fun setValue(value: DateRange): Unit = definedExternally
//    override fun getValue(): DateRange = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DateRangeItem = definedExternally
    }
}
external open class SpinnerItem : TextItem {
//    override var mask: String = definedExternally
//    override var maskSaveLiterals: Boolean = definedExternally
//    override var maskPadChar: String = definedExternally
//    override var maskPromptChar: String = definedExternally
//    override var maskOverwriteMode: Boolean = definedExternally
    open var unstackedTextBoxStyle: String = definedExternally
    open var unstackedPrintTextBoxStyle: String = definedExternally
    open var unstackedReadOnlyTextBoxStyle: String = definedExternally
    open var step: Number = definedExternally
    open var max: Number = definedExternally
    open var min: Number = definedExternally
    open var increaseIcon: FormItemIcon = definedExternally
    open var increaseIconProperties: FormItemIcon = definedExternally
    open var decreaseIcon: FormItemIcon = definedExternally
    open var decreaseIconProperties: FormItemIcon = definedExternally
    open var writeStackedIcons: Boolean = definedExternally
    open var stackedIconsWidth: Number = definedExternally
    open var stackedIconsHeight: Number = definedExternally
    open var unstackedIncreaseIcon: FormItemIcon = definedExternally
    open var unstackedDecreaseIcon: FormItemIcon = definedExternally
    open fun getNextValue(currentValue: Number, step: Number): Number = definedExternally
    open fun getPreviousValue(currentValue: Number, step: Number): Number = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SpinnerItem = definedExternally
    }
}
external open class UserFormula {
    open var text: String = definedExternally
    open var formulaVars: Map<Any> = definedExternally
}
external open class DSRequest : RPCRequest {
    open var useStrictJSON: Boolean = definedExternally
    open var exportRawValues: Boolean = definedExternally
    open var exportPropertyIdentifier: dynamic /* String /* "name" */ | String /* "title" */ */ = definedExternally
    open var dataSource: String = definedExternally
    open var operationType: dynamic /* String /* "custom" */ | String /* "fetch" */ | String /* "add" */ | String /* "update" */ | String /* "remove" */ | String /* "validate" */ | String /* "viewFile" */ | String /* "downloadFile" */ | String /* "storeTestData" */ | String /* "clientExport" */ | String /* "getFile" */ | String /* "hasFile" */ | String /* "listFiles" */ | String /* "removeFile" */ | String /* "saveFile" */ | String /* "renameFile" */ | String /* "getFileVersion" */ | String /* "hasFileVersion" */ | String /* "listFileVersions" */ | String /* "removeFileVersion" */ */ = definedExternally
//    override var data: dynamic /* Any? | Array<Any?> */ = definedExternally
//    override var callback: Any? = definedExternally
    open var startRow: Number = definedExternally
    open var endRow: Number = definedExternally
    open var sortBy: dynamic /* String | Array<Any?> | Array<String> */ = definedExternally
    open var summaryFunctions: Map<dynamic /* String /* "title" */ | String /* "sum" */ | String /* "avg" */ | String /* "max" */ | String /* "min" */ | String /* "multiplier" */ | String /* "count" */ | String /* "first" */ | String /* "concat" */ */> = definedExternally
    open var exportCSS: String = definedExternally
    open var groupBy: Array<String> = definedExternally
    open var outputs: String = definedExternally
    open var additionalOutputs: String = definedExternally
    open var generateRelatedUpdates: Boolean = definedExternally
    open var textMatchStyle: dynamic /* String /* "startsWith" */ | String /* "exact" */ | String /* "exactCase" */ | String /* "substring" */ */ = definedExternally
    open var oldValues: Record = definedExternally
    open var componentId: String = definedExternally
    open var operationId: String = definedExternally
    open var dataProtocol: dynamic /* String /* "getParams" */ | String /* "postParams" */ | String /* "postXML" */ | String /* "soap" */ | String /* "postMessage" */ | String /* "clientCustom" */ */ = definedExternally
    open var requestId: String = definedExternally
//    override var clientContext: Any = definedExternally
    open var parentNode: TreeNode = definedExternally
    open var resultTree: ResultTree = definedExternally
    open var keepParentsOnFilter: Boolean = definedExternally
    open var resultSet: ResultSet = definedExternally
    open var shouldUseCache: Boolean = definedExternally
    open var useFlatFields: Boolean = definedExternally
    open var useFlatHeaderFields: Boolean = definedExternally
    open var headerData: Any = definedExternally
    open var exportResults: Boolean = definedExternally
    open var exportAs: dynamic /* String /* "xml" */ | String /* "json" */ | String /* "csv" */ | String /* "xls" */ | String /* "ooxml" */ */ = definedExternally
    open var exportFilename: String = definedExternally
    open var exportImageFormat: dynamic /* String /* "png" */ | String /* "jpeg" */ */ = definedExternally
    open var exportImageQuality: Number = definedExternally
    open var exportPath: String = definedExternally
    open var exportToFilesystem: Boolean = definedExternally
    open var exportToClient: Boolean = definedExternally
    open var exportTitleSeparatorChar: String = definedExternally
    open var exportDisplay: dynamic /* String /* "download" */ | String /* "window" */ | String /* "return" */ */ = definedExternally
    open var lineBreakStyle: String = definedExternally
    open var exportDelimiter: String = definedExternally
    open var exportShowHeaderSpanTitles: Boolean = definedExternally
    open var exportSpanTitleSeparator: String = definedExternally
    open var exportFields: Array<String> = definedExternally
    open var exportHeader: String = definedExternally
    open var exportHeaderless: Boolean = definedExternally
    open var exportFooter: String = definedExternally
    open var exportData: Array<Any?> = definedExternally
    open var exportValueFields: Boolean = definedExternally
    open var exportDatesAsFormattedString: Boolean = definedExternally
    open var exportTZ: String = definedExternally
    open var exportStreaming: Boolean = definedExternally
    open var validationMode: dynamic /* String /* "full" */ | String /* "partial" */ */ = definedExternally
    open var pendingAdd: Boolean = definedExternally
    open var streamResults: Boolean = definedExternally
    open var progressiveLoading: Boolean = definedExternally
    open var fieldValueExpressions: Any = definedExternally
}
external open class PrintCanvas : Canvas {
    open var printFrameURL: String = definedExternally
    open var externalStylesheet: String = definedExternally
    open fun setHTML(HTML: String, callback: (printPreview: PrintCanvas) -> Unit): Unit = definedExternally
    open fun print(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): PrintCanvas = definedExternally
    }
}
external open class IButton : Button {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): IButton = definedExternally
    }
}
external open class TabIndexManager : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): TabIndexManager = definedExternally
        fun addTarget(ID: String, canFocus: Boolean, parentID: String? = definedExternally /* null */, position: Number? = definedExternally /* null */, tabIndexUpdatedCallback: ((ID: String) -> Unit)? = definedExternally /* null */, shiftFocusCallback: ((ID: String) -> Unit)? = definedExternally /* null */): Unit = definedExternally
        fun hasTarget(ID: String): Boolean = definedExternally
        fun moveTarget(ID: String, parentID: String? = definedExternally /* null */, position: Number? = definedExternally /* null */): Unit = definedExternally
        fun moveTargets(IDs: Array<String>, parentID: String? = definedExternally /* null */, position: Number? = definedExternally /* null */): Unit = definedExternally
        fun suppressCallbacks(targets: Array<String>): Unit = definedExternally
        fun resumeCallbacks(targets: Array<String>): Unit = definedExternally
        fun removeTarget(ID: String): Unit = definedExternally
        fun setCanFocus(ID: String, canFocus: Boolean): Unit = definedExternally
        fun getTabIndex(ID: String): Number = definedExternally
        fun focusInTarget(ID: String): Boolean = definedExternally
        fun shiftFocus(ID: String, forward: Boolean): Boolean = definedExternally
        fun shiftFocusWithinGroup(targetGroup: String, currentTarget: String, forward: Boolean): Boolean = definedExternally
        fun shiftFocusAfterGroup(targetGroup: String, forward: Boolean): Boolean = definedExternally
        fun showAllocatedTabChain(): Unit = definedExternally
        fun getAllocatedTabChain(): String = definedExternally
    }
}
external interface PickList {
    var pickListHeight: Number? get() = definedExternally; set(value) = definedExternally
    var emptyPickListHeight: Number? get() = definedExternally; set(value) = definedExternally
    var emptyPickListMessage: String? get() = definedExternally; set(value) = definedExternally
    var hideEmptyPickList: Boolean? get() = definedExternally; set(value) = definedExternally
    var pickListWidth: Number? get() = definedExternally; set(value) = definedExternally
    var pickListMaxWidth: Number? get() = definedExternally; set(value) = definedExternally
    var pickListBaseStyle: String? get() = definedExternally; set(value) = definedExternally
    var pickListTallBaseStyle: String? get() = definedExternally; set(value) = definedExternally
    var pickListApplyRowNumberStyle: Boolean? get() = definedExternally; set(value) = definedExternally
    var animatePickList: Boolean? get() = definedExternally; set(value) = definedExternally
    var pickListAnimationTime: Number? get() = definedExternally; set(value) = definedExternally
    var fetchDelay: Number? get() = definedExternally; set(value) = definedExternally
    var pickListCellHeight: Number? get() = definedExternally; set(value) = definedExternally
    var pickListProperties: ListGrid? get() = definedExternally; set(value) = definedExternally
    var pickListHeaderHeight: Number? get() = definedExternally; set(value) = definedExternally
    var rootNodeId: dynamic /* String | Number */ get() = definedExternally; set(value) = definedExternally
    var autoOpenTree: String? get() = definedExternally; set(value) = definedExternally
    // var valueField: String? get() = definedExternally; set(value) = definedExternally
    var displayField: String? get() = definedExternally; set(value) = definedExternally
    var useLocalDisplayFieldValue: Boolean? get() = definedExternally; set(value) = definedExternally
    var dataSetType: String? get() = definedExternally; set(value) = definedExternally
    var pickListConstructor: String? get() = definedExternally; set(value) = definedExternally
    var pickTreeConstructor: String? get() = definedExternally; set(value) = definedExternally
    var pickListFields: Array<Any?>? get() = definedExternally; set(value) = definedExternally
    var valueIconField: String? get() = definedExternally; set(value) = definedExternally
    var pickListCriteria: Any? get() = definedExternally; set(value) = definedExternally
    var optionDataSource: dynamic /* String | DataSource */ get() = definedExternally; set(value) = definedExternally
    var showOptionsFromDataSource: Boolean? get() = definedExternally; set(value) = definedExternally
    var fetchDisplayedFieldsOnly: Boolean? get() = definedExternally; set(value) = definedExternally
    var optionFilterContext: DSRequest? get() = definedExternally; set(value) = definedExternally
    var filterLocally: Boolean? get() = definedExternally; set(value) = definedExternally
    var sortField: dynamic /* String | Number | Array<String> */ get() = definedExternally; set(value) = definedExternally
    var initialSort: Array<Any?>? get() = definedExternally; set(value) = definedExternally
    var useClientFiltering: Boolean? get() = definedExternally; set(value) = definedExternally
    var cachePickListResults: Boolean? get() = definedExternally; set(value) = definedExternally
    var iconPlacement: dynamic /* String /* "pickerNavigationBar" */ | String /* "formItem" */ | String /* "both" */ */ get() = definedExternally; set(value) = definedExternally
    var textMatchStyle: dynamic /* String /* "startsWith" */ | String /* "exact" */ | String /* "exactCase" */ | String /* "substring" */ */ get() = definedExternally; set(value) = definedExternally
    var showAllOptions: Boolean? get() = definedExternally; set(value) = definedExternally
    var separatorRows: Array<Any?>? get() = definedExternally; set(value) = definedExternally
    var specialValues: Any? get() = definedExternally; set(value) = definedExternally
    val fetchData: ((callback: Any? /*= null*/, requestProperties: DSRequest? /*= null*/) -> Unit)? get() = definedExternally
    val getOptionDataSource: (() -> DataSource)? get() = definedExternally
    val getPickListFilterCriteria: (() -> Any?)? get() = definedExternally
    val getValueFieldName: (() -> String)? get() = definedExternally
    val getDisplayFieldName: (() -> String)? get() = definedExternally
    val getClientPickListData: (() -> Array<Any?>)? get() = definedExternally
    val dataArrived: ((startRow: Number, endRow: Number, data: ResultSet) -> Unit)? get() = definedExternally
    val filterClientPickListData: (() -> Array<Any?>)? get() = definedExternally
}
external open class Page : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Page = definedExternally
        var defaultUnsupportedBrowserURL: String = definedExternally
        var protocolURLs: Array<String> = definedExternally
        var unsupportedBrowserAction: String = definedExternally
        var FIRE_ONCE: String = definedExternally
        var suppressBackspaceNavigation: Boolean = definedExternally
        fun isLoaded(): Boolean = definedExternally
        fun setTitle(): Unit = definedExternally
        fun getAppDir(): String = definedExternally
        fun setAppImgDir(URL: String? = definedExternally /* null */): Unit = definedExternally
        fun getAppImgDir(): String = definedExternally
        fun setAppFilesDir(URL: String? = definedExternally /* null */): Unit = definedExternally
        fun getAppFilesDir(URL: String? = definedExternally /* null */): Unit = definedExternally
        fun setIsomorphicDir(URL: String? = definedExternally /* null */): Unit = definedExternally
        fun getIsomorphicDir(): String = definedExternally
        fun setIsomorphicToolsDir(URL: String? = definedExternally /* null */): Unit = definedExternally
        fun getIsomorphicToolsDir(): String = definedExternally
        fun setSkinDir(URL: String? = definedExternally /* null */): Unit = definedExternally
        fun getSkinDir(): String = definedExternally
        fun getSkinImgDir(imgDir: String? = definedExternally /* null */): String = definedExternally
        fun getImgURL(src: String, imgDir: String? = definedExternally /* null */): String = definedExternally
        fun getURL(fileName: String): String = definedExternally
        fun isRTL(): Boolean = definedExternally
        fun loadStyleSheet(styleSheetURL: String): Unit = definedExternally
        fun resizeTo(width: Number, height: Number): Unit = definedExternally
        fun moveTo(left: Number, top: Number): Unit = definedExternally
        fun scrollTo(left: Number, top: Number): Unit = definedExternally
        fun getWidth(wd: Any? = definedExternally /* null */): Number = definedExternally
        fun getHeight(wd: Any? = definedExternally /* null */): Number = definedExternally
        fun getOrientation(): dynamic /* String /* "landscape" */ | String /* "portrait" */ */ = definedExternally
        fun updateViewport(scale: Number? = definedExternally /* null */, width: Number? = definedExternally /* null */, height: Number? = definedExternally /* null */, scalable: Boolean? = definedExternally /* null */): Unit = definedExternally
        fun getScrollWidth(): Number = definedExternally
        fun getScrollHeight(): Number = definedExternally
        fun getScrollLeft(): Number = definedExternally
        fun getScrollTop(): Number = definedExternally
        fun getScreenWidth(): Unit = definedExternally
        fun getScreenHeight(): Unit = definedExternally
        fun goBack(): Unit = definedExternally
        fun waitFor(`object`: Any, methodName: String, callback: Function<*>, timeout: Number? = definedExternally /* null */, timeoutCallback: Function<*>? = definedExternally /* null */): Boolean = definedExternally
        fun waitForMultiple(objects: Array<Any>, callback: Function<*>, timeout: Number? = definedExternally /* null */, timeoutCallback: Function<*>? = definedExternally /* null */): Boolean = definedExternally
        fun checkBrowserAndRedirect(URL: String? = definedExternally /* null */): Unit = definedExternally
        fun getUnsupportedBrowserPromptString(): String = definedExternally
        fun setAddVersionToSkinCSS(addVersionToSkinCss: Boolean): Unit = definedExternally
        fun isAddVersionToSkinCSS(): Boolean = definedExternally
        fun setEvent(eventType: dynamic /* String /* "resize" */ | String /* "idle" */ | String /* "load" */ | String /* "unload" */ | String /* "mouseDown" */ | String /* "rightMouseDown" */ | String /* "mouseMove" */ | String /* "mouseUp" */ | String /* "click" */ | String /* "doubleClick" */ | String /* "showContextMenu" */ | String /* "keyPress" */ | String /* "orientationChange" */ | String /* "fontsLoaded" */ | String /* "fontLoadingFailed" */ */, action: String, fireStyle: String? /* "once" */ = definedExternally /* null */, functionName: String? = definedExternally /* null */): Number = definedExternally
        fun clearEvent(eventType: dynamic /* String /* "resize" */ | String /* "idle" */ | String /* "load" */ | String /* "unload" */ | String /* "mouseDown" */ | String /* "rightMouseDown" */ | String /* "mouseMove" */ | String /* "mouseUp" */ | String /* "click" */ | String /* "doubleClick" */ | String /* "showContextMenu" */ | String /* "keyPress" */ | String /* "orientationChange" */ | String /* "fontsLoaded" */ | String /* "fontLoadingFailed" */ | Event */, ID: Number? = definedExternally /* null */): Unit = definedExternally
        fun registerKey(key: KeyIdentifier, action: String, target: Any? = definedExternally /* null */): Unit = definedExternally
        fun unregisterKey(actionID: String, target: Any? = definedExternally /* null */): Unit = definedExternally
    }
}
external open class SectionStackEditProxy : LayoutEditProxy {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SectionStackEditProxy = definedExternally
    }
}
external open class ResetItem : ButtonItem {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ResetItem = definedExternally
    }
}
external open class DSRequestModifier {
    open var fieldName: String = definedExternally
    open var operator: String = definedExternally
    open var value: String = definedExternally
    open var start: String = definedExternally
    open var end: String = definedExternally
}
external open class RPCResponse : Class {
    open var data: dynamic /* String | Any? */ = definedExternally
    open var status: Number = definedExternally
    open var httpResponseCode: Number = definedExternally
    open var httpHeaders: Any = definedExternally
    open var httpResponseText: String = definedExternally
    open var clientContext: Any = definedExternally
    open var transactionNum: Number = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): RPCResponse = definedExternally
        var STATUS_SUCCESS: Number = definedExternally
        var STATUS_OFFLINE: Number = definedExternally
        var STATUS_FAILURE: Number = definedExternally
        var STATUS_AUTHORIZATION_FAILURE: Number = definedExternally
        var STATUS_VALIDATION_ERROR: Number = definedExternally
        var STATUS_LOGIN_INCORRECT: Number = definedExternally
        var STATUS_MAX_LOGIN_ATTEMPTS_EXCEEDED: Number = definedExternally
        var STATUS_LOGIN_REQUIRED: Number = definedExternally
        var STATUS_LOGIN_SUCCESS: Number = definedExternally
        var STATUS_UPDATE_WITHOUT_PK_ERROR: Number = definedExternally
        var STATUS_TRANSACTION_FAILED: Number = definedExternally
        var STATUS_MAX_FILE_SIZE_EXCEEDED: Number = definedExternally
        var STATUS_MAX_POST_SIZE_EXCEEDED: Number = definedExternally
        var STATUS_FILE_REQUIRED_ERROR: Number = definedExternally
        var INVALID_RESPONSE_FORMAT: Number = definedExternally
        var STATUS_TRANSPORT_ERROR: Number = definedExternally
        var STATUS_UNKNOWN_HOST_ERROR: Number = definedExternally
        var STATUS_CONNECTION_RESET_ERROR: Number = definedExternally
        var STATUS_SERVER_TIMEOUT: Number = definedExternally
    }
}
external open class SimpleTile : StatefulCanvas {
//    override var baseStyle: String = definedExternally
    open var creator: TileGrid = definedExternally
    open var tileGrid: TileGrid = definedExternally
//    override fun getInnerHTML(): String = definedExternally
    open fun getRecord(): TileRecord = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SimpleTile = definedExternally
    }
}
external open class DataView : VLayout {
    open fun dataViewLoaded(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DataView = definedExternally
    }
}
external open class EventHandler : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): EventHandler = definedExternally
        var IDLE_DELAY: Number = definedExternally
        var STOP_BUBBLING: String = definedExternally
        var ALL_EDGES: Array<String> = definedExternally
        var showNoDropIndicator: Boolean = definedExternally
        var synchronousFocusNotifications: Boolean = definedExternally
        fun getNativeMouseTarget(): Element = definedExternally
        fun getFocusCanvas(): Canvas = definedExternally
        fun setDragTrackerImage(src: String, x: Number? = definedExternally /* null */, y: Number? = definedExternally /* null */): Unit = definedExternally
        fun getNativeDragData(): Any = definedExternally
        fun setNativeDragData(data: String, strData: String? = definedExternally /* null */): Unit = definedExternally
        fun setNativeDragData(data: Any?, strData: String? = definedExternally /* null */): Unit = definedExternally
        fun getWheelDelta(): Number = definedExternally
        fun getWheelDeltaX(): Number = definedExternally
        fun getWheelDeltaY(): Number = definedExternally
        fun setDragTracker(html: String, newWidth: Number? = definedExternally /* null */, newHeight: Number? = definedExternally /* null */, offsetX: Number? = definedExternally /* null */, offsetY: Number? = definedExternally /* null */, properties: Canvas? = definedExternally /* null */): Unit = definedExternally
        fun getDragRect(): Any = definedExternally
        fun getTarget(): Canvas = definedExternally
        fun getDragTarget(): Canvas = definedExternally
        fun getX(): Number = definedExternally
        fun getY(): Number = definedExternally
        fun leftButtonDown(): Boolean = definedExternally
        fun rightButtonDown(): Boolean = definedExternally
        fun middleButtonDown(): Boolean = definedExternally
        fun getKeyEventCharacterValue(): Number = definedExternally
        fun getKeyEventCharacter(): String = definedExternally
        fun getKey(): String = definedExternally
        fun shiftKeyDown(): Boolean = definedExternally
        fun ctrlKeyDown(): Boolean = definedExternally
        fun altKeyDown(): Boolean = definedExternally
        fun targetIsMasked(target: Canvas): Boolean = definedExternally
    }
}
external open class DBCField
external open class Log : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Log = definedExternally
        var FATAL: Number = definedExternally
        var ERROR: Number = definedExternally
        var WARN: Number = definedExternally
        var INFO: Number = definedExternally
        var DEBUG: Number = definedExternally
        var defaultPriority: dynamic /* Number /* 1 */ | Number /* 2 */ | Number /* 3 */ | Number /* 4 */ | Number /* 5 */ */ = definedExternally
        var stackTracePriority: dynamic /* Number /* 1 */ | Number /* 2 */ | Number /* 3 */ | Number /* 4 */ | Number /* 5 */ */ = definedExternally
        var messageCount: Number = definedExternally
//        override fun getCallTrace(args: Any?): Unit = definedExternally
//        override fun getStackTrace(): String = definedExternally
//        override fun echoLeaf(obj: Any): String = definedExternally
//        override fun echo(obj: Any): String = definedExternally
//        override fun echoAll(obj: Any): String = definedExternally
//        override fun logDebug(message: String, category: String?): Unit = definedExternally
//        override fun logInfo(message: String, category: String?): Unit = definedExternally
//        override fun logWarn(message: String, category: String?): Unit = definedExternally
//        override fun logError(message: String, category: String?): Unit = definedExternally
//        override fun logFatal(message: String, category: String?): Unit = definedExternally
//        override fun setLogPriority(category: String, priority: Number /* 1 */): Unit = definedExternally
//        override fun setLogPriority(category: String, priority: Number /* 2 */): Unit = definedExternally
//        override fun setLogPriority(category: String, priority: Number /* 3 */): Unit = definedExternally
//        override fun setLogPriority(category: String, priority: Number /* 4 */): Unit = definedExternally
//        override fun setLogPriority(category: String, priority: Number /* 5 */): Unit = definedExternally
//        override fun setDefaultLogPriority(category: String, priority: Number /* 1 */): Unit = definedExternally
//        override fun setDefaultLogPriority(category: String, priority: Number /* 2 */): Unit = definedExternally
//        override fun setDefaultLogPriority(category: String, priority: Number /* 3 */): Unit = definedExternally
//        override fun setDefaultLogPriority(category: String, priority: Number /* 4 */): Unit = definedExternally
//        override fun setDefaultLogPriority(category: String, priority: Number /* 5 */): Unit = definedExternally
//        override fun getDefaultLogPriority(): dynamic /* Number /* 1 */ | Number /* 2 */ | Number /* 3 */ | Number /* 4 */ | Number /* 5 */ */ = definedExternally
        fun applyLogPriorities(settings: Any): Unit = definedExternally
        fun getLogPriorities(`object`: Any? = definedExternally /* null */, overridesOnly: Boolean? = definedExternally /* null */): Any = definedExternally
        fun getLogPriorities(`object`: Class? = definedExternally /* null */, overridesOnly: Boolean? = definedExternally /* null */): Any = definedExternally
        fun getPriority(category: String, `object`: Any? = definedExternally /* null */): dynamic /* Number /* 1 */ | Number /* 2 */ | Number /* 3 */ | Number /* 4 */ | Number /* 5 */ */ = definedExternally
        fun getPriority(category: String, `object`: Class? = definedExternally /* null */): dynamic /* Number /* 1 */ | Number /* 2 */ | Number /* 3 */ | Number /* 4 */ | Number /* 5 */ */ = definedExternally
        fun setPriority(category: String, priority: Number /* 1 */, `object`: Any? = definedExternally /* null */): Unit = definedExternally
        fun setPriority(category: String, priority: Number /* 1 */, `object`: Class? = definedExternally /* null */): Unit = definedExternally
        fun setPriority(category: String, priority: Number /* 2 */, `object`: Any? = definedExternally /* null */): Unit = definedExternally
        fun setPriority(category: String, priority: Number /* 2 */, `object`: Class? = definedExternally /* null */): Unit = definedExternally
        fun setPriority(category: String, priority: Number /* 3 */, `object`: Any? = definedExternally /* null */): Unit = definedExternally
        fun setPriority(category: String, priority: Number /* 3 */, `object`: Class? = definedExternally /* null */): Unit = definedExternally
        fun setPriority(category: String, priority: Number /* 4 */, `object`: Any? = definedExternally /* null */): Unit = definedExternally
        fun setPriority(category: String, priority: Number /* 4 */, `object`: Class? = definedExternally /* null */): Unit = definedExternally
        fun setPriority(category: String, priority: Number /* 5 */, `object`: Any? = definedExternally /* null */): Unit = definedExternally
        fun setPriority(category: String, priority: Number /* 5 */, `object`: Class? = definedExternally /* null */): Unit = definedExternally
        fun setDefaultPriority(priority: Number /* 1 */, `object`: Any? = definedExternally /* null */): Unit = definedExternally
        fun setDefaultPriority(priority: Number /* 1 */, `object`: Class? = definedExternally /* null */): Unit = definedExternally
        fun setDefaultPriority(priority: Number /* 2 */, `object`: Any? = definedExternally /* null */): Unit = definedExternally
        fun setDefaultPriority(priority: Number /* 2 */, `object`: Class? = definedExternally /* null */): Unit = definedExternally
        fun setDefaultPriority(priority: Number /* 3 */, `object`: Any? = definedExternally /* null */): Unit = definedExternally
        fun setDefaultPriority(priority: Number /* 3 */, `object`: Class? = definedExternally /* null */): Unit = definedExternally
        fun setDefaultPriority(priority: Number /* 4 */, `object`: Any? = definedExternally /* null */): Unit = definedExternally
        fun setDefaultPriority(priority: Number /* 4 */, `object`: Class? = definedExternally /* null */): Unit = definedExternally
        fun setDefaultPriority(priority: Number /* 5 */, `object`: Any? = definedExternally /* null */): Unit = definedExternally
        fun setDefaultPriority(priority: Number /* 5 */, `object`: Class? = definedExternally /* null */): Unit = definedExternally
        fun getDefaultPriority(`object`: Any? = definedExternally /* null */): dynamic /* Number /* 1 */ | Number /* 2 */ | Number /* 3 */ | Number /* 4 */ | Number /* 5 */ */ = definedExternally
        fun getDefaultPriority(`object`: Class? = definedExternally /* null */): dynamic /* Number /* 1 */ | Number /* 2 */ | Number /* 3 */ | Number /* 4 */ | Number /* 5 */ */ = definedExternally
        fun clearPriority(category: String, `object`: Any? = definedExternally /* null */): Unit = definedExternally
        fun clearPriority(category: String, `object`: Class? = definedExternally /* null */): Unit = definedExternally
        fun isEnabledFor(category: String, priority: Number /* 1 */): Unit = definedExternally
        fun isEnabledFor(category: String, priority: Number /* 2 */): Unit = definedExternally
        fun isEnabledFor(category: String, priority: Number /* 3 */): Unit = definedExternally
        fun isEnabledFor(category: String, priority: Number /* 4 */): Unit = definedExternally
        fun isEnabledFor(category: String, priority: Number /* 5 */): Unit = definedExternally
        fun getMessages(): Array<String> = definedExternally
        fun show(): Unit = definedExternally
        fun clear(): Unit = definedExternally
        fun traceLogMessage(messagePattern: String, prefix: String? = definedExternally /* null */): Unit = definedExternally
        fun traceMethod(`object`: Any, methodName: String): Unit = definedExternally
        fun timeMethod(`object`: Any, methodName: String): Unit = definedExternally
        fun getLogPriorities(): Any = definedExternally
        fun getPriority(category: String): dynamic /* Number /* 1 */ | Number /* 2 */ | Number /* 3 */ | Number /* 4 */ | Number /* 5 */ */ = definedExternally
        fun setPriority(category: String, priority: Number /* 1 */): Unit = definedExternally
        fun setPriority(category: String, priority: Number /* 2 */): Unit = definedExternally
        fun setPriority(category: String, priority: Number /* 3 */): Unit = definedExternally
        fun setPriority(category: String, priority: Number /* 4 */): Unit = definedExternally
        fun setPriority(category: String, priority: Number /* 5 */): Unit = definedExternally
        fun setDefaultPriority(priority: Number /* 1 */): Unit = definedExternally
        fun setDefaultPriority(priority: Number /* 2 */): Unit = definedExternally
        fun setDefaultPriority(priority: Number /* 3 */): Unit = definedExternally
        fun setDefaultPriority(priority: Number /* 4 */): Unit = definedExternally
        fun setDefaultPriority(priority: Number /* 5 */): Unit = definedExternally
        fun getDefaultPriority(): dynamic /* Number /* 1 */ | Number /* 2 */ | Number /* 3 */ | Number /* 4 */ | Number /* 5 */ */ = definedExternally
        fun clearPriority(category: String): Unit = definedExternally
    }
}
external open class DrawShape : DrawItem {
//    override var titleRotationMode: dynamic /* String /* "neverRotate" */ | String /* "withItem" */ | String /* "withItemAlwaysUp" */ | String /* "withLine" */ | String /* "withLineAlwaysUp" */ */ = definedExternally
    open var commands: Array<Any?> = definedExternally
    open fun setCommands(commands: Array<Any?>): Unit = definedExternally
//    override fun moveBy(dX: Number, dY: Number): Unit = definedExternally
//    override fun resizeBy(dX: Number, dY: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DrawShape = definedExternally
    }
}
external open class MetricSettings {
    open var multiFacet: Boolean = definedExternally
    open var fixedFacetValue: dynamic /* String | Number */ = definedExternally
    open var legendLabel: String = definedExternally
    open var showAxis: Boolean = definedExternally
    open var matchGradations: String = definedExternally
    open var showAxisLine: Boolean = definedExternally
    open var axisLineProperties: DrawLine = definedExternally
    open var valueTitle: String = definedExternally
    open var showValueAxisLabel: Boolean = definedExternally
    open var valueAxisLabelProperties: DrawLabel = definedExternally
    open var chartType: dynamic /* String /* "Area" */ | String /* "Column" */ | String /* "Bar" */ | String /* "Line" */ | String /* "Radar" */ | String /* "Pie" */ | String /* "Doughnut" */ | String /* "Scatter" */ | String /* "Bubble" */ | String /* "Histogram" */ */ = definedExternally
    open var stacked: Boolean = definedExternally
    open var filled: Boolean = definedExternally
    open var proportional: Boolean = definedExternally
    open var proportionalAxisLabel: String = definedExternally
    open var minDataSpreadPercent: Number = definedExternally
    open var axisStartValue: Number = definedExternally
    open var xAxisEndValue: Number = definedExternally
    open var gradationLabelProperties: DrawLabel = definedExternally
    open var gradationLineProperties: DrawLine = definedExternally
    open var gradationZeroLineProperties: DrawLine = definedExternally
    open var showDataPoints: Boolean = definedExternally
    open var dataPointSize: Number = definedExternally
    open var dataPointProperties: DrawItem = definedExternally
    open var logScale: Boolean = definedExternally
    open var useLogGradations: Boolean = definedExternally
    open var logBase: Number = definedExternally
    open var logGradations: Array<Number> = definedExternally
    open var decimalPrecision: Number = definedExternally
    open var showShadows: Boolean = definedExternally
    open var shadowProperties: DrawOval = definedExternally
    open var dataLineProperties: DrawLine = definedExternally
    open var dataOutlineProperties: DrawItem = definedExternally
    open var dataShapeProperties: DrawPath = definedExternally
    open var valueLineProperties: DrawLine = definedExternally
    open var dataColors: Array<String> = definedExternally
    open var dataGradients: Any = definedExternally
    open var showDataValues: Boolean = definedExternally
    open var showValueOnHover: Boolean = definedExternally
    open fun getXCoord(value: Number): Number = definedExternally
    open fun getXCoord(value: FacetValueMap): Number = definedExternally
    open fun getYCoord(value: Number): Number = definedExternally
    open fun getGradations(): Array<Number> = definedExternally
    open fun setChartType(chartType: String /* "Area" */): Unit = definedExternally
    open fun setChartType(chartType: String /* "Column" */): Unit = definedExternally
    open fun setChartType(chartType: String /* "Bar" */): Unit = definedExternally
    open fun setChartType(chartType: String /* "Line" */): Unit = definedExternally
    open fun setChartType(chartType: String /* "Radar" */): Unit = definedExternally
    open fun setChartType(chartType: String /* "Pie" */): Unit = definedExternally
    open fun setChartType(chartType: String /* "Doughnut" */): Unit = definedExternally
    open fun setChartType(chartType: String /* "Scatter" */): Unit = definedExternally
    open fun setChartType(chartType: String /* "Bubble" */): Unit = definedExternally
    open fun setChartType(chartType: String /* "Histogram" */): Unit = definedExternally
    open fun setStacked(stacked: Boolean): Unit = definedExternally
    open fun setFilled(filled: Boolean): Unit = definedExternally
    open fun setProportional(proportional: Boolean): Unit = definedExternally
    open fun setDataColors(dataColors: Array<String>): Unit = definedExternally
    open fun getDataColor(index: Number, facetValueId: String, purpose: String): String = definedExternally
    open fun getDataColor(index: Number, facetValueId: Number, purpose: String): String = definedExternally
    open fun getDataColor(index: Number, facetValueId: Date, purpose: String): String = definedExternally
    open fun getDataLineColor(index: Number, facetValueId: String, purpose: String): String = definedExternally
    open fun getDataLineColor(index: Number, facetValueId: Number, purpose: String): String = definedExternally
    open fun getDataLineColor(index: Number, facetValueId: Date, purpose: String): String = definedExternally
    open fun getDataLineWidth(index: Number, facetValueId: String, purpose: String): Number = definedExternally
    open fun getDataLineWidth(index: Number, facetValueId: Number, purpose: String): Number = definedExternally
    open fun getDataLineWidth(index: Number, facetValueId: Date, purpose: String): Number = definedExternally
    open fun getDataGradient(index: Number, facetValueId: String, purpose: String): String = definedExternally
    open fun getDataGradient(index: Number, facetValueId: Number, purpose: String): String = definedExternally
    open fun getDataGradient(index: Number, facetValueId: Date, purpose: String): String = definedExternally
    open fun pointClick(value: Number, record: Record, metricId: String): Unit = definedExternally
    open fun getPointHoverHTML(value: Number, record: Record, metricId: String): String = definedExternally
    open fun formatAxisValue(value: Any): String = definedExternally
    open fun formatDataValue(value: Any): String = definedExternally
}
external open class DrawTriangle : DrawPolygon {
//    override var points: Array<Any?> = definedExternally
//    override fun getCenter(): Point = definedExternally
//    override fun resizeBy(dX: Number, dY: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DrawTriangle = definedExternally
    }
}
external open class Flashlet : BrowserPlugin {
    open var name: String = definedExternally
    open var params: Any = definedExternally
    open var classID: String = definedExternally
    open var codeBase: String = definedExternally
    open var pluginsPage: String = definedExternally
    open var src: String = definedExternally
    open fun setSrc(): Unit = definedExternally
    open fun getPluginHandle(): Element = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Flashlet = definedExternally
        fun flashAvailable(): Boolean = definedExternally
        fun getFlashVersion(): Number = definedExternally
    }
}
external open class StretchImgButton : StretchImg {
//    override var title: String = definedExternally
    open var showClippedTitleOnHover: Boolean = definedExternally
    open var wrap: Boolean = definedExternally
//    override var icon: String = definedExternally
//    override var iconSize: Number = definedExternally
//    override var iconWidth: Number = definedExternally
//    override var iconHeight: Number = definedExternally
//    override var iconOrientation: String = definedExternally
    open var iconAlign: String = definedExternally
//    override var iconSpacing: Number = definedExternally
//    override var showDisabledIcon: Boolean = definedExternally
//    override var showRollOverIcon: Boolean = definedExternally
//    override var showFocusedIcon: Boolean = definedExternally
//    override var showDownIcon: Boolean = definedExternally
//    override var showSelectedIcon: Boolean = definedExternally
//    override var autoFit: Boolean = definedExternally
//    override var baseStyle: String = definedExternally
    open var titleStyle: String = definedExternally
    open var labelSkinImgDir: String = definedExternally
//    override var selected: Boolean = definedExternally
//    override var radioGroup: String = definedExternally
//    override var actionType: dynamic /* String /* "radio" */ | String /* "button" */ | String /* "checkbox" */ */ = definedExternally
//    override var state: dynamic /* String /* "" */ | String /* "Down" */ | String /* "Over" */ | String /* "Disabled" */ */ = definedExternally
//    override var showDisabled: Boolean = definedExternally
//    override var showDown: Boolean = definedExternally
//    override var showFocus: Boolean = definedExternally
//    override var showFocused: Boolean = definedExternally
//    override var showRollOver: Boolean = definedExternally
//    override var align: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
//    override var valign: dynamic /* String /* "top" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
//    override var showTitle: Boolean = definedExternally
    open var labelHPad: Number = definedExternally
    open var labelVPad: Number = definedExternally
    open var labelLengthPad: Number = definedExternally
    open var labelBreadthPad: Number = definedExternally
    open var hiliteAccessKey: Boolean = definedExternally
//    override var src: String = definedExternally
//    override var vertical: Boolean = definedExternally
//    override var capSize: Number = definedExternally
//    override fun getTitle(): String = definedExternally
//    override fun setTitle(newTitle: String): Unit = definedExternally
//    override fun setIconOrientation(orientation: String): Unit = definedExternally
//    override fun setIcon(icon: String): Unit = definedExternally
//    override fun setAutoFit(autoFit: Boolean): Unit = definedExternally
//    override fun setBaseStyle(style: String): Unit = definedExternally
    open fun setTitleStyle(style: String): Unit = definedExternally
    open fun setLabelSkinImgDir(URL: String): Unit = definedExternally
//    override fun select(): Unit = definedExternally
//    override fun deselect(): Unit = definedExternally
//    override fun isSelected(): Boolean = definedExternally
    open fun setSelected(): Unit = definedExternally
//    override fun addToRadioGroup(groupID: String): Unit = definedExternally
//    override fun removeFromRadioGroup(groupID: String?): Unit = definedExternally
//    override fun setActionType(): Unit = definedExternally
//    override fun getActionType(): Unit = definedExternally
//    override fun setState(newState: String /* "" */): Unit = definedExternally
//    override fun setState(newState: String /* "Down" */): Unit = definedExternally
//    override fun setState(newState: String /* "Over" */): Unit = definedExternally
//    override fun setState(newState: String /* "Disabled" */): Unit = definedExternally
//    override fun setDisabled(disabled: Boolean): Unit = definedExternally
//    override fun getState(): dynamic /* String /* "" */ | String /* "Down" */ | String /* "Over" */ | String /* "Disabled" */ */ = definedExternally
    open fun action(): Unit = definedExternally
    open fun titleClipped(): Boolean = definedExternally
    open fun titleHoverHTML(defaultHTML: String): String = definedExternally
    open fun iconClick(): Boolean = definedExternally
    open fun titleHover(): Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): StretchImgButton = definedExternally
    }
}
external open class VisualBuilder : Class {
    open var saveFileBuiltinIsEnabled: Boolean = definedExternally
    open var loadFileBuiltinIsEnabled: Boolean = definedExternally
    open var filesystemDataSourceEnabled: Boolean = definedExternally
    open var skin: String = definedExternally
    open var defaultApplicationMode: dynamic /* String /* "live" */ | String /* "edit" */ */ = definedExternally
    open var showModeSwitcher: Boolean = definedExternally
    open var mockupMode: Boolean = definedExternally
    open var openFullBuilderSeparately: Boolean = definedExternally
    open var initialComponent: PaletteNode = definedExternally
    open var defaultComponentsURL: String = definedExternally
    open var defaultMockupComponentsURL: String = definedExternally
    open var customComponentsURL: String = definedExternally
    open var globalDependenciesURL: String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): VisualBuilder = definedExternally
    }
}
external open class ToolbarItem : CanvasItem {
    open var buttons: Array<Any?> = definedExternally
//    override var showTitle: Boolean = definedExternally
//    override var startRow: Boolean = definedExternally
//    override var endRow: Boolean = definedExternally
//    override var colSpan: dynamic /* String | Number */ = definedExternally
//    override var canvas: Canvas = definedExternally
    open var vertical: Boolean = definedExternally
    open var buttonConstructor: Class = definedExternally
    open var buttonProperties: Any = definedExternally
    open var buttonBaseStyle: String = definedExternally
    open var createButtonsOnInit: Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ToolbarItem = definedExternally
    }
}
external open class LayoutSpacer : Canvas {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): LayoutSpacer = definedExternally
    }
}
external open class OperationBinding : Class {
    open var transformMultipleFields: Boolean = definedExternally
    open var skipAudit: Boolean = definedExternally
    open var beanClassName: String = definedExternally
    open var operationType: dynamic /* String /* "custom" */ | String /* "fetch" */ | String /* "add" */ | String /* "update" */ | String /* "remove" */ | String /* "validate" */ | String /* "viewFile" */ | String /* "downloadFile" */ | String /* "storeTestData" */ | String /* "clientExport" */ | String /* "getFile" */ | String /* "hasFile" */ | String /* "listFiles" */ | String /* "removeFile" */ | String /* "saveFile" */ | String /* "renameFile" */ | String /* "getFileVersion" */ | String /* "hasFileVersion" */ | String /* "listFileVersions" */ | String /* "removeFileVersion" */ */ = definedExternally
    open var operationId: String = definedExternally
    open var serverMethod: String = definedExternally
    open var methodArguments: String = definedExternally
    open var serverObject: ServerObject = definedExternally
    open var script: String = definedExternally
    open var wsOperation: String = definedExternally
    open var dataURL: String = definedExternally
    open var dataProtocol: dynamic /* String /* "getParams" */ | String /* "postParams" */ | String /* "postXML" */ | String /* "soap" */ | String /* "postMessage" */ | String /* "clientCustom" */ */ = definedExternally
    open var dataFormat: dynamic /* String /* "custom" */ | String /* "xml" */ | String /* "json" */ | String /* "iscServer" */ */ = definedExternally
    open var dataTransport: dynamic /* String /* "xmlHttpRequest" */ | String /* "scriptInclude" */ | String /* "hiddenFrame" */ */ = definedExternally
    open var useHttpProxy: Boolean = definedExternally
    open var callbackParam: String = definedExternally
    open var requestProperties: DSRequest = definedExternally
    open var preventHTTPCaching: Boolean = definedExternally
    open var defaultParams: Any = definedExternally
    open var useFlatFields: Boolean = definedExternally
    open var summaryFunctions: Any = definedExternally
    open var groupBy: Array<String> = definedExternally
    open var recordXPath: String = definedExternally
    open var recordName: String = definedExternally
    open var spoofResponses: Boolean = definedExternally
    open var xmlNamespaces: Any = definedExternally
    open var responseDataSchema: DataSource = definedExternally
    open var exportResults: Boolean = definedExternally
    open var exportAs: dynamic /* String /* "xml" */ | String /* "json" */ | String /* "csv" */ | String /* "xls" */ | String /* "ooxml" */ */ = definedExternally
    open var exportFilename: String = definedExternally
    open var lineBreakStyle: String = definedExternally
    open var exportFields: Array<Any> = definedExternally
    open var autoJoinTransactions: Boolean = definedExternally
    open var useSpringTransaction: Boolean = definedExternally
    open var selectClause: String = definedExternally
    open var tableClause: String = definedExternally
    open var whereClause: String = definedExternally
    open var groupClause: String = definedExternally
    open var orderClause: String = definedExternally
    open var valuesClause: String = definedExternally
    open var customSQL: String = definedExternally
    open var customHQL: String = definedExternally
    open var customJQL: String = definedExternally
    open var namedQuery: String = definedExternally
    open var skipRowCount: Boolean = definedExternally
    open var customFields: dynamic /* String | Array<Any> */ = definedExternally
    open var customValueFields: dynamic /* String | Array<Any> */ = definedExternally
    open var customCriteriaFields: dynamic /* String | Array<Any> */ = definedExternally
    open var excludeCriteriaFields: dynamic /* String | Array<Any> */ = definedExternally
    open var useForCacheSync: Boolean = definedExternally
    open var cacheSyncOperation: String = definedExternally
    open var canSyncCache: Boolean = definedExternally
    open var makeKeysAvailable: Boolean = definedExternally
    open var sqlType: dynamic /* String /* "update" */ | String /* "query" */ */ = definedExternally
    open var allowMultiUpdate: Boolean = definedExternally
    open var providesMissingKeys: Boolean = definedExternally
    open var qualifyColumnNames: Boolean = definedExternally
    open var invalidateCache: Boolean = definedExternally
    open var outputs: String = definedExternally
    open var sqlPaging: dynamic /* String /* "none" */ | String /* "sqlLimit" */ | String /* "jdbcScroll" */ | String /* "dropAtServer" */ */ = definedExternally
    open var sqlUsePagingHint: Boolean = definedExternally
    open var useSubselectForRowCount: Boolean = definedExternally
    open var progressiveLoading: Boolean = definedExternally
    open var allowAdvancedCriteria: Boolean = definedExternally
    open var criteria: Array<Any?> = definedExternally
    open var values: Array<Any?> = definedExternally
    open var requiresAuthentication: Boolean = definedExternally
    open var requiresRole: String = definedExternally
    open var requires: String = definedExternally
    open var creatorOverrides: Boolean = definedExternally
    open var ownerIdField: String = definedExternally
    open var guestUserId: String = definedExternally
    open var mail: Mail = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): OperationBinding = definedExternally
    }
}
external open class CubeGrid : ListGrid {
//    override var styleName: String = definedExternally
//    override var bodyStyleName: String = definedExternally
//    override var baseStyle: String = definedExternally
//    override var alternateRecordStyles: Boolean = definedExternally
//    override var skinImgDir: String = definedExternally
    open var innerHeaderBaseStyle: String = definedExternally
    open var colHeaderBaseStyle: String = definedExternally
    open var rowHeaderBaseStyle: String = definedExternally
    open var facetValueHoverWidth: Any = definedExternally
    open var facetLabelHoverWidth: Any = definedExternally
    open var facetValueHoverHeight: Any = definedExternally
    open var facetLabelHoverHeight: Any = definedExternally
    open var facetValueHoverAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var facetLabelHoverAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var facetValueHoverVAlign: dynamic /* String /* "top" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
    open var facetLabelHoverVAlign: dynamic /* String /* "top" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
    open var facetValueHoverStyle: String = definedExternally
    open var facetLabelHoverStyle: String = definedExternally
    open var fixedFacetValues: FacetValueMap = definedExternally
//    override var hilites: Array<Any?> = definedExternally
//    override var dataSource: DataSource = definedExternally
//    override var autoFetchData: Boolean = definedExternally
//    override var autoFetchTextMatchStyle: dynamic /* String /* "startsWith" */ | String /* "exact" */ | String /* "exactCase" */ | String /* "substring" */ */ = definedExternally
//    override var initialCriteria: Any? = definedExternally
    open var facets: Array<Any?> = definedExternally
    open var showFacetContextMenus: Boolean = definedExternally
    open var showFacetValueContextMenus: Boolean = definedExternally
    open var canSelectValues: Boolean = definedExternally
    open var canSelectHeaders: Boolean = definedExternally
    open var autoSelectHeaders: Boolean = definedExternally
    open var autoSelectValues: dynamic /* String /* "none" */ | String /* "both" */ | String /* "rows" */ | String /* "cols" */ */ = definedExternally
    open var simpleDeselect: Boolean = definedExternally
    open var columnFacets: Array<String> = definedExternally
    open var rowFacets: Array<String> = definedExternally
    open var hideEmptyFacetValues: Boolean = definedExternally
    open var hideEmptyAxis: dynamic /* String /* "row" */ | String /* "column" */ */ = definedExternally
//    override var data: Array<Any?> = definedExternally
    open var valueProperty: String = definedExternally
    open var cellIdProperty: String = definedExternally
//    override var canEdit: Boolean = definedExternally
//    override var editByCell: Boolean = definedExternally
//    override var saveByCell: Boolean = definedExternally
//    override var canDragSelect: Boolean = definedExternally
    open var canReorderColumns: Boolean = definedExternally
    open var canResizeColumns: Boolean = definedExternally
    open var canCollapseFacets: Boolean = definedExternally
    open var canMinimizeFacets: Boolean = definedExternally
    open var sortedFacetValues: FacetValueMap = definedExternally
//    override var sortDirection: dynamic /* String /* "ascending" */ | String /* "descending" */ */ = definedExternally
    open var canSortFacets: Boolean = definedExternally
    open var canSortData: Boolean = definedExternally
    open var canMinimizeColumns: Boolean = definedExternally
    open var canMoveFacets: Boolean = definedExternally
    open var rowHeaderGridMode: Boolean = definedExternally
    open var autoSizeHeaders: Boolean = definedExternally
    open var facetTitleAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var facetValueAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var cellAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var wrapFacetTitles: Boolean = definedExternally
    open var wrapFacetValueTitles: Boolean = definedExternally
    open var padTitles: Boolean = definedExternally
    open var defaultFacetWidth: Number = definedExternally
    open var rollupValue: String = definedExternally
    open var metricFacetId: String = definedExternally
    open var valueTitle: String = definedExternally
    open var bodyMinWidth: Number = definedExternally
    open var bodyMinHeight: Number = definedExternally
    open var enableCharting: Boolean = definedExternally
//    override var chartConstructor: String = definedExternally
//    override var chartType: dynamic /* String /* "Area" */ | String /* "Column" */ | String /* "Bar" */ | String /* "Line" */ | String /* "Radar" */ | String /* "Pie" */ | String /* "Doughnut" */ | String /* "Scatter" */ | String /* "Bubble" */ | String /* "Histogram" */ */ = definedExternally
    open var chartConfirmThreshold: Number = definedExternally
    open var exportFacetSeparatorString: String = definedExternally
    open var facetValueContextItems: Array<Any?> = definedExternally
    open var exportFacetBGColor: String = definedExternally
    open var exportRowFacetBGColor: String = definedExternally
    open var exportColumnFacetBGColor: String = definedExternally
    open var exportFacetTextColor: String = definedExternally
    open var exportRowFacetTextColor: String = definedExternally
    open var exportColumnFacetTextColor: String = definedExternally
    open var valueFormat: String = definedExternally
    open var valueExportFormat: String = definedExternally
//    override fun getEventRow(y: Number?): Number = definedExternally
//    override fun getEventColumn(x: Number?): Number = definedExternally
//    override fun getCellStyle(record: ListGridRecord, rowNum: Number, colNum: Number): String = definedExternally
//    override fun getBaseStyle(record: ListGridRecord, rowNum: Number, colNum: Number): String = definedExternally
    open fun setEditValues(cell: Array<Number>, values: Any): Unit = definedExternally
//    open fun setEditValue(rowNum: Number, colNum: Number, value: Any): Unit = definedExternally
//    open fun getEditValue(rowNum: Number, colNum: Number): Any = definedExternally
    open fun getEditedRecord(valuesID: Number, colNum: Number? = definedExternally /* null */): Any = definedExternally
    open fun getEditedRecord(valuesID: Any?, colNum: Number? = definedExternally /* null */): Any = definedExternally
//    open fun getEditedCell(record: Number, colNum: Number): Any = definedExternally
//    open fun getEditedCell(record: Any?, colNum: Number): Any = definedExternally
    open fun getEditValues(valuesID: Number, colNum: Number): Any = definedExternally
    open fun getEditValues(valuesID: Any?, colNum: Number): Any = definedExternally
    open fun clearEditValue(editValuesID: Number, colNum: Number? = definedExternally /* null */): Unit = definedExternally
    open fun clearEditValue(editValuesID: Any?, colNum: Number? = definedExternally /* null */): Unit = definedExternally
    open fun saveEdits(editCompletionEvent: dynamic /* String /* "click" */ | String /* "doubleClick" */ | String /* "click_outside" */ | String /* "enter" */ | String /* "escape" */ | String /* "arrow_up" */ | String /* "arrow_down" */ | String /* "tab" */ | String /* "shift_tab" */ | String /* "field_change" */ | String /* "programmatic" */ */ = definedExternally /* null */, callback: Any? = definedExternally /* null */, rowNum: Number? = definedExternally /* null */, colNum: Number? = definedExternally /* null */): Unit = definedExternally
    open fun getAllEditCells(): Array<Any> = definedExternally
    open fun discardAllEdits(records: Array<Any?>? = definedExternally /* null */, dontHideEditor: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun recordHasChanges(rowNum: Number, colNum: Number): Boolean = definedExternally
//    override fun hasChanges(): Boolean = definedExternally
    open fun saveAllEdits(cells: Array<Any?>? = definedExternally /* null */, saveCallback: Any? = definedExternally /* null */): Boolean = definedExternally
    open fun getFacet(facetId: String): Facet = definedExternally
    open fun getFacetValue(facetId: String, facetValueId: String): FacetValue = definedExternally
    open fun getRollupValue(): String = definedExternally
    open fun getCellFacetValues(rowNum: Number, colNum: Number): FacetValueMap = definedExternally
    open fun getFacetValuesColumn(facetValues: FacetValueMap): Number = definedExternally
    open fun getFacetValuesRow(facetValues: FacetValueMap): Number = definedExternally
    open fun getRowFacetValues(rowNum: Number): FacetValueMap = definedExternally
    open fun getColumnFacetValues(colNum: Number): FacetValueMap = definedExternally
    open fun getCellRecord(rowNum: Number, colNum: Number): ListGridRecord = definedExternally
    open fun getCellRow(cellRecord: CellRecord): Number = definedExternally
    open fun getCellColumn(cellRecord: CellRecord): Number = definedExternally
    open fun getCellCoordinates(record: CellRecord): Array<Any> = definedExternally
    open fun dataArrived(): Unit = definedExternally
    open fun facetLabelClick(): Unit = definedExternally
    open fun facetLabelHoverHTML(facetId: String): Unit = definedExternally
    open fun facetValueHoverHTML(facetValues: FacetValueMap): Unit = definedExternally
    open fun toggleFieldOpenState(facetValueMap: FacetValueMap): Boolean = definedExternally
    open fun expandField(facetValueMap: FacetValueMap): Boolean = definedExternally
    open fun collapseField(facetValueMap: FacetValueMap): Boolean = definedExternally
    open fun autoSizeFacet(facetId: String): Unit = definedExternally
    open fun closeFacet(facetId: String): Unit = definedExternally
    open fun closeColumn(headerFacetValues: FacetValue): Unit = definedExternally
    open fun facetValueSelectionChanged(facetValues: FacetValueMap, newState: Boolean): Unit = definedExternally
    open fun getSelectedCells(): Array<Any?> = definedExternally
    open fun getSelectedCellIds(): Array<String> = definedExternally
    open fun anyCellSelected(): Boolean = definedExternally
    open fun cellIsSelected(cell: CellRecord): Boolean = definedExternally
    open fun selectCell(cell: String, newState: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun selectCell(cell: CellRecord, newState: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun deselectCell(cell: String): Unit = definedExternally
    open fun deselectCell(cell: CellRecord): Unit = definedExternally
    open fun selectCells(cellList: Array<String>, newState: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun selectCells(cellList: FacetValueMap, newState: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun selectCells(cellList: Array<Any?>, newState: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun deselectCells(cellList: Array<String>): Unit = definedExternally
    open fun deselectCells(cellList: FacetValueMap): Unit = definedExternally
    open fun deselectCells(cellList: Array<Any?>): Unit = definedExternally
    open fun selectAllCells(): Unit = definedExternally
    open fun deselectAllCells(): Unit = definedExternally
    open fun getSelectedFacetValues(facetId: String? = definedExternally /* null */): Array<Any?> = definedExternally
    open fun facetValuesSelected(facetValues: FacetValueMap): Boolean = definedExternally
    open fun facetHasSelection(facetId: String): Boolean = definedExternally
    open fun getFacetsHavingSelection(): Array<String> = definedExternally
    open fun selectFacetValues(facetValues: FacetValueMap, newState: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun deselectFacetValues(facetValues: FacetValueMap): Unit = definedExternally
    open fun selectFacetValue(facetId: String, facetValueId: String, newState: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun deselectFacetValue(facetId: String, facetValueId: String): Unit = definedExternally
    open fun selectAllFacetValues(facetId: String? = definedExternally /* null */, newState: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun deselectAllFacetValues(facetId: String? = definedExternally /* null */): Unit = definedExternally
    open fun deselectAll(): Unit = definedExternally
    open fun resizeFacetValue(facetValueId: String, newWidth: Number): Unit = definedExternally
    open fun hiliteCell(cellObj: Any, hiliteID: String, alternateHiliteID: String? = definedExternally /* null */): Boolean = definedExternally
    open fun hiliteCell(cellObj: Any, hiliteID: Any, alternateHiliteID: String? = definedExternally /* null */): Boolean = definedExternally
    open fun hiliteCellList(cellObjList: Array<Any?>, hiliteID: String): Boolean = definedExternally
    open fun hiliteFacetValue(facetID: String, facetValueID: String, hiliteID: String): Boolean = definedExternally
    open fun setFacetTitle(facetId: String, newTitle: String): Unit = definedExternally
    open fun setFacetTitleAlign(facetId: String, align: String /* "left" */): Unit = definedExternally
    open fun setFacetTitleAlign(facetId: String, align: String /* "right" */): Unit = definedExternally
    open fun setFacetTitleAlign(facetId: String, align: String /* "center" */): Unit = definedExternally
    open fun setFacetValueTitle(facetId: String, facetValueId: String, newTitle: String): Unit = definedExternally
    open fun setFacetValueTitleAlign(facetId: String, facetValueId: String, align: String /* "left" */): Unit = definedExternally
    open fun setFacetValueTitleAlign(facetId: String, facetValueId: String, align: String /* "right" */): Unit = definedExternally
    open fun setFacetValueTitleAlign(facetId: String, facetValueId: String, align: String /* "center" */): Unit = definedExternally
    open fun getFacetValueLayout(id: String): Array<Any> = definedExternally
    open fun getRowFacetLayout(): Array<Any> = definedExternally
    open fun getColumnFacetLayout(): Array<Any> = definedExternally
    open fun setEnableCharting(enableCharting: Boolean): Unit = definedExternally
    open fun makeChart(fixedFacetValues: FacetValueMap, variableFacets: Array<String>, chartProperties: Chart): Chart = definedExternally
    open fun getDefaultFacetValueContextItems(facetValues: FacetValueMap): Array<Any?> = definedExternally
    open fun addRowFacet(facetId: String, index: Number? = definedExternally /* null */): Unit = definedExternally
    open fun addColumnFacet(facetId: String, index: Number? = definedExternally /* null */): Unit = definedExternally
    open fun addFacet(facetId: String, intoRows: Boolean? = definedExternally /* null */, index: Number? = definedExternally /* null */): Unit = definedExternally
    open fun removeFacet(facetId: String, fixedFacetValueId: String? = definedExternally /* null */): Unit = definedExternally
    open fun setFixedFacetValue(facetId: String, fixedFacetValueId: String): Unit = definedExternally
//    override fun getPrintHTML(printProperties: PrintProperties?, callback: Any?): String = definedExternally
    open fun exportClientData(settings: Any, requestProperties: DSRequest? = definedExternally /* null */, callback: ((response: RPCResponse, rawData: Any, request: RPCRequest) -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun facetValueOver(facetValues: FacetValueMap): Unit = definedExternally
    open fun facetValueOut(facetValues: FacetValueMap): Unit = definedExternally
    open fun facetValueHover(facetValues: FacetValueMap): Unit = definedExternally
    open fun facetValueContextClick(facetValues: FacetValueMap): Unit = definedExternally
    open fun facetContextClick(facetId: String): Unit = definedExternally
    open fun facetValueReordered(groupId: String): Unit = definedExternally
    open fun facetAdded(facetId: String): Unit = definedExternally
    open fun facetRemoved(facetId: String): Unit = definedExternally
    open fun facetMoved(facetId: String): Unit = definedExternally
    open fun fixedFacetValueChanged(facetId: String, facetValueId: String): Unit = definedExternally
    open fun sortByFacetValues(facetValues: FacetValueMap, sortDirection: Boolean): Unit = definedExternally
    open fun sortByFacetId(facetId: String, sortDirection: Boolean): Unit = definedExternally
    open fun facetLabelOver(facetId: String): Unit = definedExternally
    open fun facetLabelOut(facetId: String): Unit = definedExternally
    open fun facetLabelHover(facetId: String): Unit = definedExternally
    open fun cellSelectionChanged(cellList: Array<Any?>): Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): CubeGrid = definedExternally
    }
}
external open class ListProperties {
    open var style: dynamic /* String /* "disc" */ | String /* "circle" */ | String /* "square" */ | String /* "decimal" */ | String /* "upper-roman" */ | String /* "lower-roman" */ | String /* "upper-alpha" */ | String /* "lower-alpha" */ | String /* "custom-image" */ */ = definedExternally
    open var image: String = definedExternally
    open var startNumber: Number = definedExternally
}
external open class PrintProperties {
    open var omitControls: Array<String> = definedExternally
    open var includeControls: Array<String> = definedExternally
    open var printForExport: Boolean = definedExternally
}
external open class Gradient {
    open var id: String = definedExternally
    open var colorStops: Array<Any?> = definedExternally
    open var startColor: String = definedExternally
    open var endColor: String = definedExternally
}
external open class TreeGrid : ListGrid, DataBoundComponent {
//    override var dataSource: dynamic /* String | DataSource */ = definedExternally
//    override var data: Tree = definedExternally
    open var initialData: Array<Any?> = definedExternally
    open var loadDataOnDemand: Boolean = definedExternally
    open var keepParentsOnFilter: Boolean = definedExternally
//    override var dataFetchMode: dynamic /* String /* "basic" */ | String /* "paged" */ | String /* "local" */ */ = definedExternally
    open var serverFilterFields: Array<String> = definedExternally
//    override var autoFetchTextMatchStyle: dynamic /* String /* "startsWith" */ | String /* "exact" */ | String /* "exactCase" */ | String /* "substring" */ */ = definedExternally
    open var cascadeSelection: Boolean = definedExternally
//    override var showPartialSelection: Boolean = definedExternally
//    override var selectionProperty: String = definedExternally
//    override var canSelectAll: Boolean = definedExternally
    open var treeRootValue: Any = definedExternally
//    override var fields: Array<Any?> = definedExternally
    open var treeFieldTitle: String = definedExternally
    open var showRoot: Boolean = definedExternally
    open var separateFolders: Boolean = definedExternally
//    override var dataProperties: Tree = definedExternally
    open var sortFoldersBeforeLeaves: Boolean = definedExternally
    open var displayNodeType: dynamic /* String /* "null/unset" */ | String /* "folders" */ | String /* "leaves" */ */ = definedExternally
    open var autoPreserveOpenState: dynamic /* String /* "never" */ | String /* "whenUnique" */ | String /* "always" */ */ = definedExternally
//    override var canDragRecordsOut: Boolean = definedExternally
//    override var canAcceptDroppedRecords: Boolean = definedExternally
//    override var canReorderRecords: Boolean = definedExternally
    open var canDropOnLeaves: Boolean = definedExternally
    open var canReparentNodes: Boolean = definedExternally
//    override var dragDataAction: dynamic /* String /* "none" */ | String /* "move" */ | String /* "copy" */ */ = definedExternally
    open var parentAlreadyContainsChildMessage: String = definedExternally
    open var cantDragIntoSelfMessage: String = definedExternally
    open var cantDragIntoChildMessage: String = definedExternally
    open var indentSize: Number = definedExternally
    open var extraIconGap: Number = definedExternally
    open var iconSize: Number = definedExternally
    open var openerIconSize: Number = definedExternally
    open var openerIconWidth: Number = definedExternally
    open var openerIconHeight: Number = definedExternally
    open var showLoadingIcons: Boolean = definedExternally
    open var loadingIcon: String = definedExternally
    open var folderIcon: String = definedExternally
    open var dropIconSuffix: String = definedExternally
    open var openIconSuffix: String = definedExternally
    open var closedIconSuffix: String = definedExternally
    open var selectedIconSuffix: String = definedExternally
    open var nodeIcon: String = definedExternally
    open var showOpenIcons: Boolean = definedExternally
    open var showSelectedIcons: Boolean = definedExternally
    open var showDropIcons: Boolean = definedExternally
    open var customIconProperty: String = definedExternally
    open var customIconOpenProperty: String = definedExternally
    open var customIconDropProperty: String = definedExternally
    open var customIconSelectedProperty: String = definedExternally
    open var showCustomIconOpen: Boolean = definedExternally
    open var showCustomIconDrop: Boolean = definedExternally
    open var showCustomIconSelected: Boolean = definedExternally
    open var showDisabledSelectionCheckbox: Boolean = definedExternally
    open var leaveSelectionCheckboxGap: Boolean = definedExternally
    open var folderOpenImage: String = definedExternally
    open var folderClosedImage: String = definedExternally
    open var folderDropImage: String = definedExternally
    open var fileImage: String = definedExternally
    open var manyItemsImage: String = definedExternally
    open var showConnectors: Boolean = definedExternally
    open var showFullConnectors: Boolean = definedExternally
    open var showOpener: Boolean = definedExternally
    open var alwaysShowOpener: Boolean = definedExternally
    open var showSelectedOpener: Boolean = definedExternally
    open var openerImage: String = definedExternally
    open var connectorImage: String = definedExternally
    open var offlineNodeMessage: String = definedExternally
    open var indentRecordComponents: Boolean = definedExternally
    open var createDefaultTreeField: Boolean = definedExternally
//    override var useAllDataSourceFields: Boolean = definedExternally
//    override var animateFolders: Boolean = definedExternally
//    override var animateFolderMaxRows: Number = definedExternally
//    override var animateFolderTime: Number = definedExternally
//    override var animateFolderSpeed: Number = definedExternally
//    override var animateFolderEffect: dynamic /* String /* "none" */ | String /* "smoothStart" */ | String /* "smoothEnd" */ | String /* "smoothStartEnd" */ */ = definedExternally
//    override var recordDropAppearance: dynamic /* String /* "between" */ | String /* "both" */ | String /* "over" */ | String /* "body" */ */ = definedExternally
//    override fun fetchData(criteria: Any?, callback: Any?, requestProperties: DSRequest?): Unit = definedExternally
//    override fun filterData(criteria: Any?, callback: Any?, requestProperties: DSRequest?): Unit = definedExternally
//    open fun exportClientData(requestProperties: DSRequest? = definedExternally /* null */, callback: ((response: RPCResponse, rawData: Any, request: RPCRequest) -> Unit)? = definedExternally /* null */): Unit = definedExternally
//    override fun isExportingClientData(): Boolean = definedExternally
    open fun toggleFolder(node: TreeNode): Unit = definedExternally
    open fun openFolder(node: TreeNode): Unit = definedExternally
    open fun closeFolder(node: TreeNode): Unit = definedExternally
    open fun shouldAnimateFolder(folder: TreeNode): Boolean = definedExternally
    open fun getAnimateFolderMaxRows(): Number = definedExternally
    open fun getOpenState(): String = definedExternally
    open fun setOpenState(openState: String): Unit = definedExternally
    open fun getSelectedPaths(): String = definedExternally
    open fun setSelectedPaths(selectedPaths: String): Unit = definedExternally
//    override fun getViewState(): String = definedExternally
//    override fun setViewState(viewState: String): Unit = definedExternally
    open fun setData(newData: Tree): Unit = definedExternally
    open fun canEditCell(): Boolean = definedExternally
    open fun startEditingNew(newValues: Any? = definedExternally /* null */, suppressFocus: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun rowClick(record: TreeNode, recordNum: Number, fieldNum: Number): Unit = definedExternally
    open fun recordDoubleClick(): Unit = definedExternally
    open fun openLeaf(node: TreeNode): Unit = definedExternally
//    override fun transferDragData(): Array<Any> = definedExternally
//    override fun getDragTrackerIcon(records: Array<Any?>): String = definedExternally
//    override fun willAcceptDrop(): Boolean = definedExternally
//    override fun getEventRow(y: Number?): Number = definedExternally
    open fun getDropFolder(): Node = definedExternally
    open fun transferSelectedData(sourceGrid: ListGrid, folder: TreeNode? = definedExternally /* null */, index: Number? = definedExternally /* null */, callback: Any? = definedExternally /* null */): Unit = definedExternally
    open fun recordDrop(): Unit = definedExternally
    open fun transferNodes(nodes: Array<Any?>, folder: TreeNode, index: Number, sourceWidget: Canvas, callback: Any? = definedExternally /* null */): Unit = definedExternally
//    override fun getCellAlign(record: ListGridRecord, rowNum: Number, colNum: Number): dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open fun getNodeTitle(node: TreeNode, recordNum: Number, field: String): String = definedExternally
    open fun isOverOpenArea(): Boolean = definedExternally
    open fun isOverExtraIcon(): Boolean = definedExternally
    open fun getOpenIcon(node: TreeNode): String = definedExternally
    open fun getExtraIcon(node: TreeNode): String = definedExternally
    open fun getIcon(node: TreeNode): String = definedExternally
    open fun setNodeIcon(node: TreeNode, icon: String): Unit = definedExternally
    open fun folderOpened(node: TreeNode): Boolean = definedExternally
    open fun folderClosed(node: TreeNode): Boolean = definedExternally
    open fun folderClick(viewer: TreeGrid, folder: TreeNode, recordNum: Number): Unit = definedExternally
    open fun leafClick(viewer: TreeGrid, leaf: TreeNode, recordNum: Number): Unit = definedExternally
    open fun nodeClick(viewer: TreeGrid, node: TreeNode, recordNum: Number): Unit = definedExternally
    open fun folderContextClick(viewer: TreeGrid, folder: TreeNode, recordNum: Number): Boolean = definedExternally
    open fun leafContextClick(viewer: TreeGrid, leaf: TreeNode, recordNum: Number): Boolean = definedExternally
    open fun nodeContextClick(viewer: TreeGrid, node: TreeNode, recordNum: Number): Boolean = definedExternally
    open fun dataArrived(parentNode: TreeNode): Unit = definedExternally
//    override fun dataChanged(operationType: String?): Unit = definedExternally
//    override var deepCloneOnEdit: Boolean = definedExternally
//    override var deepCloneNonFieldValuesOnEdit: Boolean = definedExternally
//    override var dataPageSize: Number = definedExternally
//    override var dataFetchDelay: Number = definedExternally
//    override var showHiddenFields: Boolean = definedExternally
//    override var showDetailFields: Boolean = definedExternally
//    override var showComplexFields: Boolean = definedExternally
//    override var fetchOperation: String = definedExternally
//    override var updateOperation: String = definedExternally
//    override var addOperation: String = definedExternally
//    override var removeOperation: String = definedExternally
//    override var exportFields: Array<String> = definedExternally
//    override var exportAll: Boolean = definedExternally
//    override var exportIncludeSummaries: Boolean = definedExternally
//    override var dragRecategorize: dynamic /* String /* "never" */ | String /* "always" */ | String /* "checked" */ */ = definedExternally
//    override var preventDuplicates: Boolean = definedExternally
//    override var duplicateDragMessage: String = definedExternally
//    override var showOfflineMessage: Boolean = definedExternally
//    override var offlineMessage: String = definedExternally
//    override var offlineSaveMessage: String = definedExternally
//    override var addDropValues: Boolean = definedExternally
//    override var dropValues: Any = definedExternally
//    override var dataArity: String = definedExternally
//    override var progressiveLoading: Boolean = definedExternally
//    override var canEditFieldAttribute: String = definedExternally
//    override var useFlatFields: Boolean = definedExternally
//    override var canChangeNonFieldValues: Boolean = definedExternally
//    override var autoFetchData: Boolean = definedExternally
//    override var initialCriteria: Any? = definedExternally
//    override var implicitCriteria: Any? = definedExternally
//    override var canEditHilites: Boolean = definedExternally
//    override var hilites: Array<Any?> = definedExternally
//    override var hiliteIcons: Array<String> = definedExternally
//    override var hiliteIconPosition: dynamic /* String /* "before" */ | String /* "after" */ | String /* "replace" */ */ = definedExternally
//    override var hiliteIconSize: Number = definedExternally
//    override var hiliteIconWidth: Number = definedExternally
//    override var hiliteIconHeight: Number = definedExternally
//    override var hiliteIconLeftPadding: Number = definedExternally
//    override var hiliteIconRightPadding: Number = definedExternally
//    override var hiliteProperty: String = definedExternally
//    override var hiliteState: String = definedExternally
//    override var fieldNamingStrategy: dynamic /* String /* "simple" */ | String /* "uuid" */ */ = definedExternally
//    override var editHilitesText: String = definedExternally
//    override var editHilitesDialogTitle: String = definedExternally
//    override var fieldEditorWindowTitle: String = definedExternally
//    override var fieldEditorWindow: Window = definedExternally
//    override var hiliteEditor: HiliteEditor = definedExternally
//    override var dragTrackerStyle: String = definedExternally
//    override var badFormulaResultValue: String = definedExternally
//    override var missingSummaryFieldValue: String = definedExternally
//    override var canAddFormulaFields: Boolean = definedExternally
//    override var addFormulaFieldText: String = definedExternally
//    override var editFormulaFieldText: String = definedExternally
//    override var removeFormulaFieldText: String = definedExternally
//    override var canAddSummaryFields: Boolean = definedExternally
//    override var addSummaryFieldText: String = definedExternally
//    override var editSummaryFieldText: String = definedExternally
//    override var removeSummaryFieldText: String = definedExternally
//    override var includeHilitesInSummaryFields: Boolean = definedExternally
//    override var titleField: String = definedExternally
//    override var iconField: String = definedExternally
//    override var infoField: String = definedExternally
//    override var dataField: String = definedExternally
//    override var descriptionField: String = definedExternally
//    override var emptyExportMessage: String = definedExternally
//    override var multiSortDialogProperties: MultiSortDialog = definedExternally
//    override var multiSortDialogDefaults: MultiSortDialog = definedExternally
//    override var unknownErrorMessage: String = definedExternally
//    override var noErrorDetailsMessage: String = definedExternally
//    override fun dragComplete(): Unit = definedExternally
//    override fun dropComplete(transferredRecords: Array<Any?>): Unit = definedExternally
//    override fun getDataPathField(dataPath: String): Unit = definedExternally
//    override fun fieldIsEditable(field: String): Boolean = definedExternally
//    override fun fieldIsEditable(field: Number): Boolean = definedExternally
//    override fun fieldIsEditable(field: Any?): Boolean = definedExternally
//    override fun getField(fieldID: String): Any = definedExternally
//    override fun getField(fieldID: Number): Any = definedExternally
//    override fun getFieldNum(fieldName: String): Number = definedExternally
//    override fun find(advancedCriteria: AdvancedCriteria): Any = definedExternally
//    override fun findAll(advancedCriteria: AdvancedCriteria): Array<Any> = definedExternally
//    override fun findIndex(advancedCriteria: AdvancedCriteria): Number = definedExternally
//    override fun findNextIndex(startIndex: Number, advancedCriteria: AdvancedCriteria, endIndex: Number?): Number = definedExternally
//    override fun setDataSource(dataSource: String, fields: Array<Any?>?): Unit = definedExternally
//    override fun setDataSource(dataSource: DataSource, fields: Array<Any?>?): Unit = definedExternally
//    override fun exportData(requestProperties: DSRequest?, callback: Any?): Unit = definedExternally
//    override fun getFieldAlignments(): Array<dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */> = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "startsWith" */): Boolean = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "exact" */): Boolean = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "exactCase" */): Boolean = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "substring" */): Boolean = definedExternally
//    override fun findByKey(keyValue: Any): Record = definedExternally
//    override fun selectRecord(record: Number, newState: Boolean?): Unit = definedExternally
//    override fun selectRecord(record: Record, newState: Boolean?): Unit = definedExternally
//    override fun selectSingleRecord(record: Number): Unit = definedExternally
//    override fun selectSingleRecord(record: Record): Unit = definedExternally
//    override fun deselectRecord(record: Number): Unit = definedExternally
//    override fun deselectRecord(record: Record): Unit = definedExternally
//    override fun selectRecords(records: Number, newState: Boolean?): Unit = definedExternally
//    override fun selectRecords(records: Array<Any?>, newState: Boolean?): Unit = definedExternally
//    override fun deselectRecords(records: Number): Unit = definedExternally
//    override fun deselectRecords(records: Array<Any?>): Unit = definedExternally
//    override fun selectAllRecords(): Unit = definedExternally
//    override fun deselectAllRecords(): Unit = definedExternally
//    override fun selectRange(startRow: Number, endRow: Number, newState: Boolean?): Unit = definedExternally
//    override fun deselectRange(startRow: Number, endRow: Number): Unit = definedExternally
//    override fun anySelected(): Boolean = definedExternally
//    override fun getSelectionLength(): Number = definedExternally
//    override fun getHilites(): Array<Any?> = definedExternally
//    override fun setHilites(hilites: Array<Any?>): Unit = definedExternally
//    override fun getHiliteState(): String = definedExternally
//    override fun setHiliteState(hiliteState: String): Unit = definedExternally
//    override fun enableHilite(hiliteID: String, enable: Boolean?): Unit = definedExternally
//    override fun disableHilite(hiliteID: String): Unit = definedExternally
//    override fun enableHiliting(enable: Boolean?): Unit = definedExternally
//    override fun disableHiliting(): Unit = definedExternally
//    override fun editHilites(): Unit = definedExternally
//    override fun transferRecords(dropRecords: Array<Any?>, targetRecord: Record, index: Number, sourceWidget: Canvas, callback: Any?): Unit = definedExternally
//    override fun getDropValues(record: Record, sourceDS: DataSource, targetRecord: Record, index: Number, sourceWidget: Canvas): Any = definedExternally
//    override fun getDragData(source: DataBoundComponent): Array<Any?> = definedExternally
//    override fun setDragTracker(): Boolean = definedExternally
//    override fun addFormulaField(): Unit = definedExternally
//    override fun editFormulaField(field: String): Unit = definedExternally
//    override fun getFormulaFieldValue(field: String, record: Record): dynamic /* String | Number */ = definedExternally
//    override fun addSummaryField(): Unit = definedExternally
//    override fun editSummaryField(field: String): Unit = definedExternally
//    override fun getSummaryFieldValue(field: String, record: Record): String = definedExternally
//    override fun shouldIncludeHiliteInSummaryField(summaryFieldName: String, usedFieldName: String): Boolean = definedExternally
//    override fun getRecordIndex(record: Record): Number = definedExternally
//    override fun getTitleFieldValue(record: Record): String = definedExternally
//    override fun getTitleField(): String = definedExternally
//    override fun getRecordHiliteCSSText(record: Record, cssText: String, field: String): String = definedExternally
//    override fun getSort(): Array<Any?> = definedExternally
//    override fun setSort(sortSpecifiers: Array<Any?>): Unit = definedExternally
//    override fun askForSort(): Unit = definedExternally
//    override fun isOffline(): Boolean = definedExternally
//    override fun editFields(): Unit = definedExternally
//    override fun userAddedField(field: ListGridField): Boolean = definedExternally
//    override fun selectionUpdated(record: Any, recordList: Array<Any?>): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): TreeGrid = definedExternally
        fun requestsArePending(): Boolean = definedExternally
    }
//    override fun willFetchData(newCriteria: Any?): Boolean = definedExternally
}
external open class Offline : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Offline = definedExternally
        fun isOffline(): Boolean = definedExternally
        fun goOffline(): Unit = definedExternally
        fun goOnline(): Unit = definedExternally
        fun useNativeOfflineDetection(): Unit = definedExternally
        fun put(key: String, value: Any, recycleEntries: Boolean? = definedExternally /* null */): Unit = definedExternally
        fun get(key: String): Any = definedExternally
        fun remove(key: String): Unit = definedExternally
    }
}
external open class HeaderSpan {
    open var name: String = definedExternally
    open var fields: Array<String> = definedExternally
    open var spans: Array<Any?> = definedExternally
    open var title: String = definedExternally
    open var headerTitle: String = definedExternally
    open var headerBaseStyle: String = definedExternally
    open var headerTitleStyle: String = definedExternally
    open var height: Number = definedExternally
    open var valign: dynamic /* String /* "top" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
    open var align: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var wrap: Boolean = definedExternally
}
external open class SimpleType : Class {
    open var name: String = definedExternally
    open var inheritsFrom: String = definedExternally
    open var validators: Array<Any?> = definedExternally
    open var valueMap: Any? = definedExternally
    open var editorType: String = definedExternally
    open var readOnlyEditorType: String = definedExternally
    open var filterEditorType: String = definedExternally
    open var fieldProperties: DataSourceField = definedExternally
    open var format: String = definedExternally
    open var exportFormat: String = definedExternally
    open var groupingModes: Any? = definedExternally
    open var defaultGroupingMode: String = definedExternally
    open var validOperators: Array<dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */> = definedExternally
    open fun getAtomicValue(value: Any, reason: String): Any = definedExternally
    open fun updateAtomicValue(atomicValue: Any, currentValue: Any, reason: String): Any = definedExternally
    open fun compareValues(value1: Any, value2: Any, field: FormItem): Number = definedExternally
    open fun compareValues(value1: Any, value2: Any, field: DataSourceField): Number = definedExternally
    open fun compareValues(value1: Any, value2: Any, field: ListGridField): Number = definedExternally
    open fun compareValues(value1: Any, value2: Any, field: DetailViewerField): Number = definedExternally
    open fun shortDisplayFormatter(value: Any, field: String? = definedExternally /* null */, component: DataBoundComponent? = definedExternally /* null */, record: Any? = definedExternally /* null */): Unit = definedExternally
    open fun normalDisplayFormatter(value: Any, field: String? = definedExternally /* null */, component: DataBoundComponent? = definedExternally /* null */, record: Any? = definedExternally /* null */): Unit = definedExternally
    open fun editFormatter(value: Any, field: FormItem? = definedExternally /* null */, form: DynamicForm? = definedExternally /* null */, record: Record? = definedExternally /* null */): String = definedExternally
    open fun parseInput(value: String, field: FormItem? = definedExternally /* null */, form: DynamicForm? = definedExternally /* null */, record: Record? = definedExternally /* null */): Any = definedExternally
    open fun getGroupingModes(): Any? = definedExternally
    open fun getGroupValue(value: Any, record: Record, field: Any, fieldName: String, component: Canvas): Any = definedExternally
    open fun getGroupTitle(value: Any, record: Record, field: Any, fieldName: String, component: Canvas): String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SimpleType = definedExternally
        fun getType(typeName: String): SimpleType = definedExternally
        fun registerSummaryFunction(functionName: String, method: Function<*>): Unit = definedExternally
        fun setDefaultSummaryFunction(typeName: String, summaryFunction: String /* "title" */): Unit = definedExternally
        fun setDefaultSummaryFunction(typeName: String, summaryFunction: String /* "sum" */): Unit = definedExternally
        fun setDefaultSummaryFunction(typeName: String, summaryFunction: String /* "avg" */): Unit = definedExternally
        fun setDefaultSummaryFunction(typeName: String, summaryFunction: String /* "max" */): Unit = definedExternally
        fun setDefaultSummaryFunction(typeName: String, summaryFunction: String /* "min" */): Unit = definedExternally
        fun setDefaultSummaryFunction(typeName: String, summaryFunction: String /* "multiplier" */): Unit = definedExternally
        fun setDefaultSummaryFunction(typeName: String, summaryFunction: String /* "count" */): Unit = definedExternally
        fun setDefaultSummaryFunction(typeName: String, summaryFunction: String /* "first" */): Unit = definedExternally
        fun setDefaultSummaryFunction(typeName: String, summaryFunction: String /* "concat" */): Unit = definedExternally
        fun getDefaultSummaryFunction(typeName: String): dynamic /* String /* "title" */ | String /* "sum" */ | String /* "avg" */ | String /* "max" */ | String /* "min" */ | String /* "multiplier" */ | String /* "count" */ | String /* "first" */ | String /* "concat" */ */ = definedExternally
        fun applySummaryFunction(records: Array<Any?>, field: DataSourceField, summaryFunction: String /* "title" */, summaryConfig: SummaryConfiguration): Any = definedExternally
        fun applySummaryFunction(records: Array<Any?>, field: DataSourceField, summaryFunction: String /* "sum" */, summaryConfig: SummaryConfiguration): Any = definedExternally
        fun applySummaryFunction(records: Array<Any?>, field: DataSourceField, summaryFunction: String /* "avg" */, summaryConfig: SummaryConfiguration): Any = definedExternally
        fun applySummaryFunction(records: Array<Any?>, field: DataSourceField, summaryFunction: String /* "max" */, summaryConfig: SummaryConfiguration): Any = definedExternally
        fun applySummaryFunction(records: Array<Any?>, field: DataSourceField, summaryFunction: String /* "min" */, summaryConfig: SummaryConfiguration): Any = definedExternally
        fun applySummaryFunction(records: Array<Any?>, field: DataSourceField, summaryFunction: String /* "multiplier" */, summaryConfig: SummaryConfiguration): Any = definedExternally
        fun applySummaryFunction(records: Array<Any?>, field: DataSourceField, summaryFunction: String /* "count" */, summaryConfig: SummaryConfiguration): Any = definedExternally
        fun applySummaryFunction(records: Array<Any?>, field: DataSourceField, summaryFunction: String /* "first" */, summaryConfig: SummaryConfiguration): Any = definedExternally
        fun applySummaryFunction(records: Array<Any?>, field: DataSourceField, summaryFunction: String /* "concat" */, summaryConfig: SummaryConfiguration): Any = definedExternally
    }
}
external open class FileSpec {
    open var fileName: String = definedExternally
    open var fileType: String = definedExternally
    open var fileFormat: String = definedExternally
}
external open class TileGrid : TileLayout, DataBoundComponent {
//    override var fields: Array<Any?> = definedExternally
//    override var tiles: Array<Any?> = definedExternally
//    override var showDetailFields: Boolean = definedExternally
    open var tileValueStyle: String = definedExternally
    open var valuesShowRollOver: Boolean = definedExternally
    open var valuesShowSelected: Boolean = definedExternally
    open var valuesShowDown: Boolean = definedExternally
    open var tileValueAlign: String = definedExternally
    open var wrapValues: Boolean = definedExternally
    open var data: dynamic /* Array<Any?> | Any */ = definedExternally
    open var printTilesPerLine: Number = definedExternally
//    override var dataSource: dynamic /* String | DataSource */ = definedExternally
//    override var autoFetchData: Boolean = definedExternally
    open var autoFetchTextMatchStyle: dynamic /* String /* "startsWith" */ | String /* "exact" */ | String /* "exactCase" */ | String /* "substring" */ */ = definedExternally
//    override var initialCriteria: Any? = definedExternally
//    override var dataFetchMode: dynamic /* String /* "basic" */ | String /* "paged" */ | String /* "local" */ */ = definedExternally
    open var selectionType: dynamic /* String /* "none" */ | String /* "simple" */ | String /* "single" */ | String /* "multiple" */ */ = definedExternally
    open var tile: SimpleTile = definedExternally
    open var tileProperties: Canvas = definedExternally
    open var tileConstructor: String = definedExternally
    open var detailViewer: DetailViewer = definedExternally
    open var detailViewerProperties: DetailViewer = definedExternally
    open var recycleTiles: Boolean = definedExternally
    open var showAllRecords: Boolean = definedExternally
    open var drawAllMaxTiles: Number = definedExternally
//    override var animateTileChange: Boolean = definedExternally
//    override var styleName: String = definedExternally
    open var tileDragAppearance: dynamic /* String /* "none" */ | String /* "tracker" */ | String /* "target" */ | String /* "outline" */ */ = definedExternally
    open var canReorderTiles: Boolean = definedExternally
    open var canDragTilesOut: Boolean = definedExternally
    open var canAcceptDroppedRecords: Boolean = definedExternally
//    override var dragTrackerStyle: String = definedExternally
    override var dragDataAction: dynamic /* String /* "none" */ | String /* "move" */ | String /* "copy" */ */ = definedExternally
    open var loadingMessage: String = definedExternally
    open var showEmptyMessage: Boolean = definedExternally
    open var emptyMessage: String = definedExternally
    open var emptyMessageStyle: String = definedExternally
//    override fun exportData(requestProperties: DSRequest?, callback: Any?): Unit = definedExternally
    open fun fetchData(criteria: Any? = definedExternally /* null */, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun filterData(criteria: Any? = definedExternally /* null */, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun invalidateCache(): Unit = definedExternally
    open fun removeSelectedData(callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun getSelection(excludePartialSelections: Boolean? = definedExternally /* null */): Array<Any?> = definedExternally
    open fun getSelectedRecord(): TileRecord = definedExternally
//    override fun selectRecord(record: Number, newState: Boolean?): Unit = definedExternally
//    override fun selectRecord(record: Record, newState: Boolean?): Unit = definedExternally
//    override fun deselectRecord(record: Number): Unit = definedExternally
//    override fun deselectRecord(record: Record): Unit = definedExternally
//    override fun selectRecords(records: Number, newState: Boolean?): Unit = definedExternally
//    override fun selectRecords(records: Array<Any?>, newState: Boolean?): Unit = definedExternally
//    override fun selectRange(startRow: Number, endRow: Number, newState: Boolean?): Unit = definedExternally
//    override fun deselectRecords(records: Number): Unit = definedExternally
//    override fun deselectRecords(records: Array<Any?>): Unit = definedExternally
//    override fun deselectRange(startRow: Number, endRow: Number): Unit = definedExternally
//    override fun selectAllRecords(): Unit = definedExternally
//    override fun deselectAllRecords(): Unit = definedExternally
//    override fun anySelected(): Boolean = definedExternally
    open fun createTile(record: Record, tileIndex: Number): Canvas = definedExternally
    open fun updateTile(record: Record, tileIndex: Number, reclaimedTile: Canvas): Unit = definedExternally
    open fun getTileRecord(tile: Canvas): TileRecord = definedExternally
    open fun setData(newData: ResultSet): Unit = definedExternally
    open fun setData(newData: Array<Any?>): Unit = definedExternally
    open fun getTileHTML(tileRecord: TileRecord): String = definedExternally
//    open fun getTile(tile: Number): Canvas = definedExternally
    open fun getTile(tile: TileRecord): Canvas = definedExternally
    open fun getTileIndex(tile: Canvas): Number = definedExternally
    open fun getCurrentTile(): SimpleTile = definedExternally
    open fun recordClick(viewer: TileGrid, tile: Canvas, record: TileRecord): Unit = definedExternally
    open fun recordDoubleClick(viewer: TileGrid, tile: Canvas, record: TileRecord): Unit = definedExternally
    open fun recordContextClick(viewer: TileGrid, tile: Canvas, record: TileRecord): Boolean = definedExternally
    open fun selectionChanged(record: Record, state: Boolean): Unit = definedExternally
    open fun addTile(): Unit = definedExternally
    open fun removeTile(): Unit = definedExternally
    open fun addData(newRecord: Record, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun removeData(data: Record, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun setCanReorderTiles(): Unit = definedExternally
    open fun setCanDragTilesOut(): Unit = definedExternally
    open fun setCanAcceptDroppedRecords(): Unit = definedExternally
//    override fun setDragTracker(): Boolean = definedExternally
//    override fun getTitleField(): String = definedExternally
    open fun getDragTrackerTitle(record: ListGridRecord, rowNum: Number): String = definedExternally
//    override fun transferDragData(): Array<Any> = definedExternally
//    override fun getDragData(source: DataBoundComponent): Array<Any?> = definedExternally
//    override fun transferSelectedData(source: DataBoundComponent, index: Number?, callback: Any?): Unit = definedExternally
    open fun setFieldState(fieldState: String): Unit = definedExternally
    open fun getFieldState(): String = definedExternally
    open fun dataArrived(startRecord: Number, endRecord: Number): Unit = definedExternally
//    override var deepCloneOnEdit: Boolean = definedExternally
//    override var deepCloneNonFieldValuesOnEdit: Boolean = definedExternally
//    override var dataPageSize: Number = definedExternally
//    override var dataFetchDelay: Number = definedExternally
//    override var useAllDataSourceFields: Boolean = definedExternally
//    override var showHiddenFields: Boolean = definedExternally
//    override var showComplexFields: Boolean = definedExternally
//    override var fetchOperation: String = definedExternally
//    override var updateOperation: String = definedExternally
//    override var addOperation: String = definedExternally
//    override var removeOperation: String = definedExternally
//    override var exportFields: Array<String> = definedExternally
//    override var exportAll: Boolean = definedExternally
//    override var exportIncludeSummaries: Boolean = definedExternally
//    override var dragRecategorize: dynamic /* String /* "never" */ | String /* "always" */ | String /* "checked" */ */ = definedExternally
//    override var preventDuplicates: Boolean = definedExternally
//    override var duplicateDragMessage: String = definedExternally
//    override var showOfflineMessage: Boolean = definedExternally
//    override var offlineMessage: String = definedExternally
//    override var offlineSaveMessage: String = definedExternally
//    override var addDropValues: Boolean = definedExternally
//    override var dropValues: Any = definedExternally
//    override var dataArity: String = definedExternally
//    override var progressiveLoading: Boolean = definedExternally
//    override var canEditFieldAttribute: String = definedExternally
//    override var useFlatFields: Boolean = definedExternally
//    override var canChangeNonFieldValues: Boolean = definedExternally
//    override var implicitCriteria: Any? = definedExternally
//    override var canEditHilites: Boolean = definedExternally
//    override var hilites: Array<Any?> = definedExternally
//    override var hiliteIcons: Array<String> = definedExternally
//    override var hiliteIconPosition: dynamic /* String /* "before" */ | String /* "after" */ | String /* "replace" */ */ = definedExternally
//    override var hiliteIconSize: Number = definedExternally
//    override var hiliteIconWidth: Number = definedExternally
//    override var hiliteIconHeight: Number = definedExternally
//    override var hiliteIconLeftPadding: Number = definedExternally
//    override var hiliteIconRightPadding: Number = definedExternally
//    override var hiliteProperty: String = definedExternally
//    override var hiliteState: String = definedExternally
//    override var fieldNamingStrategy: dynamic /* String /* "simple" */ | String /* "uuid" */ */ = definedExternally
//    override var editHilitesText: String = definedExternally
//    override var editHilitesDialogTitle: String = definedExternally
//    override var fieldEditorWindowTitle: String = definedExternally
//    override var fieldEditorWindow: Window = definedExternally
//    override var hiliteEditor: HiliteEditor = definedExternally
//    override var badFormulaResultValue: String = definedExternally
//    override var missingSummaryFieldValue: String = definedExternally
//    override var canAddFormulaFields: Boolean = definedExternally
//    override var addFormulaFieldText: String = definedExternally
//    override var editFormulaFieldText: String = definedExternally
//    override var removeFormulaFieldText: String = definedExternally
//    override var canAddSummaryFields: Boolean = definedExternally
//    override var addSummaryFieldText: String = definedExternally
//    override var editSummaryFieldText: String = definedExternally
//    override var removeSummaryFieldText: String = definedExternally
//    override var includeHilitesInSummaryFields: Boolean = definedExternally
//    override var titleField: String = definedExternally
//    override var iconField: String = definedExternally
//    override var infoField: String = definedExternally
//    override var dataField: String = definedExternally
//    override var descriptionField: String = definedExternally
//    override var emptyExportMessage: String = definedExternally
//    override var multiSortDialogProperties: MultiSortDialog = definedExternally
//    override var multiSortDialogDefaults: MultiSortDialog = definedExternally
//    override var unknownErrorMessage: String = definedExternally
//    override var noErrorDetailsMessage: String = definedExternally
//    override fun dragComplete(): Unit = definedExternally
//    override fun dropComplete(transferredRecords: Array<Any?>): Unit = definedExternally
//    override fun getDataPathField(dataPath: String): Unit = definedExternally
//    override fun fieldIsEditable(field: String): Boolean = definedExternally
//    override fun fieldIsEditable(field: Number): Boolean = definedExternally
//    override fun fieldIsEditable(field: Any?): Boolean = definedExternally
//    override fun getField(fieldID: String): Any = definedExternally
//    override fun getField(fieldID: Number): Any = definedExternally
//    override fun getFieldNum(fieldName: String): Number = definedExternally
//    override fun find(advancedCriteria: AdvancedCriteria): Any = definedExternally
//    override fun findAll(advancedCriteria: AdvancedCriteria): Array<Any> = definedExternally
//    override fun findIndex(advancedCriteria: AdvancedCriteria): Number = definedExternally
//    override fun findNextIndex(startIndex: Number, advancedCriteria: AdvancedCriteria, endIndex: Number?): Number = definedExternally
//    override fun setDataSource(dataSource: String, fields: Array<Any?>?): Unit = definedExternally
//    override fun setDataSource(dataSource: DataSource, fields: Array<Any?>?): Unit = definedExternally
//    override fun getFieldAlignments(): Array<dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */> = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "startsWith" */): Boolean = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "exact" */): Boolean = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "exactCase" */): Boolean = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "substring" */): Boolean = definedExternally
//    override fun findByKey(keyValue: Any): Record = definedExternally
//    override fun selectSingleRecord(record: Number): Unit = definedExternally
//    override fun selectSingleRecord(record: Record): Unit = definedExternally
//    override fun getSelectionLength(): Number = definedExternally
//    override fun getHilites(): Array<Any?> = definedExternally
//    override fun setHilites(hilites: Array<Any?>): Unit = definedExternally
//    override fun getHiliteState(): String = definedExternally
//    override fun setHiliteState(hiliteState: String): Unit = definedExternally
//    override fun enableHilite(hiliteID: String, enable: Boolean?): Unit = definedExternally
//    override fun disableHilite(hiliteID: String): Unit = definedExternally
//    override fun enableHiliting(enable: Boolean?): Unit = definedExternally
//    override fun disableHiliting(): Unit = definedExternally
//    override fun editHilites(): Unit = definedExternally
//    override fun transferRecords(dropRecords: Array<Any?>, targetRecord: Record, index: Number, sourceWidget: Canvas, callback: Any?): Unit = definedExternally
//    override fun getDropValues(record: Record, sourceDS: DataSource, targetRecord: Record, index: Number, sourceWidget: Canvas): Any = definedExternally
//    override fun addFormulaField(): Unit = definedExternally
//    override fun editFormulaField(field: String): Unit = definedExternally
//    override fun getFormulaFieldValue(field: String, record: Record): dynamic /* String | Number */ = definedExternally
//    override fun addSummaryField(): Unit = definedExternally
//    override fun editSummaryField(field: String): Unit = definedExternally
//    override fun getSummaryFieldValue(field: String, record: Record): String = definedExternally
//    override fun shouldIncludeHiliteInSummaryField(summaryFieldName: String, usedFieldName: String): Boolean = definedExternally
//    override fun getRecordIndex(record: Record): Number = definedExternally
//    override fun getTitleFieldValue(record: Record): String = definedExternally
//    override fun getRecordHiliteCSSText(record: Record, cssText: String, field: String): String = definedExternally
//    override fun getSort(): Array<Any?> = definedExternally
//    override fun setSort(sortSpecifiers: Array<Any?>): Unit = definedExternally
//    override fun askForSort(): Unit = definedExternally
//    override fun isOffline(): Boolean = definedExternally
//    override fun editFields(): Unit = definedExternally
//    override fun userAddedField(field: ListGridField): Boolean = definedExternally
//    override fun selectionUpdated(record: Any, recordList: Array<Any?>): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): TileGrid = definedExternally
        fun requestsArePending(): Boolean = definedExternally
    }
//    override fun willFetchData(newCriteria: Any?): Boolean = definedExternally
}
external open class DataPathItem : TextItem {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DataPathItem = definedExternally
    }
}
external open class GroupSummary
external open class NavigationButton : Button {
//    override var baseStyle: String = definedExternally
    open var backBaseStyle: String = definedExternally
    open var forwardBaseStyle: String = definedExternally
    open var direction: dynamic /* String /* "none" */ | String /* "back" */ | String /* "forward" */ */ = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): NavigationButton = definedExternally
    }
}
external open class FieldPickerWindow : Window {
//    override var title: String = definedExternally
    open var autoDismiss: Boolean = definedExternally
    open var fieldPicker: FieldPicker = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): FieldPickerWindow = definedExternally
    }
}
external open class DrawItem : BaseWidget {
    open var zIndex: Number = definedExternally
    open var cursor: dynamic /* String /* "text" */ | String /* "auto" */ | String /* "move" */ | String /* "default" */ | String /* "wait" */ | String /* "hand" */ | String /* "help" */ | String /* "pointer" */ | String /* "arrow" */ | String /* "all-scroll" */ | String /* "crosshair" */ | String /* "col-resize" */ | String /* "row-resize" */ | String /* "e-resize" */ | String /* "w-resize" */ | String /* "n-resize" */ | String /* "s-resize" */ | String /* "se-resize" */ | String /* "ne-resize" */ | String /* "nw-resize" */ | String /* "sw-resize" */ | String /* "not-allowed" */ */ = definedExternally
    open var canHover: Boolean = definedExternally
    open var showHover: Boolean = definedExternally
    open var hoverDelay: Number = definedExternally
    open var prompt: String = definedExternally
    open var drawPane: DrawPane = definedExternally
    open var drawGroup: DrawGroup = definedExternally
    open var lineWidth: Number = definedExternally
    open var lineColor: String = definedExternally
    open var lineOpacity: Number = definedExternally
    open var linePattern: dynamic /* String /* "solid" */ | String /* "dot" */ | String /* "dash" */ | String /* "shortdot" */ | String /* "shortdash" */ | String /* "longdash" */ */ = definedExternally
    open var lineCap: dynamic /* String /* "square" */ | String /* "round" */ | String /* "butt" */ */ = definedExternally
    open var fillColor: String = definedExternally
    open var fillGradient: dynamic /* String | Gradient */ = definedExternally
    open var fillOpacity: Number = definedExternally
    open var shadow: Shadow = definedExternally
    open var rotation: Number = definedExternally
    open var xShearFactor: Number = definedExternally
    open var yShearFactor: Number = definedExternally
    open var scale: Array<Number> = definedExternally
    open var translate: Array<Number> = definedExternally
    open var startArrow: dynamic /* String /* "block" */ | String /* "open" */ */ = definedExternally
    open var endArrow: dynamic /* String /* "block" */ | String /* "open" */ */ = definedExternally
    open var knobs: Array<dynamic /* String /* "resize" */ | String /* "move" */ | String /* "startPoint" */ | String /* "endPoint" */ | String /* "controlPoint1" */ | String /* "controlPoint2" */ | String /* "rotate" */ */> = definedExternally
    open var title: String = definedExternally
    open var titleLabel: DrawLabel = definedExternally
    open var titleAutoFit: Boolean = definedExternally
    open var titleAutoFitRotationMode: dynamic /* String /* "auto" */ | String /* "never" */ | String /* "always" */ */ = definedExternally
    open var titleAutoFitMargin: Number = definedExternally
    open var titleRotationMode: dynamic /* String /* "neverRotate" */ | String /* "withItem" */ | String /* "withItemAlwaysUp" */ | String /* "withLine" */ | String /* "withLineAlwaysUp" */ */ = definedExternally
    open var showTitleLabelBackground: Boolean = definedExternally
    open var titleLabelBackground: DrawRect = definedExternally
    open var titleLabelPadding: Number = definedExternally
    open var keepInParentRect: dynamic /* Boolean | Array<Number> */ = definedExternally
    open var resizeViaLocalTransformOnly: Boolean = definedExternally
    open var proportionalResizing: dynamic /* String /* "none" */ | String /* "modifier" */ | String /* "always" */ | String /* "modifierOff" */ */ = definedExternally
    open var proportionalResizeModifiers: Array<String> = definedExternally
    open var shapeData: Any = definedExternally
    open var dragStartDistance: Number = definedExternally
    open var canDrag: Boolean = definedExternally
    open var contextMenu: Menu = definedExternally
    open var eventOpaque: Boolean = definedExternally
    open var moveKnobPoint: dynamic /* String /* "TL" */ | String /* "TR" */ | String /* "BL" */ | String /* "BR" */ */ = definedExternally
    open var moveKnobOffset: Array<Number> = definedExternally
    open var moveKnob: DrawKnob = definedExternally
    open var rotateKnob: DrawKnob = definedExternally
    open var resizeKnobPoints: Array<dynamic /* String /* "TL" */ | String /* "TR" */ | String /* "BL" */ | String /* "BR" */ | String /* "T" */ | String /* "B" */ | String /* "R" */ | String /* "L" */ */> = definedExternally
    open var cornerResizeKnob: DrawKnob = definedExternally
    open var sideResizeKnob: DrawKnob = definedExternally
    open var resizeOutline: DrawRect = definedExternally
    open var showResizeOutline: Boolean = definedExternally
    open var useSimpleTransform: Boolean = definedExternally
    open var startKnob: DrawKnob = definedExternally
    open var endKnob: DrawKnob = definedExternally
    open var destroyed: Boolean = definedExternally
    open var destroying: Boolean = definedExternally
    open var editProxyConstructor: String = definedExternally
    open fun setPropertyValue(propertyName: String, newValue: Any): Unit = definedExternally
    open fun getZIndex(resolveToNumber: Boolean? = definedExternally /* null */): Number = definedExternally
    open fun setZIndex(newZIndex: Number): Unit = definedExternally
    open fun bringToFront(): Unit = definedExternally
    open fun sendToBack(): Unit = definedExternally
    open fun setCursor(newCursor: dynamic /* String /* "text" */ | String /* "auto" */ | String /* "move" */ | String /* "default" */ | String /* "wait" */ | String /* "hand" */ | String /* "help" */ | String /* "pointer" */ | String /* "arrow" */ | String /* "all-scroll" */ | String /* "crosshair" */ | String /* "col-resize" */ | String /* "row-resize" */ | String /* "e-resize" */ | String /* "w-resize" */ | String /* "n-resize" */ | String /* "s-resize" */ | String /* "se-resize" */ | String /* "ne-resize" */ | String /* "nw-resize" */ | String /* "sw-resize" */ | String /* "not-allowed" */ */): Unit = definedExternally
    open fun getCenter(): Point = definedExternally
    open fun getBoundingBox(): Array<Number> = definedExternally
    open fun getResizeBoundingBox(): Array<Any> = definedExternally
    open fun isInBounds(x: Number, y: Number): Boolean = definedExternally
    open fun getShapeData(): Any = definedExternally
    open fun isPointInPath(x: Number, y: Number): Boolean = definedExternally
    open fun computeAngle(px1: Number, py1: Number, px2: Number, py2: Number): Number = definedExternally
    open fun getPageLeft(): Number = definedExternally
    open fun getPageTop(): Number = definedExternally
    open fun setCanDrag(canDrag: Boolean): Unit = definedExternally
    open fun dragStart(): Boolean = definedExternally
    open fun dragMove(): Boolean = definedExternally
    open fun dragStop(): Boolean = definedExternally
    open fun mouseDown(): Boolean = definedExternally
    open fun mouseUp(): Boolean = definedExternally
    open fun click(): Boolean = definedExternally
    open fun mouseOver(): Boolean = definedExternally
    open fun mouseMove(): Boolean = definedExternally
    open fun mouseOut(): Boolean = definedExternally
    open fun showContextMenu(): Boolean = definedExternally
    open fun hover(): Boolean = definedExternally
    open fun getHoverHTML(): String = definedExternally
    open fun draw(): Unit = definedExternally
    open fun drawStart(): Unit = definedExternally
    open fun drawEnd(): Unit = definedExternally
    open fun moved(deltaX: Number, deltaY: Number): Unit = definedExternally
    open fun resized(): Unit = definedExternally
    open fun showKnobs(knobType: String /* "resize" */): Unit = definedExternally
    open fun showKnobs(knobType: String /* "move" */): Unit = definedExternally
    open fun showKnobs(knobType: String /* "startPoint" */): Unit = definedExternally
    open fun showKnobs(knobType: String /* "endPoint" */): Unit = definedExternally
    open fun showKnobs(knobType: String /* "controlPoint1" */): Unit = definedExternally
    open fun showKnobs(knobType: String /* "controlPoint2" */): Unit = definedExternally
    open fun showKnobs(knobType: String /* "rotate" */): Unit = definedExternally
    open fun showKnobs(knobType: Array<dynamic /* String /* "resize" */ | String /* "move" */ | String /* "startPoint" */ | String /* "endPoint" */ | String /* "controlPoint1" */ | String /* "controlPoint2" */ | String /* "rotate" */ */>): Unit = definedExternally
    open fun showAllKnobs(): Unit = definedExternally
    open fun hideKnobs(knobType: String /* "resize" */): Unit = definedExternally
    open fun hideKnobs(knobType: String /* "move" */): Unit = definedExternally
    open fun hideKnobs(knobType: String /* "startPoint" */): Unit = definedExternally
    open fun hideKnobs(knobType: String /* "endPoint" */): Unit = definedExternally
    open fun hideKnobs(knobType: String /* "controlPoint1" */): Unit = definedExternally
    open fun hideKnobs(knobType: String /* "controlPoint2" */): Unit = definedExternally
    open fun hideKnobs(knobType: String /* "rotate" */): Unit = definedExternally
    open fun hideKnobs(knobType: Array<dynamic /* String /* "resize" */ | String /* "move" */ | String /* "startPoint" */ | String /* "endPoint" */ | String /* "controlPoint1" */ | String /* "controlPoint2" */ | String /* "rotate" */ */>): Unit = definedExternally
    open fun hideAllKnobs(): Unit = definedExternally
    open fun setMoveKnobOffset(newMoveKnobOffset: Array<Number>? = definedExternally /* null */): Unit = definedExternally
    open fun setTitle(newTitle: String? = definedExternally /* null */): Unit = definedExternally
    open fun dragResizeMove(position: String, x: Number, y: Number, dX: Number, dY: Number): Unit = definedExternally
    open fun setDrawPane(drawPane: DrawPane): Unit = definedExternally
    open fun erase(): Unit = definedExternally
//    override fun destroy(): Unit = definedExternally
    open fun getSvgString(): Unit = definedExternally
    open fun show(): Unit = definedExternally
    open fun hide(): Unit = definedExternally
    open fun setLineWidth(width: Number): Unit = definedExternally
    open fun setLineColor(color: String): Unit = definedExternally
    open fun setLineOpacity(opacity: Number): Unit = definedExternally
    open fun setLinePattern(pattern: String /* "solid" */): Unit = definedExternally
    open fun setLinePattern(pattern: String /* "dot" */): Unit = definedExternally
    open fun setLinePattern(pattern: String /* "dash" */): Unit = definedExternally
    open fun setLinePattern(pattern: String /* "shortdot" */): Unit = definedExternally
    open fun setLinePattern(pattern: String /* "shortdash" */): Unit = definedExternally
    open fun setLinePattern(pattern: String /* "longdash" */): Unit = definedExternally
    open fun setLineCap(cap: String /* "square" */): Unit = definedExternally
    open fun setLineCap(cap: String /* "round" */): Unit = definedExternally
    open fun setLineCap(cap: String /* "butt" */): Unit = definedExternally
    open fun setShadow(shadow: Shadow): Unit = definedExternally
    open fun supportsStartArrow(): Boolean = definedExternally
    open fun setStartArrow(arrowStyle: String /* "block" */): Unit = definedExternally
    open fun setStartArrow(arrowStyle: String /* "open" */): Unit = definedExternally
    open fun supportsEndArrow(): Boolean = definedExternally
    open fun setEndArrow(arrowStyle: String /* "block" */): Unit = definedExternally
    open fun setEndArrow(arrowStyle: String /* "open" */): Unit = definedExternally
    open fun moveBy(dX: Number, dY: Number): Unit = definedExternally
    open fun moveTo(left: Number, top: Number): Unit = definedExternally
    open fun setCenterPoint(left: Number, top: Number): Unit = definedExternally
    open fun resizeBy(dX: Number, dY: Number): Unit = definedExternally
    open fun resizeTo(width: Number, height: Number): Unit = definedExternally
    open fun rotateBy(degrees: Number): Unit = definedExternally
    open fun rotateTo(degrees: Number): Unit = definedExternally
    open fun scaleBy(x: Number, y: Number): Unit = definedExternally
    open fun scaleTo(x: Number, y: Number): Unit = definedExternally
    open fun setFillColor(color: String): Unit = definedExternally
    open fun setFillGradient(gradient: Gradient): Unit = definedExternally
    open fun setFillOpacity(opacity: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DrawItem = definedExternally
        fun computeAngle(px1: Number, py1: Number, px2: Number, py2: Number): Number = definedExternally
    }
}
external open class ClassFactory {
    companion object {
        fun defineClass(className: String, superClass: Class? = definedExternally /* null */): Class = definedExternally
        fun overwriteClass(): Unit = definedExternally
        fun getClass(className: String): Class = definedExternally
        fun newInstance(className: String, props: Any? = definedExternally /* null */, props2: Any? = definedExternally /* null */, props3: Any? = definedExternally /* null */): Class = definedExternally
    }
}
external open class SectionItem : CanvasItem {
//    override var defaultValue: String = definedExternally
    open var itemIds: Array<String> = definedExternally
    open var sectionVisible: Boolean = definedExternally
    open var sectionExpanded: Boolean = definedExternally
    open var sectionHeaderClass: String = definedExternally
    open var canCollapse: Boolean = definedExternally
    open var canTabToHeader: Boolean = definedExternally
    open fun isExpanded(): Boolean = definedExternally
    open fun expandSection(): Unit = definedExternally
    open fun collapseSection(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SectionItem = definedExternally
    }
}
external open class AutoFitTextAreaItem : TextAreaItem {
    open var maxHeight: Number = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): AutoFitTextAreaItem = definedExternally
    }
}
external open class DSResponse : RPCResponse {
//    override var clientContext: Any = definedExternally
    open var dataSource: String = definedExternally
    open var operationType: dynamic /* String /* "custom" */ | String /* "fetch" */ | String /* "add" */ | String /* "update" */ | String /* "remove" */ | String /* "validate" */ | String /* "viewFile" */ | String /* "downloadFile" */ | String /* "storeTestData" */ | String /* "clientExport" */ | String /* "getFile" */ | String /* "hasFile" */ | String /* "listFiles" */ | String /* "removeFile" */ | String /* "saveFile" */ | String /* "renameFile" */ | String /* "getFileVersion" */ | String /* "hasFileVersion" */ | String /* "listFileVersions" */ | String /* "removeFileVersion" */ */ = definedExternally
    open var operationId: String = definedExternally
//    override var data: dynamic /* Array<Any?> | Any */ = definedExternally
//    override var status: Number = definedExternally
    open var queueStatus: Number = definedExternally
    open var errors: Any = definedExternally
    open var startRow: Number = definedExternally
    open var endRow: Number = definedExternally
    open var totalRows: Number = definedExternally
    open var invalidateCache: Boolean = definedExternally
    open var offlineTimestamp: Number = definedExternally
    open var fromOfflineCache: Boolean = definedExternally
//    override var httpHeaders: Any = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DSResponse = definedExternally
    }
}
external open class BatchUploader : VStack {
    open var uploadForm: DynamicForm = definedExternally
    open var uploadDataSource: DataSource = definedExternally
    open var uploadOperation: String = definedExternally
    open var uploadFormFields: Array<Any?> = definedExternally
    open var uploadFileLabel: String = definedExternally
    open var errorMessageFileIsBlank: String = definedExternally
    open var errorMessageRowsNotParsed: String = definedExternally
    open var errorMessageUnterminatedQuote: String = definedExternally
    open var errorMessageDelimiterOrEndOfLine: String = definedExternally
    open var errorMessageInputType: String = definedExternally
    open var errorMessageExcelFileDetected: String = definedExternally
    open var errorMessageUndeterminedDelimiter: String = definedExternally
    open var commitConfirmationMessage: String = definedExternally
    open var allRecordsInErrorMessage: String = definedExternally
    open var partialCommitConfirmationMessage: String = definedExternally
    open var updatesRolledBackMessage: String = definedExternally
    open var showCommitConfirmation: Boolean = definedExternally
    open var uploadButtonTitle: String = definedExternally
    open var uploadButton: IButton = definedExternally
    open var grid: ListGrid = definedExternally
    open var gridFields: Array<Any?> = definedExternally
    open var commitButton: IButton = definedExternally
    open var commitButtonTitle: String = definedExternally
    open var cancelButton: IButton = definedExternally
    open var cancelButtonTitle: String = definedExternally
    open var previousButton: IButton = definedExternally
    open var previousButtonTitle: String = definedExternally
    open var nextButton: IButton = definedExternally
    open var nextButtonTitle: String = definedExternally
    open var requestProperties: Any = definedExternally
    open var dataURL: String = definedExternally
    open var uploadFieldPrefix: String = definedExternally
    open var partialCommit: dynamic /* String /* "allow" */ | String /* "prevent" */ | String /* "prompt" */ | String /* "retain" */ */ = definedExternally
    open var partialCommitPrompt: String = definedExternally
    open var partialCommitError: String = definedExternally
    open var warnOnCancel: Boolean = definedExternally
    open var cancelConfirmMessage: String = definedExternally
    open var dataFormat: dynamic /* String /* "auto" */ | String /* "xml" */ | String /* "json" */ | String /* "csv" */ */ = definedExternally
    open var defaultDelimiter: String = definedExternally
    open var uploadDelimiter: String = definedExternally
    open var defaultQuoteString: String = definedExternally
    open var uploadQuoteString: String = definedExternally
    open var uploadEncoding: String = definedExternally
    open var displayDiscardedColumns: Boolean = definedExternally
    open var discardedColumnsMessage: String = definedExternally
    open var uploadStatusMessages: HTMLFlow = definedExternally
    open var uploadFileItem: FileItem = definedExternally
    open fun previewShown(grid: ListGrid): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): BatchUploader = definedExternally
    }
}
external open class PrintWindow : Window {
//    override var title: String = definedExternally
    open var printButtonTitle: String = definedExternally
    open var externalStylesheet: String = definedExternally
    open fun setPrintButtonTitle(printButtonTitle: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): PrintWindow = definedExternally
    }
}
external open class TestFunctionResult {
    open var failedGeneration: Boolean = definedExternally
    open var failedExecution: Boolean = definedExternally
    open var emptyTestValue: Boolean = definedExternally
    open var errorText: String = definedExternally
    open var result: String = definedExternally
    open var record: Record = definedExternally
}
external open class Callbacks : Class {
    open fun ValidationStatusCallback(errorMap: Map<Any>): Unit = definedExternally
    open fun ValidatorConditionCallback(item: FormItem, validator: Validator, value: Any, record: Any, additionalContext: Any): Boolean = definedExternally
    open fun ValidatorConditionCallback(item: DataSourceField, validator: Validator, value: Any, record: Any, additionalContext: Any): Boolean = definedExternally
    open fun ValidatorConditionCallback(item: ListGridField, validator: Validator, value: Any, record: Any, additionalContext: Any): Boolean = definedExternally
    open fun ValidatorActionCallback(result: Boolean, item: FormItem, validator: Validator, record: Record, component: DataBoundComponent): Unit = definedExternally
    open fun ValidatorActionCallback(result: Boolean, item: DataSourceField, validator: Validator, record: Record, component: DataBoundComponent): Unit = definedExternally
    open fun AnimationCallback(earlyFinish: Boolean): Unit = definedExternally
    open fun ShowSectionCallback(): Unit = definedExternally
    open fun ExpandSectionCallback(): Unit = definedExternally
    open fun HideSectionCallback(): Unit = definedExternally
    open fun CollapseSectionCallback(): Unit = definedExternally
    open fun ProcessCallback(dsResponse: DSResponse, process: Process): Unit = definedExternally
    open fun DataURLCallback(dataURL: String): Unit = definedExternally
    open fun TabIndexUpdatedCallback(ID: String): Unit = definedExternally
    open fun ShiftFocusCallback(ID: String): Boolean = definedExternally
    open fun PrintCanvasCallback(printPreview: PrintCanvas): Unit = definedExternally
    open fun MessagingCallback(data: Any): Unit = definedExternally
    open fun GetFieldValueCallback(record: Any, value: Any, field: DataSourceField, fieldName: String): Unit = definedExternally
    open fun GetFieldValueCallback(record: Any?, value: Any, field: DataSourceField, fieldName: String): Unit = definedExternally
    open fun DSCallback(dsResponse: DSResponse, data: Any, dsRequest: DSRequest): Unit = definedExternally
    open fun HasFileCallback(dsResponse: DSResponse, data: Boolean, dsRequest: DSRequest): Unit = definedExternally
    open fun CanPlayCallback(): Unit = definedExternally
    open fun PlaybackCompleteCallback(): Unit = definedExternally
    open fun HasFileVersionCallback(dsResponse: DSResponse, data: Boolean, dsRequest: DSRequest): Unit = definedExternally
    open fun GetFileCallback(dsResponse: DSResponse, data: String, dsRequest: DSRequest): Unit = definedExternally
    open fun GetFileVersionCallback(dsResponse: DSResponse, data: String, dsRequest: DSRequest): Unit = definedExternally
    open fun Function(): Unit = definedExternally
    open fun ClientOnlyDataSourceCallback(clientOnly: DataSource): Unit = definedExternally
    open fun LoadScreenCallback(screen: Canvas? = definedExternally /* null */, rpcResponse: RPCResponse? = definedExternally /* null */, suppressedGlobals: Map<Any>? = definedExternally /* null */): Unit = definedExternally
    open fun RPCCallback(response: RPCResponse, rawData: Any, request: RPCRequest): Unit = definedExternally
    open fun RPCQueueCallback(response: Array<Any?>): Unit = definedExternally
    open fun ExportImageCallback(imageData: String): Unit = definedExternally
    open fun PaletteNodeCallback(paletteNodes: Array<Any?>): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Callbacks = definedExternally
    }
}
external open class Selection : Class {
    open var selectionRangeNotLoadedMessage: String = definedExternally
    open fun isSelected(item: Any): Boolean = definedExternally
    open fun isPartiallySelected(item: Any): Boolean = definedExternally
    open fun anySelected(): Boolean = definedExternally
    open fun getLength(): Number = definedExternally
    open fun multipleSelected(): Boolean = definedExternally
    open fun getSelection(excludePartialSelections: Boolean? = definedExternally /* null */): Array<Any> = definedExternally
    open fun getSelectedRecord(): Any = definedExternally
    open fun setSelected(item: Any, newState: Boolean): Boolean = definedExternally
    open fun select(item: Any): Boolean = definedExternally
    open fun deselect(item: Any): Boolean = definedExternally
    open fun selectSingle(item: Any): Boolean = definedExternally
    open fun selectList(list: Array<Any?>): Boolean = definedExternally
    open fun deselectList(list: Array<Any?>): Boolean = definedExternally
    open fun selectAll(visibleNodesOnly: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun deselectAll(): Boolean = definedExternally
    open fun selectItem(position: Number): Boolean = definedExternally
    open fun deselectItem(position: Number): Boolean = definedExternally
    open fun selectRange(start: Number, end: Number, newState: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun deselectRange(start: Number, end: Number): Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Selection = definedExternally
        var NONE: String = definedExternally
        var SINGLE: String = definedExternally
        var MULTIPLE: String = definedExternally
        var SIMPLE: String = definedExternally
    }
}
external open class MenuEditProxy : CanvasEditProxy {
//    override fun getInlineEditText(): Unit = definedExternally
//    override fun setInlineEditText(newValue: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): MenuEditProxy = definedExternally
    }
}
external open class ServerObject {
    open var lookupStyle: dynamic /* String /* "new" */ | String /* "factory" */ | String /* "attribute" */ | String /* "spring" */ | String /* "cdi" */ */ = definedExternally
    open var className: String = definedExternally
    open var methodName: String = definedExternally
    open var ID: String = definedExternally
    open var bean: String = definedExternally
    open var attributeName: String = definedExternally
    open var attributeScope: dynamic /* String /* "request" */ | String /* "session" */ | String /* "application" */ */ = definedExternally
    open var visibleMethods: List = definedExternally
    open var dropExtraFields: Boolean = definedExternally
    open var targetXPath: String = definedExternally
    open var crudOnly: Boolean = definedExternally
}
external open class DrawOval : DrawItem {
    open var left: Number = definedExternally
    open var top: Number = definedExternally
    open var width: Number = definedExternally
    open var height: Number = definedExternally
    open var centerPoint: Point = definedExternally
    open var radius: Number = definedExternally
//    override var titleRotationMode: dynamic /* String /* "neverRotate" */ | String /* "withItem" */ | String /* "withItemAlwaysUp" */ | String /* "withLine" */ | String /* "withLineAlwaysUp" */ */ = definedExternally
//    override fun getBoundingBox(): Array<Number> = definedExternally
//    override fun setCenterPoint(left: Number, top: Number): Unit = definedExternally
//    override fun moveBy(dX: Number, dY: Number): Unit = definedExternally
//    override fun moveTo(left: Number, top: Number): Unit = definedExternally
    open fun setLeft(left: Number): Unit = definedExternally
    open fun setTop(top: Number): Unit = definedExternally
//    override fun resizeBy(dX: Number, dY: Number): Unit = definedExternally
//    override fun resizeTo(width: Number, height: Number): Unit = definedExternally
    open fun setWidth(width: Number): Unit = definedExternally
    open fun setHeight(height: Number): Unit = definedExternally
    open fun setRect(left: Number, top: Number, width: Number, height: Number): Unit = definedExternally
    open fun getRadiusX(): Number = definedExternally
    open fun getRadiusY(): Number = definedExternally
    open fun setRadii(rx: Number, ry: Number): Unit = definedExternally
    open fun setRadius(radius: Number): Unit = definedExternally
    open fun setOval(cx: Number, cy: Number, rx: Number, ry: Number): Unit = definedExternally
//    override fun getCenter(): Point = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DrawOval = definedExternally
    }
}
external open class DOMElement
external open class FontLoader : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): FontLoader = definedExternally
        fun isLoadingComplete(): Boolean = definedExternally
    }
}
external open class Tree : Class, List {
    open var modelType: dynamic /* String /* "parent" */ | String /* "children" */ */ = definedExternally
    open var isFolderProperty: String = definedExternally
    open var defaultIsFolder: Boolean = definedExternally
    open var reportCollisions: Boolean = definedExternally
    open var pathDelim: String = definedExternally
    open var nameProperty: String = definedExternally
    open var titleProperty: String = definedExternally
    open var idField: String = definedExternally
    open var parentIdField: String = definedExternally
    open var childrenProperty: String = definedExternally
    open var openProperty: String = definedExternally
    open var data: Array<Any?> = definedExternally
    open var rootValue: dynamic /* String | Number */ = definedExternally
    open var root: TreeNode = definedExternally
    open var discardParentlessNodes: Boolean = definedExternally
    open var showRoot: Boolean = definedExternally
    open var autoOpenRoot: Boolean = definedExternally
    open var separateFolders: Boolean = definedExternally
    open var sortFoldersBeforeLeaves: Boolean = definedExternally
    open var defaultNodeTitle: String = definedExternally
    open fun isRoot(node: TreeNode): Boolean = definedExternally
    open fun linkNodes(nodes: Array<Any?>): Unit = definedExternally
    open fun getRoot(): TreeNode = definedExternally
    open fun setRoot(newRoot: TreeNode, autoOpen: Boolean): Unit = definedExternally
    open fun getName(node: TreeNode): String = definedExternally
    open fun getTitle(node: TreeNode): String = definedExternally
    open fun getPath(node: TreeNode): String = definedExternally
    open fun getParentPath(node: TreeNode): String = definedExternally
    open fun getParent(node: TreeNode): Node = definedExternally
    open fun getParents(node: TreeNode): Array<Any> = definedExternally
    open fun getLevel(node: TreeNode): Number = definedExternally
    open fun isFolder(node: TreeNode): Boolean = definedExternally
    open fun isLeaf(node: TreeNode): Boolean = definedExternally
    open fun findById(id: String): Any = definedExternally
    open fun find(fieldNameOrPath: String, value: Any? = definedExternally /* null */): Any = definedExternally
//    override fun findIndex(propertyName: String, value: Any?): Number = definedExternally
//    override fun findIndex(propertyName: Any?, value: Any?): Number = definedExternally
//    override fun findIndex(propertyName: AdvancedCriteria, value: Any?): Number = definedExternally
    open fun findNodeIndex(propertyName: String, value: Any? = definedExternally /* null */): Number = definedExternally
    open fun findNodeIndex(propertyName: Any?, value: Any? = definedExternally /* null */): Number = definedExternally
    open fun findNodeIndex(propertyName: AdvancedCriteria, value: Any? = definedExternally /* null */): Number = definedExternally
//    override fun findNextIndex(startIndex: Number, propertyName: String, value: Any?, endIndex: Number?): Number = definedExternally
//    override fun findNextIndex(startIndex: Number, propertyName: Any?, value: Any?, endIndex: Number?): Number = definedExternally
//    override fun findNextIndex(startIndex: Number, propertyName: Function<*>, value: Any?, endIndex: Number?): Number = definedExternally
//    override fun findNextIndex(startIndex: Number, propertyName: AdvancedCriteria, value: Any?, endIndex: Number?): Number = definedExternally
    open fun findNextNodeIndex(startIndex: Number, propertyName: String, value: Any? = definedExternally /* null */, endIndex: Number? = definedExternally /* null */): Number = definedExternally
    open fun findNextNodeIndex(startIndex: Number, propertyName: Any?, value: Any? = definedExternally /* null */, endIndex: Number? = definedExternally /* null */): Number = definedExternally
    open fun findNextNodeIndex(startIndex: Number, propertyName: Function<*>, value: Any? = definedExternally /* null */, endIndex: Number? = definedExternally /* null */): Number = definedExternally
    open fun findNextNodeIndex(startIndex: Number, propertyName: AdvancedCriteria, value: Any? = definedExternally /* null */, endIndex: Number? = definedExternally /* null */): Number = definedExternally
    open fun getChildren(node: TreeNode): Array<Any?> = definedExternally
    open fun getChildrenResultSet(node: TreeNode): ResultSet = definedExternally
    open fun getFolders(node: TreeNode): List = definedExternally
    open fun getLeaves(node: TreeNode): List = definedExternally
    open fun hasChildren(node: TreeNode): Boolean = definedExternally
    open fun hasFolders(node: TreeNode): Boolean = definedExternally
    open fun hasLeaves(node: TreeNode): Boolean = definedExternally
    open fun isDescendantOf(child: TreeNode, parent: TreeNode): Boolean = definedExternally
    open fun getDescendants(node: TreeNode? = definedExternally /* null */): List = definedExternally
    open fun getDescendantFolders(node: TreeNode? = definedExternally /* null */): List = definedExternally
    open fun getDescendantLeaves(node: TreeNode? = definedExternally /* null */): List = definedExternally
//    override fun dataChanged(): Unit = definedExternally
    open fun add(node: TreeNode, parent: String, position: Number? = definedExternally /* null */): TreeNode = definedExternally
    open fun add(node: TreeNode, parent: TreeNode, position: Number? = definedExternally /* null */): TreeNode = definedExternally
    open fun addList(nodeList: Array<Any?>, parent: String, position: Number? = definedExternally /* null */): List = definedExternally
    open fun addList(nodeList: Array<Any?>, parent: TreeNode, position: Number? = definedExternally /* null */): List = definedExternally
    open fun move(node: TreeNode, newParent: TreeNode, position: Number? = definedExternally /* null */): Unit = definedExternally
    open fun remove(node: TreeNode): Boolean = definedExternally
    open fun removeList(nodeList: Array<Any?>): Boolean = definedExternally
    open fun getLoadState(node: TreeNode): dynamic /* String /* "unloaded" */ | String /* "loading" */ | String /* "foldersLoaded" */ | String /* "loaded" */ | String /* "loadedPartialChildren" */ */ = definedExternally
    open fun isLoaded(node: TreeNode): Boolean = definedExternally
    open fun allChildrenLoaded(node: TreeNode): Boolean = definedExternally
    open fun loadChildren(node: TreeNode, callback: Any? = definedExternally /* null */): Unit = definedExternally
    open fun unloadChildren(node: TreeNode): Unit = definedExternally
    open fun reloadChildren(node: TreeNode): Unit = definedExternally
    open fun removeChildren(node: TreeNode): Unit = definedExternally
    open fun setChildren(parent: TreeNode, newChildren: Array<Any?>): Unit = definedExternally
    open fun isOpen(node: TreeNode): Boolean = definedExternally
    open fun openFolder(node: TreeNode, callback: Any? = definedExternally /* null */): Unit = definedExternally
    open fun openFolders(nodeList: Array<Any?>): Unit = definedExternally
    open fun closeFolder(node: TreeNode): Unit = definedExternally
    open fun closeFolders(nodeList: Array<Any?>): Unit = definedExternally
    open fun openAll(node: TreeNode? = definedExternally /* null */): Unit = definedExternally
    open fun closeAll(node: TreeNode? = definedExternally /* null */): Unit = definedExternally
    open fun setShowRoot(showRoot: Boolean): Unit = definedExternally
    open fun setSeparateFolders(separateFolders: Boolean): Unit = definedExternally
    open fun setSortFoldersBeforeLeaves(sortFoldersBeforeLeaves: Boolean): Unit = definedExternally
    open fun getOpenList(node: TreeNode? = definedExternally /* null */): Array<Any?> = definedExternally
    open fun getAllNodes(node: TreeNode? = definedExternally /* null */): Array<Any?> = definedExternally
//    override fun getLength(): Number = definedExternally
//    override fun indexOf(obj: Any, pos: Number?, endPos: Number?): Number = definedExternally
//    override fun lastIndexOf(obj: Any, pos: Number?, endPos: Number?): Number = definedExternally
    open fun getFilteredTree(criteria: Any?, filterMode: String? /* "strict" */ = definedExternally /* null */, dataSource: DataSource? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Tree = definedExternally
    open fun getFilteredTree(criteria: Any?, filterMode: String? /* "keepParents" */ = definedExternally /* null */, dataSource: DataSource? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Tree = definedExternally
    open fun getFilteredTree(criteria: AdvancedCriteria, filterMode: String? /* "strict" */ = definedExternally /* null */, dataSource: DataSource? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Tree = definedExternally
    open fun getFilteredTree(criteria: AdvancedCriteria, filterMode: String? /* "keepParents" */ = definedExternally /* null */, dataSource: DataSource? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Tree = definedExternally
//    override fun get(pos: Number): Any = definedExternally
//    override fun isEmpty(): Boolean = definedExternally
//    override fun first(): Any = definedExternally
//    override fun last(): Any = definedExternally
//    override fun findAll(propertyName: String, value: Any?): Array<Any> = definedExternally
//    override fun findAll(propertyName: Any?, value: Any?): Array<Any> = definedExternally
//    override fun findAll(propertyName: AdvancedCriteria, value: Any?): Array<Any> = definedExternally
//    override fun contains(obj: Any, pos: Number?): Boolean = definedExternally
//    override fun containsAll(list: List): Boolean = definedExternally
//    override fun intersect(lists: Any): List = definedExternally
//    override fun equals(list: List): Boolean = definedExternally
//    override fun getItems(itemList: Array<Number>): Array<Any> = definedExternally
//    override fun getRange(start: Number, end: Number): Array<Any> = definedExternally
//    override fun duplicate(): Array<Any> = definedExternally
//    override fun set(pos: Number, obj: Any): Any = definedExternally
//    override fun addAt(obj: Any, pos: Number): Any = definedExternally
//    override fun removeAt(pos: Number): Any = definedExternally
//    override fun setLength(length: Number): Unit = definedExternally
//    override fun addListAt(list: Array<Any>, pos: Number): Array<Any> = definedExternally
//    override fun sort(comparator: Function<*>?): List = definedExternally
//    override fun getProperty(property: String): Array<Any> = definedExternally
//    override fun sortByProperty(property: String, up: Boolean, normalizer: Any?, context: Any?): List = definedExternally
//    override fun sortByProperty(property: String, up: Boolean, normalizer: Function<*>?, context: Any?): List = definedExternally
//    override fun getValueMap(idField: String, displayField: String): Any = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Tree = definedExternally
        var UNLOADED: String = definedExternally
        var LOADING: String = definedExternally
        var FOLDERS_LOADED: String = definedExternally
        var LOADED: String = definedExternally
        var LOADED_PARTIAL_CHILDREN: String = definedExternally
        fun findChildrenProperty(node: TreeNode, mode: String /* "object" */): String = definedExternally
        fun findChildrenProperty(node: TreeNode, mode: String /* "any" */): String = definedExternally
        fun findChildrenProperty(node: TreeNode, mode: String /* "array" */): String = definedExternally
        fun findChildrenProperty(node: TreeNode, mode: String /* "objectArray" */): String = definedExternally
        fun discoverTree(nodes: Array<Any?>, settings: DiscoverTreeSettings, parentChildrenField: String): Unit = definedExternally
    }
    open fun getFilteredTree(criteria: Any?): Tree = definedExternally
    open fun getFilteredTree(criteria: AdvancedCriteria): Tree = definedExternally
//    override fun sortByProperty(property: String, up: Boolean): List = definedExternally
}
external open class MiniNavControl : StretchImgButton {
//    override var skinImgDir: String = definedExternally
    open var upButtonSrc: String = definedExternally
    open var downButtonSrc: String = definedExternally
    open fun upClick(): Unit = definedExternally
    open fun downClick(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): MiniNavControl = definedExternally
    }
}
external open class JSSyntaxHiliter : SyntaxHiliter {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): JSSyntaxHiliter = definedExternally
    }
}
external open class RestDataSource : DataSource {
//    override var dataProtocol: dynamic /* String /* "getParams" */ | String /* "postParams" */ | String /* "postXML" */ | String /* "soap" */ | String /* "postMessage" */ | String /* "clientCustom" */ */ = definedExternally
//    override var dataFormat: dynamic /* String /* "custom" */ | String /* "xml" */ | String /* "json" */ | String /* "iscServer" */ */ = definedExternally
    open var xmlRecordXPath: String = definedExternally
//    override var xmlNamespaces: Any = definedExternally
    open var jsonRecordXPath: String = definedExternally
//    override var recordXPath: String = definedExternally
    open var prettyPrintJSON: Boolean = definedExternally
    open var disableQueuing: Boolean = definedExternally
//    override var jsonPrefix: String = definedExternally
//    override var jsonSuffix: String = definedExternally
//    override var operationBindings: Array<Any?> = definedExternally
//    override var dataURL: String = definedExternally
    open var fetchDataURL: String = definedExternally
    open var updateDataURL: String = definedExternally
    open var addDataURL: String = definedExternally
    open var removeDataURL: String = definedExternally
    open var sendMetaData: Boolean = definedExternally
    open var metaDataPrefix: String = definedExternally
    open fun transformRequest(): Unit = definedExternally
//    override fun transformResponse(dsResponse: DSResponse, dsRequest: DSRequest, data: Any?): DSResponse = definedExternally
//    override fun transformResponse(dsResponse: DSResponse, dsRequest: DSRequest, data: JSON): DSResponse = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): RestDataSource = definedExternally
    }
}
external open class DrawItemEditProxy : EditProxy {
//    override fun getInlineEditText(): Unit = definedExternally
//    override fun setInlineEditText(newValue: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DrawItemEditProxy = definedExternally
    }
}
external open class StaticTextItem : FormItem {
//    override var applyHeightToTextBox: Boolean = definedExternally
//    override var applyAlignToText: Boolean = definedExternally
    open var wrap: Boolean = definedExternally
    open var clipValue: Boolean = definedExternally
//    override var textBoxStyle: String = definedExternally
//    override var canSelectText: Boolean = definedExternally
    open var outputAsHTML: Boolean = definedExternally
//    override var dateFormatter: dynamic /* String /* "toString" */ | String /* "toLocaleString" */ | String /* "toUSShortDate" */ | String /* "toUSShortDatetime" */ | String /* "toEuropeanShortDate" */ | String /* "toEuropeanShortDatetime" */ | String /* "toJapanShortDate" */ | String /* "toJapanShortDatetime" */ | String /* "toSerializeableDate" */ | String /* "toDateStamp" */ */ = definedExternally
    open var escapeHTML: Boolean = definedExternally
//    override var editProxyConstructor: String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): StaticTextItem = definedExternally
    }
}
external open class ImgTab : StretchImgButton {
//    override var capSize: Number = definedExternally
//    override var skinImgDir: String = definedExternally
//    override var labelSkinImgDir: String = definedExternally
//    override var baseStyle: String = definedExternally
//    override var titleStyle: String = definedExternally
//    override var src: String = definedExternally
//    override var showRollOver: Boolean = definedExternally
//    override var showFocus: Boolean = definedExternally
//    override var showFocused: Boolean = definedExternally
//    override var align: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ImgTab = definedExternally
    }
}
external open class MenuBar : Toolbar {
//    override var editProxyConstructor: String = definedExternally
    open var menus: Array<Any?> = definedExternally
//    override var tabIndex: Number = definedExternally
//    override fun setButtons(newButtons: Array<Any?>?): Unit = definedExternally
    open fun setMenus(menus: Array<Any?>): Unit = definedExternally
    open fun addMenus(newMenus: Array<Any>, position: Number): Unit = definedExternally
    open fun removeMenus(menus: Array<Any>): Unit = definedExternally
    open fun showMenu(menu: Number): Unit = definedExternally
    open fun showMenu(menu: Menu): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): MenuBar = definedExternally
    }
}
external open class IMenuButton : MenuButton {
//    override var title: String = definedExternally
//    override var height: dynamic /* String | Number */ = definedExternally
//    override var showMenuButtonImage: Boolean = definedExternally
//    override var menuButtonImage: String = definedExternally
//    override var menuButtonImageUp: String = definedExternally
//    override var hiliteAccessKey: Boolean = definedExternally
//    override var showMenuBelow: Boolean = definedExternally
//    override var menuAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
//    override var menu: Menu = definedExternally
//    override var menuAnimationEffect: String = definedExternally
//    override var autoDestroyMenu: Boolean = definedExternally
//    override fun setShowMenuButtonImage(show: Boolean): Unit = definedExternally
//    override fun setShowMenuBelow(below: Boolean): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): IMenuButton = definedExternally
    }
}
external open class NavigationBarViewState {
    open var showLeftButton: Boolean = definedExternally
    open var leftButtonTitle: String = definedExternally
    open var shortLeftButtonTitle: String = definedExternally
    open var alwaysShowLeftButtonTitle: Boolean = definedExternally
    open var title: String = definedExternally
    open var controls: dynamic /* Array<String> | Array<Any?> */ = definedExternally
}
external open class Messaging : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Messaging = definedExternally
        var messagingURL: String = definedExternally
        var websocketURL: String = definedExternally
        var useWebSocket: Boolean = definedExternally
        var websocketConnectTimeout: Number = definedExternally
        var connectTimeout: Number = definedExternally
        fun send(channels: String, data: Any, callback: (response: RPCResponse, rawData: Any, request: RPCRequest) -> Unit): Unit = definedExternally
        fun send(channels: Array<String>, data: Any, callback: (response: RPCResponse, rawData: Any, request: RPCRequest) -> Unit): Unit = definedExternally
        fun getSubscribedChannels(): Array<String> = definedExternally
        fun subscribe(channel: String, callback: (data: Any) -> Unit, subscribeCallback: Any?, selector: String? = definedExternally /* null */): Unit = definedExternally
        fun unsubscribe(channel: String): Unit = definedExternally
        fun connected(): Boolean = definedExternally
        fun disconnect(): Unit = definedExternally
        fun connectionUp(): Unit = definedExternally
        fun connectionDown(): Unit = definedExternally
    }
}
external open class Calendar : Canvas, DataBoundComponent {
    open var chosenDate: Date = definedExternally
    open var firstDayOfWeek: Number = definedExternally
    open var baseStyle: String = definedExternally
    open var dayHeaderBaseStyle: String = definedExternally
    open var dayBodyBaseStyle: String = definedExternally
    open var otherDayHeaderBaseStyle: String = definedExternally
    open var otherDayBodyBaseStyle: String = definedExternally
    open var otherDayBlankStyle: String = definedExternally
    open var minimumDayHeight: Number = definedExternally
    open var selectedCellStyle: String = definedExternally
    open var eventWindowStyle: String = definedExternally
    open var eventStyleName: String = definedExternally
    open var calMonthEventLinkStyle: String = definedExternally
    open var workdayBaseStyle: String = definedExternally
    open var workdayStart: Time = definedExternally
    open var workdayEnd: Time = definedExternally
    open var showWorkday: Boolean = definedExternally
    open var workdays: Array<Any> = definedExternally
    open var scrollToWorkday: Boolean = definedExternally
    open var minutesPerRow: Number = definedExternally
    open var rowTitleFrequency: Number = definedExternally
    open var nameField: String = definedExternally
//    override var descriptionField: String = definedExternally
    open var startDateField: String = definedExternally
    open var endDateField: String = definedExternally
    open var durationField: String = definedExternally
    open var durationUnitField: String = definedExternally
    open var laneNameField: String = definedExternally
    open var hideUnusedLanes: Boolean = definedExternally
    open var useSublanes: Boolean = definedExternally
    open var sublaneNameField: String = definedExternally
    open var leadingDateField: String = definedExternally
    open var trailingDateField: String = definedExternally
    open var eventWindowStyleField: String = definedExternally
    open var eventStyleNameField: String = definedExternally
    open var canEditField: String = definedExternally
    open var canEditLaneField: String = definedExternally
    open var canEditSublaneField: String = definedExternally
    open var canRemoveField: String = definedExternally
    open var canDragEventField: String = definedExternally
    open var canResizeEventField: String = definedExternally
    open var allowDurationEvents: Boolean = definedExternally
    open var laneEventPadding: Number = definedExternally
    open var eventDragGap: Number = definedExternally
    open var weekEventBorderOverlap: Boolean = definedExternally
    open var headerLevels: Array<Any?> = definedExternally
    open var eventSnapGap: Number = definedExternally
    open var showQuickEventDialog: Boolean = definedExternally
    open var eventEditorFields: Array<Any?> = definedExternally
    open var eventDialogFields: Array<Any?> = definedExternally
    open var canCreateEvents: Boolean = definedExternally
    open var canEditEvents: Boolean = definedExternally
    open var canDeleteEvents: Boolean = definedExternally
    open var canRemoveEvents: Boolean = definedExternally
    open var canDragEvents: Boolean = definedExternally
    open var canResizeEvents: Boolean = definedExternally
    open var showDateChooser: Boolean = definedExternally
    open var disableWeekends: Boolean = definedExternally
    open var weekendDays: Array<Number> = definedExternally
    open var showWeekends: Boolean = definedExternally
    open var showDayHeaders: Boolean = definedExternally
    open var showOtherDays: Boolean = definedExternally
    open var selectChosenDate: Boolean = definedExternally
    open var eventAutoArrange: Boolean = definedExternally
    open var bringEventsToFront: Boolean = definedExternally
    open var eventOverlap: Boolean = definedExternally
    open var eventOverlapPercent: Number = definedExternally
    open var eventOverlapIdenticalStartTimes: Boolean = definedExternally
    open var minimalUI: Boolean = definedExternally
    open var canDragCreateEvents: Boolean = definedExternally
    open var mainView: TabSet = definedExternally
    open var dayView: CalendarView = definedExternally
    open var weekView: CalendarView = definedExternally
    open var monthView: CalendarView = definedExternally
    open var dateChooser: DateChooser = definedExternally
    open var alternateLaneStyles: Boolean = definedExternally
    open var showLaneRollOver: Boolean = definedExternally
    open var data: Array<Any?> = definedExternally
//    override var dataSource: dynamic /* String | DataSource */ = definedExternally
//    override var autoFetchData: Boolean = definedExternally
    open var autoFetchTextMatchStyle: dynamic /* String /* "startsWith" */ | String /* "exact" */ | String /* "exactCase" */ | String /* "substring" */ */ = definedExternally
//    override var initialCriteria: Any? = definedExternally
//    override var showDetailFields: Boolean = definedExternally
//    override var dataFetchMode: dynamic /* String /* "basic" */ | String /* "paged" */ | String /* "local" */ */ = definedExternally
    open var showTimelineView: Boolean = definedExternally
    open var timelineView: CalendarView = definedExternally
    open var renderEventsOnDemand: Boolean = definedExternally
    open var timelineGranularity: dynamic /* String /* "millisecond" */ | String /* "second" */ | String /* "minute" */ | String /* "hour" */ | String /* "day" */ | String /* "week" */ | String /* "month" */ | String /* "quarter" */ | String /* "year" */ */ = definedExternally
    open var timelineUnitsPerColumn: Number = definedExternally
    open var canResizeTimelineEvents: Boolean = definedExternally
    open var canEditLane: Boolean = definedExternally
    open var canEditSublane: Boolean = definedExternally
    open var canReorderLanes: Boolean = definedExternally
    open var startDate: Date = definedExternally
    open var defaultTimelineColumnSpan: Number = definedExternally
    open var columnsPerPage: Number = definedExternally
    open var endDate: Date = definedExternally
    open var weekPrefix: String = definedExternally
    open var dateEditingStyle: dynamic /* String /* "date" */ | String /* "time" */ | String /* "datetime" */ */ = definedExternally
    open var canGroupLanes: Boolean = definedExternally
    open var laneGroupByField: dynamic /* String | Array<String> */ = definedExternally
    open var laneGroupStartOpen: dynamic /* Array<Any> | String /* "none" */ | String /* "first" */ | String /* "all" */ */ = definedExternally
    open var lanes: Array<Any?> = definedExternally
    open var laneFields: Array<Any?> = definedExternally
    open var showDayLanes: Boolean = definedExternally
    open var minLaneWidth: Number = definedExternally
    open var overlapSortSpecifiers: Array<Any?> = definedExternally
    open var todayBackgroundColor: String = definedExternally
    open var showEventDescriptions: Boolean = definedExternally
    open var showEventHeaders: Boolean = definedExternally
    open var eventHeaderWrap: Boolean = definedExternally
    open var eventHeaderHeight: Number = definedExternally
    open var sizeEventsToGrid: Boolean = definedExternally
    open var dayViewTitle: String = definedExternally
    open var weekViewTitle: String = definedExternally
    open var monthViewTitle: String = definedExternally
    open var timelineViewTitle: String = definedExternally
    open var eventNameFieldTitle: String = definedExternally
    open var eventStartDateFieldTitle: String = definedExternally
    open var eventEndDateFieldTitle: String = definedExternally
    open var eventDescriptionFieldTitle: String = definedExternally
    open var eventLaneFieldTitle: String = definedExternally
    open var eventSublaneFieldTitle: String = definedExternally
    open var eventDurationFieldTitle: String = definedExternally
    open var eventDurationUnitFieldTitle: String = definedExternally
    open var saveButtonTitle: String = definedExternally
    open var detailsButtonTitle: String = definedExternally
    open var removeButtonTitle: String = definedExternally
    open var cancelButtonTitle: String = definedExternally
    open var monthButtonTitle: String = definedExternally
    open var monthMoreEventsLinkTitle: String = definedExternally
    open var backButtonTitle: String = definedExternally
    open var previousButtonHoverText: String = definedExternally
    open var nextButtonHoverText: String = definedExternally
    open var addEventButtonHoverText: String = definedExternally
    open var datePickerHoverText: String = definedExternally
    open var invalidDateMessage: String = definedExternally
    open var eventDialog: Window = definedExternally
    open var eventEditorLayout: Window = definedExternally
    open var eventEditor: DynamicForm = definedExternally
    open var eventEditorButtonLayout: HLayout = definedExternally
    open var saveButton: IButton = definedExternally
    open var removeButton: IButton = definedExternally
    open var cancelButton: IButton = definedExternally
    open var showAddEventButton: Boolean = definedExternally
    open var addEventButton: ImgButton = definedExternally
    open var showDatePickerButton: Boolean = definedExternally
    open var datePickerButton: ImgButton = definedExternally
    open var showControlsBar: Boolean = definedExternally
    open var controlsBar: HLayout = definedExternally
    open var showMonthButton: Boolean = definedExternally
    open var monthButton: NavigationButton = definedExternally
    open var showPreviousButton: Boolean = definedExternally
    open var previousButton: ImgButton = definedExternally
    open var showNextButton: Boolean = definedExternally
    open var nextButton: ImgButton = definedExternally
    open var dateLabel: Label = definedExternally
    open var rowHeight: Number = definedExternally
    open var currentViewName: dynamic /* String /* "day" */ | String /* "week" */ | String /* "month" */ | String /* "timeline" */ */ = definedExternally
    open var twentyFourHourTime: Boolean = definedExternally
    open var dateFormatter: dynamic /* String /* "toString" */ | String /* "toLocaleString" */ | String /* "toUSShortDate" */ | String /* "toUSShortDatetime" */ | String /* "toEuropeanShortDate" */ | String /* "toEuropeanShortDatetime" */ | String /* "toJapanShortDate" */ | String /* "toJapanShortDatetime" */ | String /* "toSerializeableDate" */ | String /* "toDateStamp" */ */ = definedExternally
    open var timeFormatter: dynamic /* String /* "toTime" */ | String /* "to24HourTime" */ | String /* "toPaddedTime" */ | String /* "toPadded24HourTime" */ | String /* "toShortTime" */ | String /* "toShort24HourTime" */ | String /* "toShortPaddedTime" */ | String /* "toShortPadded24HourTime" */ */ = definedExternally
    open var showIndicatorsInFront: Boolean = definedExternally
    open var showCellHovers: Boolean = definedExternally
    open var showHeaderHovers: Boolean = definedExternally
    open var showViewHovers: Boolean = definedExternally
    open var showEventHovers: Boolean = definedExternally
    open var showZoneHovers: Boolean = definedExternally
    open var showLaneFieldHovers: Boolean = definedExternally
    open var showDragHovers: Boolean = definedExternally
    open var eventCanvasContextMenu: Menu = definedExternally
    open var useEventCanvasRolloverControls: Boolean = definedExternally
    open var canSelectEvents: Boolean = definedExternally
    open var selectionManager: Selection = definedExternally
    open var eventCanvasGripper: Img = definedExternally
    open var eventCanvasGripperIcon: String = definedExternally
    open var eventCanvasLabel: Label = definedExternally
    open var eventCanvasButtonLayout: HLayout = definedExternally
    open var eventCanvasCloseButton: ImgButton = definedExternally
    open var eventCanvasContextButton: ImgButton = definedExternally
    open var eventCanvasVResizer: Img = definedExternally
    open var eventCanvasHResizer: Img = definedExternally
    open var showZones: Boolean = definedExternally
    open var zones: Array<Any?> = definedExternally
    open var zoneStyleName: String = definedExternally
    open var zoneCanvas: ZoneCanvas = definedExternally
    open var zoneTitleOrientation: dynamic /* String /* "top" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
    open var showIndicators: Boolean = definedExternally
    open var indicators: Array<Any?> = definedExternally
    open var indicatorStyleName: String = definedExternally
    open var indicatorCanvas: IndicatorCanvas = definedExternally
    open var eventWindow: EventWindow = definedExternally
    open var eventCanvas: EventCanvas = definedExternally
    open var monthMoreEventsMenu: Menu = definedExternally
    open fun scrollToTime(time: String): Unit = definedExternally
    open fun moveToEvent(event: CalendarEvent): Unit = definedExternally
    open fun setHeaderLevels(headerLevels: Array<Any?>): Unit = definedExternally
    open fun shouldDisableDate(date: Date, view: CalendarView? = definedExternally /* null */): Boolean = definedExternally
    open fun shouldShowDate(date: Date, view: CalendarView? = definedExternally /* null */): Boolean = definedExternally
    open fun shouldShowLane(lane: String, view: CalendarView? = definedExternally /* null */): Boolean = definedExternally
    open fun shouldShowLane(lane: Lane, view: CalendarView? = definedExternally /* null */): Boolean = definedExternally
    open fun shouldShowEvent(event: CalendarEvent, view: CalendarView? = definedExternally /* null */): Boolean = definedExternally
    open fun getWorkdayStart(date: Date, laneName: String? = definedExternally /* null */): String = definedExternally
    open fun getWorkdayEnd(date: Date, laneName: String? = definedExternally /* null */): String = definedExternally
    open fun getVisibleStartDate(view: CalendarView? = definedExternally /* null */): Date = definedExternally
    open fun getVisibleEndDate(view: CalendarView? = definedExternally /* null */): Date = definedExternally
    open fun getPeriodStartDate(view: CalendarView? = definedExternally /* null */): Date = definedExternally
    open fun getPeriodEndDate(view: CalendarView? = definedExternally /* null */): Date = definedExternally
    open fun fetchData(criteria: Any? = definedExternally /* null */, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun filterData(criteria: Any? = definedExternally /* null */, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun groupLanesBy(groupFieldName: String): Unit = definedExternally
    open fun groupLanesBy(groupFieldName: Array<String>): Unit = definedExternally
    open fun setLanes(lanes: Array<Any?>): Unit = definedExternally
    open fun addLane(lane: Lane): Unit = definedExternally
    open fun removeLane(lane: String): Unit = definedExternally
    open fun removeLane(lane: Lane): Unit = definedExternally
    open fun setShowDayLanes(showDayLanes: Boolean): Unit = definedExternally
    open fun eventsRendered(): Unit = definedExternally
    open fun setData(newData: Array<Any?>): Unit = definedExternally
    open fun getSelectedView(): CalendarView = definedExternally
    open fun getView(viewName: String /* "day" */): CalendarView = definedExternally
    open fun getView(viewName: String /* "week" */): CalendarView = definedExternally
    open fun getView(viewName: String /* "month" */): CalendarView = definedExternally
    open fun getView(viewName: String /* "timeline" */): CalendarView = definedExternally
    open fun getCurrentViewName(): dynamic /* String /* "day" */ | String /* "week" */ | String /* "month" */ | String /* "timeline" */ */ = definedExternally
    open fun setCurrentViewName(viewName: String /* "day" */): dynamic /* String /* "day" */ | String /* "week" */ | String /* "month" */ | String /* "timeline" */ */ = definedExternally
    open fun setCurrentViewName(viewName: String /* "week" */): dynamic /* String /* "day" */ | String /* "week" */ | String /* "month" */ | String /* "timeline" */ */ = definedExternally
    open fun setCurrentViewName(viewName: String /* "month" */): dynamic /* String /* "day" */ | String /* "week" */ | String /* "month" */ | String /* "timeline" */ */ = definedExternally
    open fun setCurrentViewName(viewName: String /* "timeline" */): dynamic /* String /* "day" */ | String /* "week" */ | String /* "month" */ | String /* "timeline" */ */ = definedExternally
    open fun getEventHeaderHTML(event: CalendarEvent, view: CalendarView? = definedExternally /* null */): String = definedExternally
    open fun getEventBodyHTML(event: CalendarEvent, view: CalendarView? = definedExternally /* null */): String = definedExternally
    open fun getEventStartDate(event: CalendarEvent): Date = definedExternally
    open fun getEventEndDate(event: CalendarEvent): Date = definedExternally
    open fun setShowWeekends(showWeekends: Boolean): Unit = definedExternally
    open fun addLaneEvent(laneName: Lane, startDate: Any?, endDate: Date? = definedExternally /* null */, name: String? = definedExternally /* null */, description: String? = definedExternally /* null */, otherFields: Any? = definedExternally /* null */): Unit = definedExternally
    open fun addLaneEvent(laneName: Lane, startDate: Date, endDate: Date? = definedExternally /* null */, name: String? = definedExternally /* null */, description: String? = definedExternally /* null */, otherFields: Any? = definedExternally /* null */): Unit = definedExternally
    open fun addEvent(startDate: CalendarEvent, endDate: Date? = definedExternally /* null */, name: String? = definedExternally /* null */, description: String? = definedExternally /* null */, otherFields: Any? = definedExternally /* null */): Unit = definedExternally
    open fun addEvent(startDate: Date, endDate: Date? = definedExternally /* null */, name: String? = definedExternally /* null */, description: String? = definedExternally /* null */, otherFields: Any? = definedExternally /* null */): Unit = definedExternally
    open fun addCalendarEvent(event: CalendarEvent, customValues: Any? = definedExternally /* null */): Unit = definedExternally
    open fun removeEvent(event: CalendarEvent): Unit = definedExternally
    open fun updateEvent(event: CalendarEvent, startDate: Date, endDate: Date, name: String, description: String, otherFields: Any): Unit = definedExternally
    open fun updateCalendarEvent(event: CalendarEvent, newEvent: CalendarEvent, otherFields: Any): Unit = definedExternally
    open fun refreshEvent(event: CalendarEvent): Unit = definedExternally
    open fun setEventStyle(event: CalendarEvent, styleName: String): Unit = definedExternally
    open fun getEventHoverHTML(event: CalendarEvent, eventCanvas: EventCanvas, view: CalendarView, defaultValue: String? = definedExternally /* null */): String = definedExternally
    open fun getZoneHoverHTML(zone: CalendarEvent, zoneCanvas: ZoneCanvas, view: CalendarView, defaultValue: String): String = definedExternally
    open fun getIndicatorHoverHTML(indicator: CalendarEvent, indicatorCanvas: IndicatorCanvas, view: CalendarView, defaultValue: String): String = definedExternally
    open fun getCellHoverHTML(view: CalendarView, record: Record, rowNum: Number, colNum: Number, date: Date, defaultValue: String): String = definedExternally
    open fun getHeaderHoverHTML(view: CalendarView, headerLevel: HeaderLevel, startDate: Date, endDate: Date, defaultValue: String): String = definedExternally
    open fun setShowViewHovers(showViewHovers: Boolean): Unit = definedExternally
    open fun getDragHoverHTML(view: CalendarView, event: CalendarEvent, defaultValue: String): String = definedExternally
    open fun getEventCanvasStyle(event: CalendarEvent, view: CalendarView? = definedExternally /* null */): String = definedExternally
    open fun getEventCanvasMenuItems(canvas: EventCanvas): Array<Any?> = definedExternally
    open fun selectSingleEvent(event: CalendarEvent): Boolean = definedExternally
    open fun selectEvent(event: CalendarEvent): Boolean = definedExternally
    open fun selectEvents(events: Array<Any?>): Boolean = definedExternally
    open fun deselectEvent(event: CalendarEvent): Boolean = definedExternally
    open fun deselectEvents(events: Array<Any?>): Boolean = definedExternally
    open fun getSelectedEvent(): CalendarEvent = definedExternally
    open fun getSelectedEvents(): Array<Any?> = definedExternally
    open fun getEventCanvasGripperIcon(canvas: EventCanvas): String = definedExternally
    open fun setZones(zones: Array<Any?>): Unit = definedExternally
    open fun addZone(zone: CalendarEvent): Unit = definedExternally
    open fun removeZone(zone: String): Unit = definedExternally
    open fun removeZone(zone: CalendarEvent): Unit = definedExternally
    open fun getZoneCanvasStyle(zone: CalendarEvent, view: CalendarView? = definedExternally /* null */): String = definedExternally
    open fun getIndicatorCanvasStyle(indicator: CalendarEvent, view: CalendarView? = definedExternally /* null */): String = definedExternally
    open fun setIndicators(indicators: Array<Any?>): Unit = definedExternally
    open fun addIndicator(indicator: CalendarEvent): Unit = definedExternally
    open fun removeIndicator(indicator: String): Unit = definedExternally
    open fun removeIndicator(indicator: CalendarEvent): Unit = definedExternally
    open fun setChosenDate(newDate: Date): Unit = definedExternally
    open fun dateIsWorkday(date: Date, laneName: String): Boolean = definedExternally
    open fun next(): Unit = definedExternally
    open fun previous(): Unit = definedExternally
    open fun getLanePadding(view: CalendarView? = definedExternally /* null */): Number = definedExternally
    open fun getLaneEvents(lane: String, view: CalendarView? = definedExternally /* null */): Array<Any?> = definedExternally
    open fun getLaneEvents(lane: Lane, view: CalendarView? = definedExternally /* null */): Array<Any?> = definedExternally
    open fun getSublaneEvents(lane: String, sublane: String, view: CalendarView? = definedExternally /* null */): Array<Any?> = definedExternally
    open fun getSublaneEvents(lane: String, sublane: Lane, view: CalendarView? = definedExternally /* null */): Array<Any?> = definedExternally
    open fun getSublaneEvents(lane: Lane, sublane: String, view: CalendarView? = definedExternally /* null */): Array<Any?> = definedExternally
    open fun getSublaneEvents(lane: Lane, sublane: Lane, view: CalendarView? = definedExternally /* null */): Array<Any?> = definedExternally
    open fun getDateLabelText(viewName: String, startDate: Date, endDate: Date? = definedExternally /* null */): String = definedExternally
    open fun cancelEditing(): Unit = definedExternally
    open fun showEventDialog(event: CalendarEvent? = definedExternally /* null */, isNewEvent: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun showNewEventDialog(event: CalendarEvent? = definedExternally /* null */): Unit = definedExternally
    open fun showEventEditor(event: CalendarEvent? = definedExternally /* null */, isNewEvent: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun showNewEventEditor(event: CalendarEvent? = definedExternally /* null */): Unit = definedExternally
    open fun getDateCSSText(date: Date, rowNum: Number, colNum: Number, view: CalendarView): String = definedExternally
    open fun getDateStyle(date: Date, rowNum: Number, colNum: Number, view: CalendarView): String = definedExternally
    open fun getDateHTML(date: Date, rowNum: Number, colNum: Number, view: CalendarView): String = definedExternally
    open fun getDateCellAlign(date: Date, rowNum: Number, colNum: Number, view: CalendarView): String = definedExternally
    open fun getDateCellVAlign(date: Date, rowNum: Number, colNum: Number, view: CalendarView): String = definedExternally
    open fun getDateHeaderTitle(date: Date, dayOfWeek: Number, defaultValue: String, view: CalendarView): String = definedExternally
    open fun getCellDate(rowNum: Number? = definedExternally /* null */, colNum: Number? = definedExternally /* null */, view: CalendarView? = definedExternally /* null */): Date = definedExternally
    open fun getDateFromPoint(x: Number? = definedExternally /* null */, y: Number? = definedExternally /* null */, snapOffsets: Boolean? = definedExternally /* null */, view: CalendarView? = definedExternally /* null */): Date = definedExternally
    open fun getLane(lane: String, view: CalendarView? = definedExternally /* null */): Lane = definedExternally
    open fun getEventLane(event: CalendarEvent, view: CalendarView? = definedExternally /* null */): Lane = definedExternally
    open fun getSublane(lane: String, sublane: String, view: CalendarView? = definedExternally /* null */): Lane = definedExternally
    open fun getEventSublane(event: CalendarEvent, view: CalendarView? = definedExternally /* null */): Lane = definedExternally
    open fun getLaneFromPoint(x: Number? = definedExternally /* null */, y: Number? = definedExternally /* null */, view: CalendarView? = definedExternally /* null */): Lane = definedExternally
    open fun getSublaneFromPoint(x: Number? = definedExternally /* null */, y: Number? = definedExternally /* null */, view: CalendarView? = definedExternally /* null */): Lane = definedExternally
    open fun currentViewChanged(viewName: String /* "day" */): Unit = definedExternally
    open fun currentViewChanged(viewName: String /* "week" */): Unit = definedExternally
    open fun currentViewChanged(viewName: String /* "month" */): Unit = definedExternally
    open fun currentViewChanged(viewName: String /* "timeline" */): Unit = definedExternally
    open fun getDayBodyHTML(date: Date, events: Array<Any?>, calendar: Calendar, rowNum: Number, colNum: Number): String = definedExternally
    open fun getMonthViewHoverHTML(date: Date, events: Array<Any?>): String = definedExternally
    open fun dayBodyClick(date: Date, events: Array<Any?>, calendar: Calendar, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun dayHeaderClick(date: Date, events: Array<Any?>, calendar: Calendar, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun eventChanged(event: CalendarEvent): Unit = definedExternally
    open fun eventRemoved(event: CalendarEvent): Unit = definedExternally
    open fun eventAdded(event: CalendarEvent): Unit = definedExternally
    open fun eventClick(event: CalendarEvent, viewName: String /* "day" */): Boolean = definedExternally
    open fun eventClick(event: CalendarEvent, viewName: String /* "week" */): Boolean = definedExternally
    open fun eventClick(event: CalendarEvent, viewName: String /* "month" */): Boolean = definedExternally
    open fun eventClick(event: CalendarEvent, viewName: String /* "timeline" */): Boolean = definedExternally
    open fun eventRemoveClick(event: CalendarEvent, viewName: String): Boolean = definedExternally
    open fun eventMoved(newDate: Date, event: CalendarEvent, newLane: String): Boolean = definedExternally
    open fun eventResized(newDate: Date, event: CalendarEvent): Boolean = definedExternally
    open fun timelineEventMoved(event: CalendarEvent, startDate: Date, endDate: Date, lane: Lane): Boolean = definedExternally
    open fun timelineEventResized(event: CalendarEvent, startDate: Date, endDate: Date): Boolean = definedExternally
    open fun selectTab(tabnum: Number): Unit = definedExternally
    open fun dateChanged(): Unit = definedExternally
    open fun getActiveDay(): Number = definedExternally
    open fun getActiveTime(): Date = definedExternally
    open fun setTimelineRange(start: Date, end: Date? = definedExternally /* null */): Unit = definedExternally
    open fun setResolution(headerLevels: Array<Any?>, unit: String /* "millisecond" */, unitCount: Number, granularityPerColumn: Number? = definedExternally /* null */): Unit = definedExternally
    open fun setResolution(headerLevels: Array<Any?>, unit: String /* "second" */, unitCount: Number, granularityPerColumn: Number? = definedExternally /* null */): Unit = definedExternally
    open fun setResolution(headerLevels: Array<Any?>, unit: String /* "minute" */, unitCount: Number, granularityPerColumn: Number? = definedExternally /* null */): Unit = definedExternally
    open fun setResolution(headerLevels: Array<Any?>, unit: String /* "hour" */, unitCount: Number, granularityPerColumn: Number? = definedExternally /* null */): Unit = definedExternally
    open fun setResolution(headerLevels: Array<Any?>, unit: String /* "day" */, unitCount: Number, granularityPerColumn: Number? = definedExternally /* null */): Unit = definedExternally
    open fun setResolution(headerLevels: Array<Any?>, unit: String /* "week" */, unitCount: Number, granularityPerColumn: Number? = definedExternally /* null */): Unit = definedExternally
    open fun setResolution(headerLevels: Array<Any?>, unit: String /* "month" */, unitCount: Number, granularityPerColumn: Number? = definedExternally /* null */): Unit = definedExternally
    open fun setResolution(headerLevels: Array<Any?>, unit: String /* "quarter" */, unitCount: Number, granularityPerColumn: Number? = definedExternally /* null */): Unit = definedExternally
    open fun setResolution(headerLevels: Array<Any?>, unit: String /* "year" */, unitCount: Number, granularityPerColumn: Number? = definedExternally /* null */): Unit = definedExternally
    open fun getEventLength(event: CalendarEvent, unit: String? /* "millisecond" */ = definedExternally /* null */): Unit = definedExternally
    open fun getEventLength(event: CalendarEvent, unit: String? /* "second" */ = definedExternally /* null */): Unit = definedExternally
    open fun getEventLength(event: CalendarEvent, unit: String? /* "minute" */ = definedExternally /* null */): Unit = definedExternally
    open fun getEventLength(event: CalendarEvent, unit: String? /* "hour" */ = definedExternally /* null */): Unit = definedExternally
    open fun getEventLength(event: CalendarEvent, unit: String? /* "day" */ = definedExternally /* null */): Unit = definedExternally
    open fun getEventLength(event: CalendarEvent, unit: String? /* "week" */ = definedExternally /* null */): Unit = definedExternally
    open fun getEventLength(event: CalendarEvent, unit: String? /* "month" */ = definedExternally /* null */): Unit = definedExternally
    open fun getEventLength(event: CalendarEvent, unit: String? /* "quarter" */ = definedExternally /* null */): Unit = definedExternally
    open fun getEventLength(event: CalendarEvent, unit: String? /* "year" */ = definedExternally /* null */): Unit = definedExternally
    open fun eventRepositionMove(event: CalendarEvent, newEvent: CalendarEvent): Boolean = definedExternally
    open fun eventRepositionStop(event: CalendarEvent, newEvent: CalendarEvent, customValues: Any? = definedExternally /* null */): Boolean = definedExternally
    open fun eventResizeMove(event: CalendarEvent, newEvent: CalendarEvent): Boolean = definedExternally
    open fun eventResizeStop(event: CalendarEvent, newEvent: CalendarEvent, customValues: Any? = definedExternally /* null */): Boolean = definedExternally
    open fun backgroundClick(startDate: Date, endDate: Date): Boolean = definedExternally
    open fun backgroundMouseDown(startDate: Date): Boolean = definedExternally
    open fun backgroundMouseUp(startDate: Date, endDate: Date): Boolean = definedExternally
//    override var deepCloneOnEdit: Boolean = definedExternally
//    override var deepCloneNonFieldValuesOnEdit: Boolean = definedExternally
//    override var dataPageSize: Number = definedExternally
//    override var dataFetchDelay: Number = definedExternally
//    override var fields: Array<Any?> = definedExternally
//    override var useAllDataSourceFields: Boolean = definedExternally
//    override var showHiddenFields: Boolean = definedExternally
//    override var showComplexFields: Boolean = definedExternally
//    override var fetchOperation: String = definedExternally
//    override var updateOperation: String = definedExternally
//    override var addOperation: String = definedExternally
//    override var removeOperation: String = definedExternally
//    override var exportFields: Array<String> = definedExternally
//    override var exportAll: Boolean = definedExternally
//    override var exportIncludeSummaries: Boolean = definedExternally
//    override var dragRecategorize: dynamic /* String /* "never" */ | String /* "always" */ | String /* "checked" */ */ = definedExternally
//    override var preventDuplicates: Boolean = definedExternally
//    override var duplicateDragMessage: String = definedExternally
//    override var showOfflineMessage: Boolean = definedExternally
//    override var offlineMessage: String = definedExternally
//    override var offlineSaveMessage: String = definedExternally
//    override var addDropValues: Boolean = definedExternally
//    override var dropValues: Any = definedExternally
//    override var dataArity: String = definedExternally
//    override var progressiveLoading: Boolean = definedExternally
//    override var canEditFieldAttribute: String = definedExternally
//    override var useFlatFields: Boolean = definedExternally
//    override var canChangeNonFieldValues: Boolean = definedExternally
//    override var implicitCriteria: Any? = definedExternally
//    override var canEditHilites: Boolean = definedExternally
//    override var hilites: Array<Any?> = definedExternally
//    override var hiliteIcons: Array<String> = definedExternally
//    override var hiliteIconPosition: dynamic /* String /* "before" */ | String /* "after" */ | String /* "replace" */ */ = definedExternally
//    override var hiliteIconSize: Number = definedExternally
//    override var hiliteIconWidth: Number = definedExternally
//    override var hiliteIconHeight: Number = definedExternally
//    override var hiliteIconLeftPadding: Number = definedExternally
//    override var hiliteIconRightPadding: Number = definedExternally
//    override var hiliteProperty: String = definedExternally
//    override var hiliteState: String = definedExternally
//    override var fieldNamingStrategy: dynamic /* String /* "simple" */ | String /* "uuid" */ */ = definedExternally
//    override var editHilitesText: String = definedExternally
//    override var editHilitesDialogTitle: String = definedExternally
//    override var fieldEditorWindowTitle: String = definedExternally
//    override var fieldEditorWindow: Window = definedExternally
//    override var hiliteEditor: HiliteEditor = definedExternally
//    override var dragDataAction: dynamic /* String /* "none" */ | String /* "move" */ | String /* "copy" */ */ = definedExternally
//    override var dragTrackerStyle: String = definedExternally
//    override var badFormulaResultValue: String = definedExternally
//    override var missingSummaryFieldValue: String = definedExternally
//    override var canAddFormulaFields: Boolean = definedExternally
//    override var addFormulaFieldText: String = definedExternally
//    override var editFormulaFieldText: String = definedExternally
//    override var removeFormulaFieldText: String = definedExternally
//    override var canAddSummaryFields: Boolean = definedExternally
//    override var addSummaryFieldText: String = definedExternally
//    override var editSummaryFieldText: String = definedExternally
//    override var removeSummaryFieldText: String = definedExternally
//    override var includeHilitesInSummaryFields: Boolean = definedExternally
//    override var titleField: String = definedExternally
//    override var iconField: String = definedExternally
//    override var infoField: String = definedExternally
//    override var dataField: String = definedExternally
//    override var emptyExportMessage: String = definedExternally
//    override var multiSortDialogProperties: MultiSortDialog = definedExternally
//    override var multiSortDialogDefaults: MultiSortDialog = definedExternally
//    override var unknownErrorMessage: String = definedExternally
//    override var noErrorDetailsMessage: String = definedExternally
//    override fun dragComplete(): Unit = definedExternally
//    override fun dropComplete(transferredRecords: Array<Any?>): Unit = definedExternally
//    override fun getDataPathField(dataPath: String): Unit = definedExternally
//    override fun fieldIsEditable(field: String): Boolean = definedExternally
//    override fun fieldIsEditable(field: Number): Boolean = definedExternally
//    override fun fieldIsEditable(field: Any?): Boolean = definedExternally
//    override fun getField(fieldID: String): Any = definedExternally
//    override fun getField(fieldID: Number): Any = definedExternally
//    override fun getFieldNum(fieldName: String): Number = definedExternally
//    override fun find(advancedCriteria: AdvancedCriteria): Any = definedExternally
//    override fun findAll(advancedCriteria: AdvancedCriteria): Array<Any> = definedExternally
//    override fun findIndex(advancedCriteria: AdvancedCriteria): Number = definedExternally
//    override fun findNextIndex(startIndex: Number, advancedCriteria: AdvancedCriteria, endIndex: Number?): Number = definedExternally
//    override fun setDataSource(dataSource: String, fields: Array<Any?>?): Unit = definedExternally
//    override fun setDataSource(dataSource: DataSource, fields: Array<Any?>?): Unit = definedExternally
//    override fun exportData(requestProperties: DSRequest?, callback: Any?): Unit = definedExternally
//    override fun getFieldAlignments(): Array<dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */> = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "startsWith" */): Boolean = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "exact" */): Boolean = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "exactCase" */): Boolean = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "substring" */): Boolean = definedExternally
//    override fun findByKey(keyValue: Any): Record = definedExternally
//    override fun selectRecord(record: Number, newState: Boolean?): Unit = definedExternally
//    override fun selectRecord(record: Record, newState: Boolean?): Unit = definedExternally
//    override fun selectSingleRecord(record: Number): Unit = definedExternally
//    override fun selectSingleRecord(record: Record): Unit = definedExternally
//    override fun deselectRecord(record: Number): Unit = definedExternally
//    override fun deselectRecord(record: Record): Unit = definedExternally
//    override fun selectRecords(records: Number, newState: Boolean?): Unit = definedExternally
//    override fun selectRecords(records: Array<Any?>, newState: Boolean?): Unit = definedExternally
//    override fun deselectRecords(records: Number): Unit = definedExternally
//    override fun deselectRecords(records: Array<Any?>): Unit = definedExternally
//    override fun selectAllRecords(): Unit = definedExternally
//    override fun deselectAllRecords(): Unit = definedExternally
//    override fun selectRange(startRow: Number, endRow: Number, newState: Boolean?): Unit = definedExternally
//    override fun deselectRange(startRow: Number, endRow: Number): Unit = definedExternally
//    override fun anySelected(): Boolean = definedExternally
//    override fun getSelectionLength(): Number = definedExternally
//    override fun getHilites(): Array<Any?> = definedExternally
//    override fun setHilites(hilites: Array<Any?>): Unit = definedExternally
//    override fun getHiliteState(): String = definedExternally
//    override fun setHiliteState(hiliteState: String): Unit = definedExternally
//    override fun enableHilite(hiliteID: String, enable: Boolean?): Unit = definedExternally
//    override fun disableHilite(hiliteID: String): Unit = definedExternally
//    override fun enableHiliting(enable: Boolean?): Unit = definedExternally
//    override fun disableHiliting(): Unit = definedExternally
//    override fun editHilites(): Unit = definedExternally
//    override fun transferRecords(dropRecords: Array<Any?>, targetRecord: Record, index: Number, sourceWidget: Canvas, callback: Any?): Unit = definedExternally
//    override fun getDropValues(record: Record, sourceDS: DataSource, targetRecord: Record, index: Number, sourceWidget: Canvas): Any = definedExternally
//    override fun transferDragData(): Array<Any> = definedExternally
//    override fun getDragData(source: DataBoundComponent): Array<Any?> = definedExternally
//    override fun transferSelectedData(source: DataBoundComponent, index: Number?, callback: Any?): Unit = definedExternally
//    override fun setDragTracker(): Boolean = definedExternally
//    override fun addFormulaField(): Unit = definedExternally
//    override fun editFormulaField(field: String): Unit = definedExternally
//    override fun getFormulaFieldValue(field: String, record: Record): dynamic /* String | Number */ = definedExternally
//    override fun addSummaryField(): Unit = definedExternally
//    override fun editSummaryField(field: String): Unit = definedExternally
//    override fun getSummaryFieldValue(field: String, record: Record): String = definedExternally
//    override fun shouldIncludeHiliteInSummaryField(summaryFieldName: String, usedFieldName: String): Boolean = definedExternally
//    override fun getRecordIndex(record: Record): Number = definedExternally
//    override fun getTitleFieldValue(record: Record): String = definedExternally
//    override fun getTitleField(): String = definedExternally
//    override fun getRecordHiliteCSSText(record: Record, cssText: String, field: String): String = definedExternally
//    override fun getSort(): Array<Any?> = definedExternally
//    override fun setSort(sortSpecifiers: Array<Any?>): Unit = definedExternally
//    override fun askForSort(): Unit = definedExternally
//    override fun isOffline(): Boolean = definedExternally
//    override fun editFields(): Unit = definedExternally
//    override fun userAddedField(field: ListGridField): Boolean = definedExternally
//    override fun selectionUpdated(record: Any, recordList: Array<Any?>): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Calendar = definedExternally
        fun requestsArePending(): Boolean = definedExternally
    }
    open fun getEventLength(event: CalendarEvent): Unit = definedExternally
//    override fun willFetchData(newCriteria: Any?): Boolean = definedExternally
}
external open class DateRange {
    open var start: dynamic /* Date | RelativeDate */ = definedExternally
    open var end: dynamic /* Date | RelativeDate */ = definedExternally
}
external open class ListPropertiesPane : Layout {
    open var listProperties: ListProperties = definedExternally
    open var sampleTileLayout: TileLayout = definedExternally
    open var sampleTile: Canvas = definedExternally
    open var startNumberForm: DynamicForm = definedExternally
    open var startNumberFieldTitle: String = definedExternally
    open var startNumberField: SpinnerItem = definedExternally
    open fun listPropertiesChanged(listProperties: ListProperties): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ListPropertiesPane = definedExternally
    }
}
external open class Task : ProcessElement {
    open var inputField: String = definedExternally
    open var inputFieldList: Array<String> = definedExternally
    open var outputField: String = definedExternally
    open var outputFieldList: Array<String> = definedExternally
    open var outputExpression: String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Task = definedExternally
    }
}
external open class Scrollbar : StretchImg {
    open var btnSize: Number = definedExternally
    open var autoEnable: Boolean = definedExternally
    open var showCorner: Boolean = definedExternally
    open var allowThumbDownState: Boolean = definedExternally
    open var allowThumbOverState: Boolean = definedExternally
    open var showTrackEnds: Boolean = definedExternally
    open var showTrackButtons: Boolean = definedExternally
    open var thumbMinSize: Number = definedExternally
    open var trackEndWidth: Number = definedExternally
    open var trackEndHeight: Number = definedExternally
    open var thumbOverlap: Number = definedExternally
    open var startThumbOverlap: Number = definedExternally
    open var endThumbOverlap: Number = definedExternally
    open var thumbInset: Number = definedExternally
//    override var skinImgDir: String = definedExternally
    open var cornerSrc: String = definedExternally
    open var cornerSize: Number = definedExternally
//    override var hSrc: String = definedExternally
//    override var vSrc: String = definedExternally
    open var startImg: StretchItem = definedExternally
    open var trackStartImg: StretchItem = definedExternally
    open var trackImg: StretchItem = definedExternally
    open var trackEndImg: StretchItem = definedExternally
    open var endImg: StretchItem = definedExternally
    open var cornerImg: StretchItem = definedExternally
    open var scrollTarget: Canvas = definedExternally
    open fun setScrollTarget(newTarget: Canvas? = definedExternally /* null */): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Scrollbar = definedExternally
    }
}
external open class ServiceTask : Task {
    open var dataSource: dynamic /* String | DataSource */ = definedExternally
    open var operationType: dynamic /* String /* "custom" */ | String /* "fetch" */ | String /* "add" */ | String /* "update" */ | String /* "remove" */ | String /* "validate" */ | String /* "viewFile" */ | String /* "downloadFile" */ | String /* "storeTestData" */ | String /* "clientExport" */ | String /* "getFile" */ | String /* "hasFile" */ | String /* "listFiles" */ | String /* "removeFile" */ | String /* "saveFile" */ | String /* "renameFile" */ | String /* "getFileVersion" */ | String /* "hasFileVersion" */ | String /* "listFileVersions" */ | String /* "removeFileVersion" */ */ = definedExternally
    open var operationId: String = definedExternally
    open var criteria: Any? = definedExternally
    open var values: Record = definedExternally
    open var fixedCriteria: Any? = definedExternally
    open var fixedValues: Record = definedExternally
//    override var outputField: String = definedExternally
//    override var outputFieldList: Array<String> = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ServiceTask = definedExternally
    }
}
external open class Operators : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Operators = definedExternally
        var equalsTitle: String = definedExternally
        var iEqualsTitle: String = definedExternally
        var notEqualTitle: String = definedExternally
        var iNotEqualTitle: String = definedExternally
        var greaterThanTitle: String = definedExternally
        var lessThanTitle: String = definedExternally
        var greaterOrEqualTitle: String = definedExternally
        var lessOrEqualTitle: String = definedExternally
        var betweenTitle: String = definedExternally
        var iBetweenTitle: String = definedExternally
        var betweenInclusiveTitle: String = definedExternally
        var iBetweenInclusiveTitle: String = definedExternally
        var startsWithTitle: String = definedExternally
        var iStartsWithTitle: String = definedExternally
        var endsWithTitle: String = definedExternally
        var iEndsWithTitle: String = definedExternally
        var containsTitle: String = definedExternally
        var iContainsTitle: String = definedExternally
        var notContainsTitle: String = definedExternally
        var iNotContainsTitle: String = definedExternally
        var notStartsWithTitle: String = definedExternally
        var iNotStartsWithTitle: String = definedExternally
        var notEndsWithTitle: String = definedExternally
        var iNotEndsWithTitle: String = definedExternally
        var regexpTitle: String = definedExternally
        var iregexpTitle: String = definedExternally
        var matchesPatternTitle: String = definedExternally
        var iMatchesPatternTitle: String = definedExternally
        var containsPatternTitle: String = definedExternally
        var iContainsPatternTitle: String = definedExternally
        var equalsFieldTitle: String = definedExternally
        var iEqualsFieldTitle: String = definedExternally
        var notEqualFieldTitle: String = definedExternally
        var iNotEqualFieldTitle: String = definedExternally
        var greaterThanFieldTitle: String = definedExternally
        var lessThanFieldTitle: String = definedExternally
        var greaterOrEqualFieldTitle: String = definedExternally
        var lessOrEqualFieldTitle: String = definedExternally
        var containsFieldTitle: String = definedExternally
        var iContainsFieldTitle: String = definedExternally
        var startsWithFieldTitle: String = definedExternally
        var iStartsWithFieldTitle: String = definedExternally
        var endsWithFieldTitle: String = definedExternally
        var iEndsWithFieldTitle: String = definedExternally
        var notContainsFieldTitle: String = definedExternally
        var iNotContainsFieldTitle: String = definedExternally
        var notStartsWithFieldTitle: String = definedExternally
        var iNotStartsWithFieldTitle: String = definedExternally
        var notEndsWithFieldTitle: String = definedExternally
        var iNotEndsWithFieldTitle: String = definedExternally
        var startsWithPatternTitle: String = definedExternally
        var iStartsWithPatternTitle: String = definedExternally
        var endsWithPatternTitle: String = definedExternally
        var iEndsWithPatternTitle: String = definedExternally
        var andTitle: String = definedExternally
        var notTitle: String = definedExternally
        var orTitle: String = definedExternally
        var inSetTitle: String = definedExternally
        var notInSetTitle: String = definedExternally
        var isBlankTitle: String = definedExternally
        var notBlankTitle: String = definedExternally
        var isNullTitle: String = definedExternally
        var notNullTitle: String = definedExternally
    }
}
external open class CanvasItem : FormItem {
//    override var height: dynamic /* String | Number */ = definedExternally
//    override var multiple: Boolean = definedExternally
//    override var shouldSaveValue: Boolean = definedExternally
    open var canvas: Canvas = definedExternally
    open var canvasConstructor: String = definedExternally
    open var canvasDefaults: Any = definedExternally
    open var canvasProperties: Any = definedExternally
    open var autoDestroy: Boolean = definedExternally
    open var overflow: dynamic /* String /* "auto" */ | String /* "visible" */ | String /* "hidden" */ | String /* "scroll" */ | String /* "clip-h" */ | String /* "clip-v" */ */ = definedExternally
    open var minHeight: Number = definedExternally
    open var maxHeight: Number = definedExternally
    open var editCriteriaInInnerForm: Boolean = definedExternally
    open var applyPromptToCanvas: Boolean = definedExternally
//    override var prompt: String = definedExternally
//    override fun storeValue(value: Any, showValue: Boolean?): Unit = definedExternally
    open fun updateCanvasTabPosition(): Unit = definedExternally
    open fun setCanvas(canvas: Canvas): Unit = definedExternally
    open fun canEditChanged(canEdit: Boolean): Boolean = definedExternally
    open fun readOnlyDisplayChanged(appearance: String /* "static" */): Boolean = definedExternally
    open fun readOnlyDisplayChanged(appearance: String /* "readOnly" */): Boolean = definedExternally
    open fun readOnlyDisplayChanged(appearance: String /* "disabled" */): Boolean = definedExternally
    open fun shouldDisableCanvas(): Boolean = definedExternally
//    override fun isFocused(): Boolean = definedExternally
//    override fun hasAdvancedCriteria(): Boolean = definedExternally
//    override fun canEditCriterion(criterion: Criterion): Boolean = definedExternally
//    open fun getCriterion(): Criterion = definedExternally
//    override fun setCriterion(criterion: Criterion): Unit = definedExternally
//    override fun setPrompt(prompt: String): Unit = definedExternally
    open fun createCanvas(form: DynamicForm, item: CanvasItem): Canvas = definedExternally
    open fun showValue(displayValue: Any, dataValue: Any, form: DynamicForm, item: CanvasItem): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): CanvasItem = definedExternally
    }
}
external open class ResultTree : Tree {
//    override var modelType: dynamic /* String /* "parent" */ | String /* "children" */ */ = definedExternally
//    override var data: Array<Any?> = definedExternally
    open var dataSource: dynamic /* String | DataSource */ = definedExternally
    open var loadDataOnDemand: Boolean = definedExternally
    open var autoPreserveOpenState: dynamic /* String /* "never" */ | String /* "whenUnique" */ | String /* "always" */ */ = definedExternally
    open var fetchMode: dynamic /* String /* "basic" */ | String /* "paged" */ | String /* "local" */ */ = definedExternally
    open var resultSize: Number = definedExternally
    open var childCountProperty: String = definedExternally
    open var canReturnOpenSubfoldersProperty: String = definedExternally
    open var canReturnOpenFolders: Boolean = definedExternally
    open var progressiveLoading: Boolean = definedExternally
//    override var defaultIsFolder: Boolean = definedExternally
    open var rootNode: Any = definedExternally
    open var autoOpen: String = definedExternally
//    override var discardParentlessNodes: Boolean = definedExternally
    open var defaultNewNodesToRoot: Boolean = definedExternally
    open var updateCacheFromRequest: Boolean = definedExternally
    open var implicitCriteria: Any? = definedExternally
    open var disableCacheSync: Boolean = definedExternally
    open var keepParentsOnFilter: Boolean = definedExternally
    open var serverFilterFields: Array<String> = definedExternally
    open var useSimpleCriteriaLOD: Boolean = definedExternally
    open var criteria: Any? = definedExternally
//    override fun loadChildren(node: TreeNode, callback: Any?): Unit = definedExternally
//    override fun unloadChildren(node: TreeNode): Unit = definedExternally
    open fun setChildren(parent: TreeNode, newChildren: Array<Any?>, totalChildren: Number? = definedExternally /* null */): Unit = definedExternally
    open fun invalidateCache(): Unit = definedExternally
//    override fun get(pos: Number): TreeNode = definedExternally
//    override fun getRange(start: Number, end: Number): Array<Any?> = definedExternally
    open fun setCriteria(newCriteria: Any?): Unit = definedExternally
    open fun applyFilter(tree: Tree, criteria: Any?, filterMode: String /* "strict" */, dataSource: DataSource, requestProperties: DSRequest? = definedExternally /* null */): Tree = definedExternally
    open fun applyFilter(tree: Tree, criteria: Any?, filterMode: String /* "keepParents" */, dataSource: DataSource, requestProperties: DSRequest? = definedExternally /* null */): Tree = definedExternally
    open fun compareCriteria(newCriteria: Any?, oldCriteria: Any?, requestProperties: DSRequest? = definedExternally /* null */): Number = definedExternally
    open fun willFetchData(newCriteria: Any?): Boolean = definedExternally
    open fun getOpenState(): String = definedExternally
    open fun setOpenState(openState: String): Unit = definedExternally
    open fun dataArrived(parentNode: TreeNode): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ResultTree = definedExternally
    }
}
external open class ViewLoader : Label {
    open var loadingMessage: String = definedExternally
    open var viewURL: String = definedExternally
    open var viewURLParams: Any = definedExternally
    open var viewRPCProperties: RPCRequest = definedExternally
    open var httpMethod: String = definedExternally
    open var allowCaching: Boolean = definedExternally
    open fun setViewURL(url: String? = definedExternally /* null */, params: Any? = definedExternally /* null */, rpcProperties: RPCRequest? = definedExternally /* null */): Unit = definedExternally
    open fun handleError(rpcRequest: RPCRequest, rpcResponse: RPCResponse): Boolean = definedExternally
    open fun getView(): Canvas = definedExternally
    open fun viewLoaded(view: Canvas): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ViewLoader = definedExternally
    }
}
external open class ActiveXControl : BrowserPlugin {
    open var id: String = definedExternally
    open var params: Any = definedExternally
    open var uuid: String = definedExternally
    open var classID: String = definedExternally
    open var codeBase: String = definedExternally
    open fun getPluginID(): Unit = definedExternally
    open fun getPluginHandle(): Element = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ActiveXControl = definedExternally
    }
}
external open class Lane {
    open var name: String = definedExternally
    open var height: Number = definedExternally
    open var width: Number = definedExternally
    open var title: String = definedExternally
    open var sublanes: Array<Any?> = definedExternally
    open var eventStyleName: String = definedExternally
    open var styleName: String = definedExternally
    open var fieldStyleName: String = definedExternally
}
external open class TreeGridField : ListGridField {
    open var treeField: Boolean = definedExternally
//    override var canExport: Boolean = definedExternally
}
external open class SchemaSet : Class {
    open var schemaNamespace: String = definedExternally
    open fun getSchema(schemaName: String, schemaType: String? = definedExternally /* null */): DataSource = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SchemaSet = definedExternally
        fun get(schemaNamespace: String): SchemaSet = definedExternally
    }
}
external open class RadioItem : NativeCheckboxItem {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): RadioItem = definedExternally
    }
}
external interface DataBoundComponent {
    var deepCloneOnEdit: Boolean? get() = definedExternally; set(value) = definedExternally
    var deepCloneNonFieldValuesOnEdit: Boolean? get() = definedExternally; set(value) = definedExternally
    var dataSource: dynamic /* String | DataSource */ get() = definedExternally; set(value) = definedExternally
    var dataFetchMode: dynamic /* String /* "basic" */ | String /* "paged" */ | String /* "local" */ */ get() = definedExternally; set(value) = definedExternally
    var dataPageSize: Number? get() = definedExternally; set(value) = definedExternally
    var dataFetchDelay: Number? get() = definedExternally; set(value) = definedExternally
    var fields: Array<Any?>? get() = definedExternally; set(value) = definedExternally
    var useAllDataSourceFields: Boolean? get() = definedExternally; set(value) = definedExternally
    var showHiddenFields: Boolean? get() = definedExternally; set(value) = definedExternally
    var showDetailFields: Boolean? get() = definedExternally; set(value) = definedExternally
    var showComplexFields: Boolean? get() = definedExternally; set(value) = definedExternally
    var fetchOperation: String? get() = definedExternally; set(value) = definedExternally
    var updateOperation: String? get() = definedExternally; set(value) = definedExternally
    var addOperation: String? get() = definedExternally; set(value) = definedExternally
    var removeOperation: String? get() = definedExternally; set(value) = definedExternally
    var exportFields: Array<String>? get() = definedExternally; set(value) = definedExternally
    var exportAll: Boolean? get() = definedExternally; set(value) = definedExternally
    var exportIncludeSummaries: Boolean? get() = definedExternally; set(value) = definedExternally
    var dragRecategorize: dynamic /* String /* "never" */ | String /* "always" */ | String /* "checked" */ */ get() = definedExternally; set(value) = definedExternally
    var preventDuplicates: Boolean? get() = definedExternally; set(value) = definedExternally
    var duplicateDragMessage: String? get() = definedExternally; set(value) = definedExternally
    var showOfflineMessage: Boolean? get() = definedExternally; set(value) = definedExternally
    var offlineMessage: String? get() = definedExternally; set(value) = definedExternally
    var offlineSaveMessage: String? get() = definedExternally; set(value) = definedExternally
    var addDropValues: Boolean? get() = definedExternally; set(value) = definedExternally
    var dropValues: Any? get() = definedExternally; set(value) = definedExternally
    var dataArity: String? get() = definedExternally; set(value) = definedExternally
    var progressiveLoading: Boolean? get() = definedExternally; set(value) = definedExternally
    var canEditFieldAttribute: String? get() = definedExternally; set(value) = definedExternally
    var useFlatFields: Boolean? get() = definedExternally; set(value) = definedExternally
    var canChangeNonFieldValues: Boolean? get() = definedExternally; set(value) = definedExternally
    var autoFetchData: Boolean? get() = definedExternally; set(value) = definedExternally
    var initialCriteria: Any? get() = definedExternally; set(value) = definedExternally
    var implicitCriteria: Any? get() = definedExternally; set(value) = definedExternally
    var canEditHilites: Boolean? get() = definedExternally; set(value) = definedExternally
    var hilites: Array<Any?>? get() = definedExternally; set(value) = definedExternally
    var hiliteIcons: Array<String>? get() = definedExternally; set(value) = definedExternally
    var hiliteIconPosition: dynamic /* String /* "before" */ | String /* "after" */ | String /* "replace" */ */ get() = definedExternally; set(value) = definedExternally
    var hiliteIconSize: Number? get() = definedExternally; set(value) = definedExternally
    var hiliteIconWidth: Number? get() = definedExternally; set(value) = definedExternally
    var hiliteIconHeight: Number? get() = definedExternally; set(value) = definedExternally
    var hiliteIconLeftPadding: Number? get() = definedExternally; set(value) = definedExternally
    var hiliteIconRightPadding: Number? get() = definedExternally; set(value) = definedExternally
    var hiliteProperty: String? get() = definedExternally; set(value) = definedExternally
    var hiliteState: String? get() = definedExternally; set(value) = definedExternally
    var fieldNamingStrategy: dynamic /* String /* "simple" */ | String /* "uuid" */ */ get() = definedExternally; set(value) = definedExternally
    var editHilitesText: String? get() = definedExternally; set(value) = definedExternally
    var editHilitesDialogTitle: String? get() = definedExternally; set(value) = definedExternally
    var fieldEditorWindowTitle: String? get() = definedExternally; set(value) = definedExternally
    var fieldEditorWindow: Window? get() = definedExternally; set(value) = definedExternally
    var hiliteEditor: HiliteEditor? get() = definedExternally; set(value) = definedExternally
    var dragDataAction: dynamic /* String /* "none" */ | String /* "move" */ | String /* "copy" */ */ get() = definedExternally; set(value) = definedExternally
    var dragTrackerStyle: String? get() = definedExternally; set(value) = definedExternally
    var badFormulaResultValue: String? get() = definedExternally; set(value) = definedExternally
    var missingSummaryFieldValue: String? get() = definedExternally; set(value) = definedExternally
    var canAddFormulaFields: Boolean? get() = definedExternally; set(value) = definedExternally
    var addFormulaFieldText: String? get() = definedExternally; set(value) = definedExternally
    var editFormulaFieldText: String? get() = definedExternally; set(value) = definedExternally
    var removeFormulaFieldText: String? get() = definedExternally; set(value) = definedExternally
    var canAddSummaryFields: Boolean? get() = definedExternally; set(value) = definedExternally
    var addSummaryFieldText: String? get() = definedExternally; set(value) = definedExternally
    var editSummaryFieldText: String? get() = definedExternally; set(value) = definedExternally
    var removeSummaryFieldText: String? get() = definedExternally; set(value) = definedExternally
    var includeHilitesInSummaryFields: Boolean? get() = definedExternally; set(value) = definedExternally
    var titleField: String? get() = definedExternally; set(value) = definedExternally
    var iconField: String? get() = definedExternally; set(value) = definedExternally
    var infoField: String? get() = definedExternally; set(value) = definedExternally
    var dataField: String? get() = definedExternally; set(value) = definedExternally
    var descriptionField: String? get() = definedExternally; set(value) = definedExternally
    var emptyExportMessage: String? get() = definedExternally; set(value) = definedExternally
    var multiSortDialogProperties: MultiSortDialog? get() = definedExternally; set(value) = definedExternally
    var multiSortDialogDefaults: MultiSortDialog? get() = definedExternally; set(value) = definedExternally
    var unknownErrorMessage: String? get() = definedExternally; set(value) = definedExternally
    var noErrorDetailsMessage: String? get() = definedExternally; set(value) = definedExternally
    val dragComplete: (() -> Unit)? get() = definedExternally
    val dropComplete: ((transferredRecords: Array<Any?>) -> Unit)? get() = definedExternally
    val getDataPathField: ((dataPath: String) -> Unit)? get() = definedExternally
    val fieldIsEditable: ((field: dynamic /* String | Number | Any? */) -> Boolean)? get() = definedExternally
    val getField: ((fieldID: dynamic /* String | Number */) -> Any)? get() = definedExternally
    val getFieldNum: ((fieldName: String) -> Number)? get() = definedExternally
    val find: ((advancedCriteria: AdvancedCriteria) -> Any)? get() = definedExternally
    val findAll: ((advancedCriteria: AdvancedCriteria) -> Array<Any>)? get() = definedExternally
    val findIndex: ((advancedCriteria: AdvancedCriteria) -> Number)? get() = definedExternally
    val findNextIndex: ((startIndex: Number, advancedCriteria: AdvancedCriteria, endIndex: Number? /*= null*/) -> Number)? get() = definedExternally
    val setDataSource: ((dataSource: dynamic /* String | DataSource */, fields: Array<Any?>? /*= null*/) -> Unit)? get() = definedExternally
    val exportData: ((requestProperties: DSRequest? /*= null*/, callback: Any? /*= null*/) -> Unit)? get() = definedExternally
    val getFieldAlignments: (() -> Array<dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */>)? get() = definedExternally
    val willFetchData: ((newCriteria: Any?, textMatchStyle: dynamic /* String /* "startsWith" */ | String /* "exact" */ | String /* "exactCase" */ | String /* "substring" */ */ /*= null*/) -> Boolean)? get() = definedExternally
    val findByKey: ((keyValue: Any) -> Record)? get() = definedExternally
    val selectRecord: ((record: dynamic /* Number | Record */, newState: Boolean? /*= null*/) -> Unit)? get() = definedExternally
    val selectSingleRecord: ((record: dynamic /* Number | Record */) -> Unit)? get() = definedExternally
    val deselectRecord: ((record: dynamic /* Number | Record */) -> Unit)? get() = definedExternally
    val selectRecords: ((records: dynamic /* Number | Array<Any?> */, newState: Boolean? /*= null*/) -> Unit)? get() = definedExternally
    val deselectRecords: ((records: dynamic /* Number | Array<Any?> */) -> Unit)? get() = definedExternally
    val selectAllRecords: (() -> Unit)? get() = definedExternally
    val deselectAllRecords: (() -> Unit)? get() = definedExternally
    val selectRange: ((startRow: Number, endRow: Number, newState: Boolean? /*= null*/) -> Unit)? get() = definedExternally
    val deselectRange: ((startRow: Number, endRow: Number) -> Unit)? get() = definedExternally
    val anySelected: (() -> Boolean)? get() = definedExternally
    val getSelectionLength: (() -> Number)? get() = definedExternally
    val getHilites: (() -> Array<Any?>)? get() = definedExternally
    val setHilites: ((hilites: Array<Any?>) -> Unit)? get() = definedExternally
    val getHiliteState: (() -> String)? get() = definedExternally
    val setHiliteState: ((hiliteState: String) -> Unit)? get() = definedExternally
    val enableHilite: ((hiliteID: String, enable: Boolean? /*= null*/) -> Unit)? get() = definedExternally
    val disableHilite: ((hiliteID: String) -> Unit)? get() = definedExternally
    val enableHiliting: ((enable: Boolean? /*= null*/) -> Unit)? get() = definedExternally
    val disableHiliting: (() -> Unit)? get() = definedExternally
    val editHilites: (() -> Unit)? get() = definedExternally
    val transferRecords: ((dropRecords: Array<Any?>, targetRecord: Record, index: Number, sourceWidget: Canvas, callback: Any? /*= null*/) -> Unit)? get() = definedExternally
    val getDropValues: ((record: Record, sourceDS: DataSource, targetRecord: Record, index: Number, sourceWidget: Canvas) -> Any)? get() = definedExternally
    val transferDragData: (() -> Array<Any>)? get() = definedExternally
    val getDragData: ((source: DataBoundComponent) -> Array<Any?>)? get() = definedExternally
    val transferSelectedData: ((source: DataBoundComponent, index: Number? /*= null*/, callback: Any? /*= null*/) -> Unit)? get() = definedExternally
    val setDragTracker: (() -> Boolean)? get() = definedExternally
    val addFormulaField: (() -> Unit)? get() = definedExternally
    val editFormulaField: ((field: String) -> Unit)? get() = definedExternally
    val getFormulaFieldValue: ((field: String, record: Record) -> dynamic /* String | Number */)? get() = definedExternally
    val addSummaryField: (() -> Unit)? get() = definedExternally
    val editSummaryField: ((field: String) -> Unit)? get() = definedExternally
    val getSummaryFieldValue: ((field: String, record: Record) -> String)? get() = definedExternally
    val shouldIncludeHiliteInSummaryField: ((summaryFieldName: String, usedFieldName: String) -> Boolean)? get() = definedExternally
    val getRecordIndex: ((record: Record) -> Number)? get() = definedExternally
    val getTitleFieldValue: ((record: Record) -> String)? get() = definedExternally
    val getTitleField: (() -> String)? get() = definedExternally
    val getRecordHiliteCSSText: ((record: Record, cssText: String, field: String) -> String)? get() = definedExternally
    val getSort: (() -> Array<Any?>)? get() = definedExternally
    val setSort: ((sortSpecifiers: Array<Any?>) -> Unit)? get() = definedExternally
    val askForSort: (() -> Unit)? get() = definedExternally
    val isOffline: (() -> Boolean)? get() = definedExternally
    val editFields: (() -> Unit)? get() = definedExternally
    val userAddedField: ((field: ListGridField) -> Boolean)? get() = definedExternally
    val selectionUpdated: ((record: Any, recordList: Array<Any?>) -> Unit)? get() = definedExternally
}
external open class JSON : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): JSON = definedExternally
        fun encode(`object`: Any, settings: JSONEncoder? = definedExternally /* null */): String = definedExternally
        fun decode(jsonString: String): Any = definedExternally
    }
}
external open class ListGrid : VLayout, DataBoundComponent {
    open var offlineMessageStyle: String = definedExternally
//    override var autoFetchData: Boolean = definedExternally
//    override var initialCriteria: Any? = definedExternally
    open var exportDefaultBGColor: String = definedExternally
    open var exportAlternateRowBGColor: String = definedExternally
    open var exportHeaderHeights: Boolean = definedExternally
    open var exportFieldWidths: Boolean = definedExternally
    open var exportWidthScale: Number = definedExternally
    open var exportWrapHeaderTitles: Boolean = definedExternally
    open var exportFieldAlignments: Boolean = definedExternally
//    override var editProxyConstructor: String = definedExternally
//    override var styleName: String = definedExternally
    open var data: Array<Any?> = definedExternally
    open var recordEnabledProperty: String = definedExternally
    open var canExpandRecordProperty: String = definedExternally
    open var recordCanRemoveProperty: String = definedExternally
    open var animateFolders: Boolean = definedExternally
    open var animateFolderMaxRows: Number = definedExternally
    open var animateFolderTime: Number = definedExternally
    open var animateFolderSpeed: Number = definedExternally
    open var animateFolderEffect: dynamic /* String /* "none" */ | String /* "smoothStart" */ | String /* "smoothEnd" */ | String /* "smoothStartEnd" */ */ = definedExternally
//    override var fields: Array<Any?> = definedExternally
    open var defaultFields: Array<Any?> = definedExternally
//    override var dataSource: dynamic /* String | DataSource */ = definedExternally
    open var autoFetchDisplayMap: Boolean = definedExternally
    open var warnOnUnmappedValueFieldChange: Boolean = definedExternally
    open var saveLocally: Boolean = definedExternally
    open var saveRequestProperties: DSRequest = definedExternally
    open var useRemoteValidators: Boolean = definedExternally
//    override var useAllDataSourceFields: Boolean = definedExternally
//    override var showDetailFields: Boolean = definedExternally
//    override var titleField: String = definedExternally
    open var dataProperties: ResultSet = definedExternally
    open var originalData: Any = definedExternally
    open var groupTree: Tree = definedExternally
    open var groupStartOpen: dynamic /* Array<Any> | String /* "none" */ | String /* "first" */ | String /* "all" */ */ = definedExternally
    open var canCollapseGroup: Boolean = definedExternally
    open var collapseGroupOnRowClick: Boolean = definedExternally
    open var groupTitleField: String = definedExternally
    open var showGroupTitleColumn: Boolean = definedExternally
    open var groupTitleColumnProperties: ListGridField = definedExternally
    open var groupTitleColumnDefaults: ListGridField = definedExternally
    open var showGroupSummaryInHeader: Boolean = definedExternally
    open var showCollapsedGroupSummary: Boolean = definedExternally
    open var groupNodeStyle: String = definedExternally
    open var groupNodeBaseStyle: String = definedExternally
    open var groupIcon: String = definedExternally
    open var groupIconSize: Number = definedExternally
    open var groupIndentSize: Number = definedExternally
    open var groupLeadingIndent: Number = definedExternally
    open var canGroupBy: Boolean = definedExternally
    open var groupByMaxRecords: Number = definedExternally
    open var groupByAsyncThreshold: Number = definedExternally
    open var showAsynchGroupingPrompt: Boolean = definedExternally
    open var asynchGroupingPrompt: String = definedExternally
    open var isGrouped: Boolean = definedExternally
    open var nullGroupTitle: String = definedExternally
    open var groupByField: dynamic /* String | Array<String> */ = definedExternally
    open var valueIconSize: Number = definedExternally
    open var valueIconWidth: Number = definedExternally
    open var valueIconHeight: Number = definedExternally
    open var valueIconLeftPadding: Number = definedExternally
    open var valueIconRightPadding: Number = definedExternally
//    override var hiliteIcons: Array<String> = definedExternally
//    override var hiliteIconPosition: dynamic /* String /* "before" */ | String /* "after" */ | String /* "replace" */ */ = definedExternally
//    override var hiliteIconSize: Number = definedExternally
//    override var hiliteIconWidth: Number = definedExternally
//    override var hiliteIconHeight: Number = definedExternally
//    override var hiliteIconLeftPadding: Number = definedExternally
//    override var hiliteIconRightPadding: Number = definedExternally
    open var imageSize: Number = definedExternally
    open var headerSpans: Array<Any?> = definedExternally
    open var headerSpanHeight: Number = definedExternally
    open var headerSpanVAlign: String = definedExternally
    open var unspannedHeaderVAlign: String = definedExternally
    open var headerSpanConstructor: String = definedExternally
    open var headerSpan: StatefulCanvas = definedExternally
    open var showTreeColumnPicker: Boolean = definedExternally
    open var spannedHeaderBaseStyle: String = definedExternally
    open var reverseRTLAlign: Boolean = definedExternally
    open var modalEditing: Boolean = definedExternally
    open var fetchDelay: Number = definedExternally
//    override var overflow: dynamic /* String /* "auto" */ | String /* "visible" */ | String /* "hidden" */ | String /* "scroll" */ | String /* "clip-h" */ | String /* "clip-v" */ */ = definedExternally
//    override var minHeight: Number = definedExternally
    open var showAllRecords: Boolean = definedExternally
    open var showAllColumns: Boolean = definedExternally
    open var drawAllMaxCells: Number = definedExternally
    open var drawAheadRatio: Number = definedExternally
    open var quickDrawAheadRatio: Number = definedExternally
    open var instantScrollTrackRedraw: Boolean = definedExternally
    open var scrollRedrawDelay: Number = definedExternally
    open var dragScrollRedrawDelay: Number = definedExternally
    open var scrollWheelRedrawDelay: Number = definedExternally
    open var touchScrollRedrawDelay: Number = definedExternally
    open var virtualScrolling: Boolean = definedExternally
//    override var dataPageSize: Number = definedExternally
//    override var dataFetchMode: dynamic /* String /* "basic" */ | String /* "paged" */ | String /* "local" */ */ = definedExternally
//    override var dataFetchDelay: Number = definedExternally
    open var body: GridRenderer = definedExternally
    open var bodyOverflow: dynamic /* String /* "auto" */ | String /* "visible" */ | String /* "hidden" */ | String /* "scroll" */ | String /* "clip-h" */ | String /* "clip-v" */ */ = definedExternally
    open var bodyBackgroundColor: String = definedExternally
    open var bodyStyleName: String = definedExternally
    open var emptyCellValue: String = definedExternally
    open var minimumCellHeight: Number = definedExternally
    open var cellHeight: Number = definedExternally
    open var normalCellHeight: Number = definedExternally
    open var fixedRecordHeights: Boolean = definedExternally
    open var enforceVClipping: Boolean = definedExternally
    open var fixedFieldWidths: Boolean = definedExternally
    open var autoFitData: dynamic /* String /* "vertical" */ | String /* "horizontal" */ | String /* "both" */ */ = definedExternally
    open var autoFitMaxHeight: Number = definedExternally
    open var autoFitMaxRecords: Number = definedExternally
    open var autoFitExtraRecords: Number = definedExternally
    open var autoFitMaxWidth: dynamic /* String | Number */ = definedExternally
    open var autoFitMaxColumns: Number = definedExternally
    open var canAutoFitFields: Boolean = definedExternally
    open var headerAutoFitEvent: dynamic /* String /* "none" */ | String /* "click" */ | String /* "doubleClick" */ */ = definedExternally
    open var autoFitFieldWidths: Boolean = definedExternally
    open var autoSizeHeaderSpans: Boolean = definedExternally
    open var autoFitClipFields: Array<String> = definedExternally
    open var autoFitFieldsFillViewport: Boolean = definedExternally
    open var autoFitExpandField: String = definedExternally
    open var autoFitWidthApproach: dynamic /* String /* "value" */ | String /* "title" */ | String /* "both" */ */ = definedExternally
    open var autoFitIconFields: dynamic /* String /* "none" */ | String /* "title" */ | String /* "iconWidth" */ */ = definedExternally
    open var autoFitDateFields: dynamic /* String /* "value" */ | String /* "title" */ | String /* "both" */ */ = definedExternally
    open var defaultDateFieldWidth: Number = definedExternally
    open var defaultEditableDateFieldWidth: Number = definedExternally
    open var defaultDateTimeFieldWidth: Number = definedExternally
    open var defaultEditableDateTimeFieldWidth: Number = definedExternally
    open var autoFitTimeFields: dynamic /* String /* "value" */ | String /* "title" */ | String /* "both" */ */ = definedExternally
    open var defaultTimeFieldWidth: Number = definedExternally
//    override var leaveScrollbarGap: Boolean = definedExternally
    open var wrapCells: Boolean = definedExternally
    open var showClippedValuesOnHover: Boolean = definedExternally
    open var cellPadding: Number = definedExternally
    open var dateFormatter: dynamic /* String /* "toString" */ | String /* "toLocaleString" */ | String /* "toUSShortDate" */ | String /* "toUSShortDatetime" */ | String /* "toEuropeanShortDate" */ | String /* "toEuropeanShortDatetime" */ | String /* "toJapanShortDate" */ | String /* "toJapanShortDatetime" */ | String /* "toSerializeableDate" */ | String /* "toDateStamp" */ */ = definedExternally
    open var datetimeFormatter: dynamic /* String /* "toString" */ | String /* "toLocaleString" */ | String /* "toUSShortDate" */ | String /* "toUSShortDatetime" */ | String /* "toEuropeanShortDate" */ | String /* "toEuropeanShortDatetime" */ | String /* "toJapanShortDate" */ | String /* "toJapanShortDatetime" */ | String /* "toSerializeableDate" */ | String /* "toDateStamp" */ */ = definedExternally
    open var dateInputFormat: String = definedExternally
    open var timeFormatter: dynamic /* String /* "toTime" */ | String /* "to24HourTime" */ | String /* "toPaddedTime" */ | String /* "toPadded24HourTime" */ | String /* "toShortTime" */ | String /* "toShort24HourTime" */ | String /* "toShortPaddedTime" */ | String /* "toShortPadded24HourTime" */ */ = definedExternally
    open var linkTextProperty: String = definedExternally
    open var fastCellUpdates: Boolean = definedExternally
    open var baseStyle: String = definedExternally
    open var normalBaseStyle: String = definedExternally
    open var tallBaseStyle: String = definedExternally
    open var editFailedBaseStyle: String = definedExternally
    open var editFailedCSSText: String = definedExternally
    open var editPendingBaseStyle: String = definedExternally
    open var editPendingCSSText: String = definedExternally
    open var recordCustomStyleProperty: String = definedExternally
    open var recordBaseStyleProperty: String = definedExternally
    open var frozenBaseStyle: String = definedExternally
    open var shrinkForFreeze: Boolean = definedExternally
    open var alternateRecordStyles: Boolean = definedExternally
    open var alternateRecordSuffix: String = definedExternally
    open var alternateRecordFrequency: Number = definedExternally
    open var alternateFieldStyles: Boolean = definedExternally
    open var alternateFieldSuffix: String = definedExternally
    open var alternateFieldFrequency: Number = definedExternally
    open var alternateBodyStyleName: String = definedExternally
//    override var includeHilitesInSummaryFields: Boolean = definedExternally
    open var showHilitesInGroupSummary: Boolean = definedExternally
    open var hiliteCanReplaceValue: Boolean = definedExternally
    open var hiliteReplaceValueFieldTitle: String = definedExternally
    open var hiliteHTMLAfterFormat: Boolean = definedExternally
    open var showSelectedStyle: Boolean = definedExternally
    open var generateClickOnSpace: Boolean = definedExternally
    open var generateClickOnEnter: Boolean = definedExternally
    open var generateDoubleClickOnSpace: Boolean = definedExternally
    open var generateDoubleClickOnEnter: Boolean = definedExternally
    open var arrowKeyAction: String = definedExternally
    open var hiliteRowOnFocus: Boolean = definedExternally
    open var showRecordComponents: Boolean = definedExternally
    open var recordComponentPosition: dynamic /* String /* "expand" */ | String /* "within" */ */ = definedExternally
    open var showRecordComponentsByCell: Boolean = definedExternally
    open var recordComponentPoolingMode: dynamic /* String /* "viewport" */ | String /* "data" */ | String /* "recycle" */ */ = definedExternally
    open var poolComponentsPerColumn: Boolean = definedExternally
    open var showRollOver: Boolean = definedExternally
    open var useCellRollOvers: Boolean = definedExternally
    open var showRollOverCanvas: Boolean = definedExternally
    open var rollOverCanvas: Canvas = definedExternally
    open var frozenRollOverCanvas: Canvas = definedExternally
    open var showRollUnderCanvas: Boolean = definedExternally
    open var rollUnderCanvas: Canvas = definedExternally
    open var frozenRollUnderCanvas: Canvas = definedExternally
    open var showSelectedRollOverCanvas: Boolean = definedExternally
    open var showSelectedRollUnderCanvas: Boolean = definedExternally
    open var showRollOverInExpansion: Boolean = definedExternally
    open var animateRollOver: Boolean = definedExternally
    open var animateRollUnder: Boolean = definedExternally
    open var showBackgroundComponents: Boolean = definedExternally
    open var backgroundComponent: Canvas = definedExternally
//    override var canHover: Boolean = definedExternally
//    override var showHover: Boolean = definedExternally
    open var showClippedHeaderTitlesOnHover: Boolean = definedExternally
//    override var hoverStyle: String = definedExternally
    open var selection: dynamic /* CellSelection | Selection */ = definedExternally
    open var selectionManager: dynamic /* CellSelection | Selection */ = definedExternally
    open var selectionAppearance: dynamic /* String /* "checkbox" */ | String /* "rowStyle" */ */ = definedExternally
    open var canSelectAll: Boolean = definedExternally
    open var showHeaderPartialSelection: Boolean = definedExternally
    open var canSelectGroups: Boolean = definedExternally
    open var showPartialSelection: Boolean = definedExternally
    open var selectionType: dynamic /* String /* "none" */ | String /* "simple" */ | String /* "single" */ | String /* "multiple" */ */ = definedExternally
    open var selectionProperty: String = definedExternally
    open var reselectOnUpdate: Boolean = definedExternally
    open var reselectOnUpdateNotifications: dynamic /* String /* "none" */ | String /* "selectionChanged" */ | String /* "selectionUpdated" */ */ = definedExternally
    open var recordCanSelectProperty: String = definedExternally
    open var canSelectCells: Boolean = definedExternally
    open var navigateOnTab: Boolean = definedExternally
    //open var useCopyPasteShortcuts: Boolean = definedExternally
    var useCopyPasteShortcuts: Boolean? get() = definedExternally; set(value) = definedExternally

    open var originBaseStyle: String = definedExternally
    open var canDragSelect: Boolean = definedExternally
    open var canDragSelectText: Boolean = definedExternally
    open var canDropInEmptyArea: Boolean = definedExternally
    open var showSelectionCanvas: Boolean = definedExternally
    open var selectionCanvas: Canvas = definedExternally
    open var showSelectionUnderCanvas: Boolean = definedExternally
    open var selectionUnderCanvas: Canvas = definedExternally
    open var animateSelection: Boolean = definedExternally
    open var animateSelectionUnder: Boolean = definedExternally
    open var checkboxField: ListGridField = definedExternally
    open var checkboxFieldTrueImage: String = definedExternally
    open var checkboxFieldFalseImage: String = definedExternally
    open var checkboxFieldPartialImage: String = definedExternally
    open var printCheckboxFieldTrueImage: String = definedExternally
    open var printCheckboxFieldFalseImage: String = definedExternally
    open var printCheckboxFieldPartialImage: String = definedExternally
    open var checkboxFieldImageWidth: Number = definedExternally
    open var checkboxFieldImageHeight: Number = definedExternally
    open var showEmptyMessage: Boolean = definedExternally
    open var emptyMessage: String = definedExternally
    open var emptyMessageStyle: String = definedExternally
    open var filterButtonPrompt: String = definedExternally
    open var loadingDataMessage: String = definedExternally
    open var loadingDataMessageStyle: String = definedExternally
    open var loadingMessage: String = definedExternally
    open var singleCellValueProperty: String = definedExternally
    open var isSeparatorProperty: String = definedExternally
    open var showFilterEditor: Boolean = definedExternally
    open var filterEditor: RecordEditor = definedExternally
    open var filterEditorProperties: RecordEditor = definedExternally
    open var filterButtonProperties: Button = definedExternally
    open var filterEditorHeight: Number = definedExternally
    open var autoFetchTextMatchStyle: dynamic /* String /* "startsWith" */ | String /* "exact" */ | String /* "exactCase" */ | String /* "substring" */ */ = definedExternally
    open var allowFilterOperators: Boolean = definedExternally
    open var alwaysShowOperatorIcon: Boolean = definedExternally
    open var operatorIcon: FormItemIcon = definedExternally
    open var filterUsingText: String = definedExternally
    open var defaultFilterOperatorSuffix: String = definedExternally
    open var canEdit: Boolean = definedExternally
    open var recordEditProperty: String = definedExternally
    open var alwaysShowEditors: Boolean = definedExternally
    open var editByCell: Boolean = definedExternally
    open var saveByCell: Boolean = definedExternally
    open var validateByCell: Boolean = definedExternally
    open var validateOnChange: Boolean = definedExternally
    open var neverValidate: Boolean = definedExternally
    open var canRemoveRecords: Boolean = definedExternally
    open var warnOnRemoval: Boolean = definedExternally
    open var warnOnRemovalMessage: String = definedExternally
    open var removedCSSText: String = definedExternally
    open var deferRemoval: Boolean = definedExternally
    open var removeIcon: String = definedExternally
    open var unremoveIcon: String = definedExternally
    open var removeIconSize: Number = definedExternally
    open var animateRemoveRecord: Boolean = definedExternally
    open var animateRemoveTime: Number = definedExternally
    open var animateRemoveSpeed: Number = definedExternally
    open var removeFieldTitle: String = definedExternally
    open var removeFieldDefaults: ListGridField = definedExternally
    open var removeFieldProperties: ListGridField = definedExternally
    open var filterByCell: Boolean = definedExternally
    open var filterOnKeypress: Boolean = definedExternally
    open var waitForSave: Boolean = definedExternally
    open var stopOnErrors: Boolean = definedExternally
    open var autoSaveEdits: Boolean = definedExternally
    open var showErrorIcons: Boolean = definedExternally
    open var errorIconHeight: Number = definedExternally
    open var errorIconWidth: Number = definedExternally
    open var errorIconSrc: String = definedExternally
    open var confirmCancelEditing: Boolean = definedExternally
    open var cancelEditingConfirmationMessage: String = definedExternally
    open var confirmDiscardEdits: Boolean = definedExternally
    open var autoConfirmSaveEdits: Boolean = definedExternally
    open var confirmDiscardEditsMessage: String = definedExternally
    open var discardEditsSaveButtonTitle: String = definedExternally
    open var rowEndEditAction: dynamic /* String /* "none" */ | String /* "same" */ | String /* "next" */ | String /* "done" */ | String /* "stop" */ */ = definedExternally
    open var listEndEditAction: dynamic /* String /* "none" */ | String /* "same" */ | String /* "next" */ | String /* "done" */ | String /* "stop" */ */ = definedExternally
    open var enterKeyEditAction: dynamic /* String /* "done" */ | String /* "nextCell" */ | String /* "nextRow" */ | String /* "nextRowStart" */ */ = definedExternally
    open var escapeKeyEditAction: dynamic /* String /* "done" */ | String /* "cancel" */ | String /* "exit" */ | String /* "ignore" */ */ = definedExternally
    open var editEvent: dynamic /* String /* "none" */ | String /* "click" */ | String /* "doubleClick" */ */ = definedExternally
    open var editOnFocus: Boolean = definedExternally
    open var editOnF2Keypress: Boolean = definedExternally
    open var selectOnEdit: Boolean = definedExternally
    open var editSelectionType: dynamic /* String /* "none" */ | String /* "simple" */ | String /* "single" */ | String /* "multiple" */ */ = definedExternally
    open var enumCriteriaAsInitialValues: Boolean = definedExternally
    open var autoComplete: dynamic /* String /* "none" */ | String /* "native" */ */ = definedExternally
    open var longTextEditorThreshold: Number = definedExternally
    open var longTextEditorType: String = definedExternally
    open var header: Layout = definedExternally
    open var headerContextMenu: Canvas = definedExternally
    open var cellContextMenu: Layout = definedExternally
    open var spanContextMenu: Layout = definedExternally
    open var canTabToHeader: Boolean = definedExternally
    open var headerHeight: Number = definedExternally
    open var minFieldWidth: Number = definedExternally
    open var showHeader: Boolean = definedExternally
    open var headerBarStyle: String = definedExternally
    open var headerBackgroundColor: String = definedExternally
    open var showHeaderShadow: Boolean = definedExternally
    open var headerShadowVOffset: Number = definedExternally
    open var headerShadowHOffset: Number = definedExternally
    open var headerShadowSoftness: Number = definedExternally
    open var headerShadowColor: String = definedExternally
    open var headerButtonConstructor: Class = definedExternally
    open var headerBaseStyle: String = definedExternally
    open var headerTitleStyle: String = definedExternally
    open var frozenHeaderBaseStyle: String = definedExternally
    open var frozenHeaderTitleStyle: String = definedExternally
    open var headerButtonDefaults: Button = definedExternally
    open var headerButtonProperties: Button = definedExternally
    open var clipHeaderTitles: Boolean = definedExternally
    open var wrapHeaderTitles: Boolean = definedExternally
    open var wrapHeaderSpanTitles: Boolean = definedExternally
    open var sorterConstructor: Class = definedExternally
    open var sorterButtonTitle: String = definedExternally
    open var sorterDefaults: Any = definedExternally
    open var sorterProperties: Button = definedExternally
    open var sortByGroupFirst: Boolean = definedExternally
    open var groupSortDirection: dynamic /* String /* "ascending" */ | String /* "descending" */ */ = definedExternally
    open var sortBinaryByFileName: Boolean = definedExternally
    open var canSort: Boolean = definedExternally
    open var selectHeaderOnSort: Boolean = definedExternally
    open var sortFieldNum: Number = definedExternally
    open var sortField: dynamic /* String | Number */ = definedExternally
    open var sortDirection: dynamic /* String /* "ascending" */ | String /* "descending" */ */ = definedExternally
    open var showSortArrow: dynamic /* String /* "none" */ | String /* "both" */ | String /* "corner" */ | String /* "field" */ */ = definedExternally
    open var sortArrowMenuButtonSpaceOffset: Number = definedExternally
    open var sortNumeralMenuButtonSpaceOffset: Number = definedExternally
    open var canPickFields: Boolean = definedExternally
    open var canPickOmittedFields: Boolean = definedExternally
    open var canFreezeFields: Boolean = definedExternally
//    override var badFormulaResultValue: String = definedExternally
//    override var missingSummaryFieldValue: String = definedExternally
//    override var canAddFormulaFields: Boolean = definedExternally
//    override var canAddSummaryFields: Boolean = definedExternally
//    override var canEditHilites: Boolean = definedExternally
    open var showCellContextMenus: Boolean = definedExternally
    open var showHeaderContextMenu: Boolean = definedExternally
    open var showHeaderMenuButton: Boolean = definedExternally
    open var leaveHeaderMenuButtonSpace: Boolean = definedExternally
    open var headerMenuButtonConstructor: String = definedExternally
    open var headerMenuButton: StatefulCanvas = definedExternally
    open var headerMenuButtonIcon: String = definedExternally
    open var headerMenuButtonIconWidth: Number = definedExternally
    open var headerMenuButtonIconHeight: Number = definedExternally
    open var headerMenuButtonWidth: Number = definedExternally
    open var headerMenuButtonHeight: Any = definedExternally
    open var canDragRecordsOut: Boolean = definedExternally
    open var canAcceptDroppedRecords: Boolean = definedExternally
    open var canReorderRecords: Boolean = definedExternally
    open var canReorderFields: Boolean = definedExternally
    open var canResizeFields: Boolean = definedExternally
    open var dragTrackerMode: dynamic /* String /* "none" */ | String /* "title" */ | String /* "icon" */ | String /* "record" */ */ = definedExternally
    open var resizeFieldsInRealTime: Boolean = definedExternally
//    override var dragDataAction: dynamic /* String /* "none" */ | String /* "move" */ | String /* "copy" */ */ = definedExternally
//    override var skinImgDir: String = definedExternally
    open var sortAscendingImage: ImgProperties = definedExternally
    open var sortDescendingImage: ImgProperties = definedExternally
    open var trackerImage: ImgProperties = definedExternally
    open var booleanBaseStyle: String = definedExternally
    open var printBooleanBaseStyle: String = definedExternally
    open var booleanTrueImage: String = definedExternally
    open var booleanFalseImage: String = definedExternally
    open var booleanPartialImage: String = definedExternally
    open var printBooleanTrueImage: String = definedExternally
    open var printBooleanFalseImage: String = definedExternally
    open var printBooleanPartialImage: String = definedExternally
    open var booleanImageWidth: Number = definedExternally
    open var booleanImageHeight: Number = definedExternally
    open var showInitialDragHandles: Boolean = definedExternally
    open var dragHandleFieldTitle: String = definedExternally
    open var dragHandleIcon: String = definedExternally
    open var dragHandleIconSize: Number = definedExternally
    open var dragHandleField: ListGridField = definedExternally
    open var showRowNumbers: Boolean = definedExternally
    open var rowNumberStyle: String = definedExternally
    open var applyRowNumberStyle: Boolean = definedExternally
    open var rowNumberStart: Number = definedExternally
    open var rowNumberField: ListGridField = definedExternally
    open var exportRawValues: Boolean = definedExternally
    open var expansionComponentPoolingMode: dynamic /* String /* "none" */ | String /* "destroy" */ */ = definedExternally
    open var canExpandRecords: Boolean = definedExternally
    open var canExpandMultipleRecords: Boolean = definedExternally
    open var maxExpandedRecords: Number = definedExternally
    open var maxExpandedRecordsPrompt: String = definedExternally
    open var detailField: String = definedExternally
    open var expansionMode: dynamic /* String /* "detailField" */ | String /* "details" */ | String /* "related" */ | String /* "editor" */ | String /* "detailRelated" */ */ = definedExternally
    open var expansionField: ListGridField = definedExternally
    open var expansionFieldTrueImage: String = definedExternally
    open var expansionFieldFalseImage: String = definedExternally
    open var expansionFieldImageShowSelected: Boolean = definedExternally
    open var expansionFieldImageWidth: Number = definedExternally
    open var expansionFieldImageHeight: Number = definedExternally
    open var expansionDetailField: HTMLFlow = definedExternally
    open var expansionDetails: DetailViewer = definedExternally
    open var expansionRelated: ListGrid = definedExternally
    open var expansionEditor: DynamicForm = definedExternally
    open var expansionEditorShowSaveDialog: Boolean = definedExternally
    open var expansionEditorSaveDialogPrompt: String = definedExternally
    open var expansionEditorCollapseOnSave: Boolean = definedExternally
    open var showExpansionEditorSaveButton: Boolean = definedExternally
    open var expansionEditorSaveButton: IButton = definedExternally
    open var expansionEditorSaveButtonTitle: String = definedExternally
    open var expansionDetailRelated: HLayout = definedExternally
    open var expansionLayout: VLayout = definedExternally
    open var detailDS: String = definedExternally
    open var recordDetailDSProperty: String = definedExternally
    open var childExpansionMode: dynamic /* String /* "detailField" */ | String /* "details" */ | String /* "related" */ | String /* "editor" */ | String /* "detailRelated" */ */ = definedExternally
    open var expansionCanEdit: Boolean = definedExternally
    open var filterLocalData: Boolean = definedExternally
    open var recordDropAppearance: dynamic /* String /* "between" */ | String /* "both" */ | String /* "over" */ | String /* "body" */ */ = definedExternally
    open var discardEditsOnHideField: Boolean = definedExternally
    open var fieldState: String = definedExternally
    open var checkboxFieldHSpace: Number = definedExternally
    open var selectedState: String = definedExternally
    open var sortState: String = definedExternally
    open var groupState: String = definedExternally
    open var viewState: String = definedExternally
    open var gridComponents: dynamic /* Array<Any?> | Array<dynamic /* String /* "body" */ | String /* "filterEditor" */ | String /* "header" */ | String /* "summaryRow" */ */> */ = definedExternally
    open var autoFitHeaderHeights: Boolean = definedExternally
    open var iconPadding: Number = definedExternally
    open var applyFormulaAfterSummary: Boolean = definedExternally
    open var allowRowSpanning: Boolean = definedExternally
    open var useRowSpanStyling: Boolean = definedExternally
    open var rowSpanSelectionMode: dynamic /* String /* "both" */ | String /* "forward" */ | String /* "outerSpan" */ */ = definedExternally
    open var rowSpanEditMode: dynamic /* String /* "first" */ | String /* "each" */ */ = definedExternally
    open var recordComponentHeight: Number = definedExternally
    open var printAutoFit: Boolean = definedExternally
    open var printWrapCells: Boolean = definedExternally
    open var printHeaderStyle: String = definedExternally
    open var printBaseStyle: String = definedExternally
    open var printMaxRows: Number = definedExternally
//    override var showHoverComponents: Boolean = definedExternally
    open var hoverMode: dynamic /* String /* "detailField" */ | String /* "details" */ | String /* "related" */ | String /* "detailRelated" */ */ = definedExternally
    open var selectOnExpandRecord: Boolean = definedExternally
    open var selectCellTextOnClick: Boolean = definedExternally
    open var scrollToCellXPosition: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var scrollToCellYPosition: dynamic /* String /* "top" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
    open var canFocusInEmptyGrid: Boolean = definedExternally
    open var showGridSummary: Boolean = definedExternally
    open var invalidSummaryValue: String = definedExternally
    open var includeInSummaryProperty: String = definedExternally
    open var gridSummaryRecordProperty: String = definedExternally
    open var groupSummaryRecordProperty: String = definedExternally
    open var summaryRowDataSource: DataSource = definedExternally
    open var summaryRowCriteria: Any? = definedExternally
    open var summaryRowFetchRequestProperties: DSRequest = definedExternally
    open var recordSummaryBaseStyle: String = definedExternally
    open var summaryRow: ListGrid = definedExternally
    open var summaryRowHeight: Number = definedExternally
    open var summaryRowStyle: String = definedExternally
    open var hideEmptySummaryRow: Boolean = definedExternally
    open var defaultFilterOperator: dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */ = definedExternally
    open var allowFilterExpressions: Boolean = definedExternally
//    override var canEditFieldAttribute: String = definedExternally
//    override var dragTrackerStyle: String = definedExternally
    open var screenReaderCellSeparator: String = definedExternally
    open var screenReaderRowSeparator: String = definedExternally
    open var showHeaderSpanTitlesInFormulaBuilder: Boolean = definedExternally
    open var formulaBuilderSpanTitleSeparator: String = definedExternally
    open var showHeaderSpanTitlesInSortEditor: Boolean = definedExternally
    open var sortEditorSpanTitleSeparator: String = definedExternally
    open var showHeaderSpanTitlesInHiliteEditor: Boolean = definedExternally
    open var hiliteEditorSpanTitleSeparator: String = definedExternally
    open var headerHoverStyle: String = definedExternally
    open var headerHoverAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var headerHoverVAlign: dynamic /* String /* "top" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
    open var headerHoverOpacity: Number = definedExternally
    open var headerHoverHeight: Number = definedExternally
    open var headerHoverWidth: Number = definedExternally
    open var headerHoverWrap: Boolean = definedExternally
    open var freezeOnRightText: String = definedExternally
    open var freezeOnLeftText: String = definedExternally
    open var sortFieldAscendingText: String = definedExternally
    open var sortFieldDescendingText: String = definedExternally
    open var clearSortFieldText: String = definedExternally
    open var clearAllSortingText: String = definedExternally
    open var clearFilterText: String = definedExternally
    open var configureSortText: String = definedExternally
    open var configureGroupingText: String = definedExternally
    open var autoFitFieldText: String = definedExternally
    open var autoFitAllText: String = definedExternally
    open var fieldVisibilitySubmenuTitle: String = definedExternally
    open var freezeFieldText: String = definedExternally
    open var unfreezeFieldText: String = definedExternally
    open var groupByText: String = definedExternally
    open var ungroupText: String = definedExternally
    open var canMultiSort: Boolean = definedExternally
//    override var multiSortDialogDefaults: MultiSortDialog = definedExternally
//    override var multiSortDialogProperties: MultiSortDialog = definedExternally
    open var canMultiGroup: Boolean = definedExternally
    open var initialSort: Array<Any?> = definedExternally
    open var sortNumeralStyle: String = definedExternally
    open var showSortNumerals: Boolean = definedExternally
    open var chartConstructor: String = definedExternally
    open var chartType: dynamic /* String /* "Area" */ | String /* "Column" */ | String /* "Bar" */ | String /* "Line" */ | String /* "Radar" */ | String /* "Pie" */ | String /* "Doughnut" */ | String /* "Scatter" */ | String /* "Bubble" */ | String /* "Histogram" */ */ = definedExternally
    open var showGroupTitleInFrozenBody: Boolean = definedExternally
    open var showGroupSummary: Boolean = definedExternally
    open var groupByFieldSummaries: Array<String> = definedExternally
    open var groupSummaryStyle: String = definedExternally
    open var multiGroupDialogDefaults: MultiGroupDialog = definedExternally
    open var multiGroupDialogProperties: MultiGroupDialog = definedExternally
    open var useAdvancedFieldPicker: Boolean = definedExternally
    open var canEditTitles: Boolean = definedExternally
    open var fieldPickerWindow: FieldPickerWindow = definedExternally
    open var fieldPickerFieldProperties: Array<String> = definedExternally
    open var advancedFieldPickerThreshold: Number = definedExternally
    open var fieldPickerShowSampleValues: Boolean = definedExternally
    open var locateRowsBy: String = definedExternally
    open var locateColumnsBy: String = definedExternally
    open fun fetchData(criteria: Any? = definedExternally /* null */, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
//    override fun exportData(requestProperties: DSRequest?, callback: Any?): Unit = definedExternally
    open fun filterData(criteria: Any? = definedExternally /* null */, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun fetchRelatedData(record: ListGridRecord, schema: String, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun fetchRelatedData(record: ListGridRecord, schema: Canvas, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun fetchRelatedData(record: ListGridRecord, schema: DataSource, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun clearCriteria(callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun getCriteria(): Any? = definedExternally
    open fun setCriteria(criteria: Any?): Unit = definedExternally
    open fun setCriteria(criteria: AdvancedCriteria): Unit = definedExternally
    open fun invalidateCache(): Unit = definedExternally
    open fun refreshData(callback: Any? = definedExternally /* null */): Unit = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "startsWith" */): Boolean = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "exact" */): Boolean = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "exactCase" */): Boolean = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "substring" */): Boolean = definedExternally
    open fun addData(newRecord: Record, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun updateData(updatedRecord: Record, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun removeSelectedData(callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun getSelectedRecord(): ListGridRecord = definedExternally
    open fun getSelectedRecords(excludePartialSelections: Boolean? = definedExternally /* null */): Array<Any?> = definedExternally
    open fun isSelected(record: ListGridRecord): Boolean = definedExternally
    open fun isPartiallySelected(record: ListGridRecord): Boolean = definedExternally
    open fun getExportBGColor(rowNum: Number, colNum: Number, record: Record): String = definedExternally
    open fun getExportRowBGColor(rowNum: Number, record: Record): String = definedExternally
    open fun getExportColumnBGColor(colNum: Number): String = definedExternally
    open fun exportClientData(requestProperties: DSRequest? = definedExternally /* null */, callback: ((response: RPCResponse, rawData: Any, request: RPCRequest) -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun isExportingClientData(): Boolean = definedExternally
//    override fun markForRedraw(reason: String?): Unit = definedExternally
    open fun getVisibleRows(): Array<Number> = definedExternally
    open fun getDrawnRows(): Array<Any> = definedExternally
    open fun getCellStyle(record: ListGridRecord, rowNum: Number, colNum: Number): String = definedExternally
    open fun refreshCellStyle(rowNum: Number, colNum: Number): Unit = definedExternally
    open fun cellOver(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun rowOver(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun cellOut(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun rowOut(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun cellHover(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun cellValueHover(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun rowHover(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun cellHoverHTML(record: ListGridRecord, rowNum: Number, colNum: Number): String = definedExternally
    open fun cellValueHoverHTML(record: ListGridRecord, rowNum: Number, colNum: Number, defaultHTML: String): String = definedExternally
    open fun cellContextClick(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun rowContextClick(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun cellMouseDown(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun rowMouseDown(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun cellMouseUp(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun rowMouseUp(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun cellClick(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun cellDoubleClick(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun getRowTop(rowNum: Number): Number = definedExternally
    open fun getRowPageTop(rowNum: Number): Number = definedExternally
    open fun getDataSource(): DataSource = definedExternally
    open fun getAutoFitMaxWidth(): Number = definedExternally
    open fun setFastCellUpdates(fastCellUpdates: Boolean): Unit = definedExternally
//    override fun shouldIncludeHiliteInSummaryField(summaryFieldName: String, usedFieldName: String): Boolean = definedExternally
    open fun markRecordRemoved(rowNum: Number): Unit = definedExternally
    open fun markRecordsRemoved(records: Number): Unit = definedExternally
    open fun markRecordsRemoved(records: Array<Any?>): Unit = definedExternally
    open fun recordMarkedAsRemoved(rowNum: Number): Boolean = definedExternally
    open fun unmarkRecordRemoved(rowNum: Number): Unit = definedExternally
    open fun markSelectionRemoved(): Unit = definedExternally
    open fun getFormulaFieldValue(field: ListGridField, record: Record): dynamic /* String | Number */ = definedExternally
    open fun getSummaryFieldValue(field: ListGridField, record: Record): String = definedExternally
    open fun showDragHandles(): Unit = definedExternally
    open fun hideDragHandles(): Unit = definedExternally
    open fun isRowNumberField(field: ListGridField): Boolean = definedExternally
    open fun getExpansionField(): ListGridField = definedExternally
    open fun isExpansionField(field: ListGridField): Boolean = definedExternally
    open fun canExpandRecord(record: ListGridRecord, rowNum: Number): Boolean = definedExternally
    open fun setCanExpandRecords(canExpand: Boolean): Unit = definedExternally
    open fun expandRecord(record: ListGridRecord): Unit = definedExternally
    open fun expandRecords(records: Array<Any?>): Unit = definedExternally
    open fun collapseRecord(record: ListGridRecord): Unit = definedExternally
    open fun collapseRecords(records: Array<Any?>): Unit = definedExternally
    open fun isExpanded(record: ListGridRecord): Boolean = definedExternally
    open fun getExpandedRecords(): Array<Any?> = definedExternally
    open fun getCurrentExpansionComponent(record: Number): Canvas = definedExternally
    open fun getCurrentExpansionComponent(record: ListGridRecord): Canvas = definedExternally
    open fun getExpansionComponent(record: ListGridRecord): Canvas = definedExternally
    open fun getRelatedDataSource(record: ListGridRecord): DataSource = definedExternally
    open fun setCanReorderRecords(canReorderRecords: Boolean): Unit = definedExternally
    open fun setData(newData: Array<Any?>): Unit = definedExternally
    open fun setSelectionType(selectionType: String /* "none" | simple | single | multiple */): Unit = definedExternally
    open fun setSelectionAppearance(selectionAppearance: String /* "checkbox" | "rowStyle" */): Unit = definedExternally
    open fun setBodyOverflow(overflow: String /* "auto" | visible | hidden | scroll | clip-h | clip-v */): Unit = definedExternally
    open fun setBodyStyleName(styleName: String): Unit = definedExternally
    open fun setAlternateBodyStyleName(styleName: String): Unit = definedExternally
    open fun setAlternateRecordStyles(alternateStyles: Boolean): Unit = definedExternally
    open fun setAutoFitData(autoFitData: String /* "vertical" | horizontal | both */): Unit = definedExternally
    open fun setAutoFitExtraRecords(extraRecords: Number): Unit = definedExternally
    open fun setAutoFitMaxRecords(maxRecords: Number): Unit = definedExternally
    open fun setAutoFitMaxHeight(height: Number): Unit = definedExternally
    open fun setAutoFitMaxColumns(maxColumns: Number): Unit = definedExternally
    open fun setAutoFitMaxWidth(width: String): Unit = definedExternally
    open fun setAutoFitMaxWidth(width: Number): Unit = definedExternally
    open fun autoFitField(fieldName: String): Number = definedExternally
    open fun autoFitFields(fields: Array<Any?>? = definedExternally /* null */): Unit = definedExternally
    open fun setAutoFitWidth(fieldName: String, autoFit: Boolean): Unit = definedExternally
    open fun setAutoFitFieldWidths(autoFit: Boolean, dontResetWidths: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun setAutoFitWidthApproach(approach: String /* "value" | title | both */): Unit = definedExternally
    open fun setFieldProperties(fieldNum: String, properties: ListGridField): Unit = definedExternally
    open fun setFieldProperties(fieldNum: Number, properties: ListGridField): Unit = definedExternally
    open fun setFieldMinWidth(fieldNum: String, width: Number): Unit = definedExternally
    open fun setFieldMinWidth(fieldNum: Number, width: Number): Unit = definedExternally
    open fun setFieldMaxWidth(fieldNum: String, width: Number): Unit = definedExternally
    open fun setFieldMaxWidth(fieldNum: Number, width: Number): Unit = definedExternally
    open fun setMinFieldWidth(width: Number): Unit = definedExternally
    open fun setFieldTitle(fieldNum: String, title: String): Unit = definedExternally
    open fun setFieldTitle(fieldNum: Number, title: String): Unit = definedExternally
    open fun setFieldHeaderBaseStyle(name: String, newStyle: String): Unit = definedExternally
    open fun setFieldHeaderTitleStyle(name: String, newStyle: String): Unit = definedExternally
    open fun setFieldIcon(fieldName: String, icon: String): Unit = definedExternally
    open fun setFieldCellIcon(fieldName: String, cellIcon: String): Unit = definedExternally
    open fun showFields(field: Array<String>, suppressRelayout: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun showFields(field: Array<Any?>, suppressRelayout: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun showField(field: String, suppressRelayout: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun showField(field: ListGridField, suppressRelayout: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun hideFields(fields: Array<String>, suppressRelayout: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun hideFields(fields: Array<Any?>, suppressRelayout: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun hideField(field: String, suppressRelayout: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun hideField(field: ListGridField, suppressRelayout: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun fieldIsVisible(field: String): Boolean = definedExternally
    open fun fieldIsVisible(field: ListGridField): Boolean = definedExternally
//    override fun getTitleField(): String = definedExternally
    open fun setFields(newFields: Array<Any?>? = definedExternally /* null */): Unit = definedExternally
    open fun focusInFilterEditor(fieldName: String? = definedExternally /* null */): Unit = definedExternally
    open fun filterByEditor(): Unit = definedExternally
    open fun getFieldState(): String = definedExternally
    open fun setFieldState(fieldState: String): Unit = definedExternally
    open fun getCheckboxField(): ListGridField = definedExternally
    open fun isCheckboxField(field: ListGridField): Boolean = definedExternally
    open fun getSelectedState(): String = definedExternally
    open fun getCellSelection(): CellSelection = definedExternally
    open fun setSelectedState(selectedState: String): Unit = definedExternally
    open fun getSortState(): String = definedExternally
    open fun setSortState(sortState: String): Unit = definedExternally
    open fun getViewState(): String = definedExternally
    open fun getGroupState(): String = definedExternally
    open fun setGroupState(groupState: String): Unit = definedExternally
    open fun setViewState(viewState: String): Unit = definedExternally
//    override fun setDataSource(dataSource: String, fields: Array<Any?>?): Unit = definedExternally
//    override fun setDataSource(dataSource: DataSource, fields: Array<Any?>?): Unit = definedExternally
    open fun refreshFields(): Unit = definedExternally
    open fun getCurrentFieldWidths(): Array<Number> = definedExternally
    open fun getFieldWidth(fieldNum: String): Number = definedExternally
    open fun getFieldWidth(fieldNum: Number): Number = definedExternally
    open fun getDefaultFieldWidth(field: ListGridField): Number = definedExternally
    open fun getFieldContentWidth(field: ListGridField): Number = definedExternally
    open fun getGroupByFields(): Array<String> = definedExternally
    open fun openGroup(record: Record): Boolean = definedExternally
    open fun closeGroup(record: Record): Boolean = definedExternally
    open fun redrawHeader(rightNow: Boolean): Unit = definedExternally
    open fun getBaseStyle(record: ListGridRecord, rowNum: Number, colNum: Number): String = definedExternally
    open fun getCellCSSText(record: ListGridRecord, rowNum: Number, colNum: Number): String = definedExternally
    open fun getCellValue(record: Any, recordNum: Number, fieldNum: Number): String = definedExternally
    open fun cellValueIsClipped(rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun getCellAlign(record: ListGridRecord, rowNum: Number, colNum: Number): dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open fun getCellVAlign(record: ListGridRecord, rowNum: Number, colNum: Number): dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open fun getRowSpan(record: ListGridRecord, rowNum: Number, colNum: Number): Number = definedExternally
    open fun getCellRowSpan(rowNum: Number, colNum: Number): Number = definedExternally
    open fun getCellStartRow(rowNum: Number, colNum: Number): Number = definedExternally
    open fun getValueIcon(field: ListGridField, value: Any, record: ListGridRecord): String = definedExternally
    open fun getDefaultFormattedValue(record: Record, rowNum: Number, colNum: Number): String = definedExternally
    open fun getDefaultFormattedFieldValue(record: Record, field: ListGridField, rowNum: Number? = definedExternally /* null */, colNum: Number? = definedExternally /* null */): String = definedExternally
    open fun setShowRecordComponents(showRecordComponents: Boolean): Unit = definedExternally
    open fun getDrawArea(): Array<Number> = definedExternally
    open fun setDontAutoDestroyComponent(component: Canvas, dontAutoDestroy: Boolean): Unit = definedExternally
    open fun invalidateRecordComponents(): Unit = definedExternally
    open fun refreshRecordComponent(rowNum: Number, colNum: Number? = definedExternally /* null */): Unit = definedExternally
    open fun setRecordComponentHeight(height: Number): Unit = definedExternally
    open fun rowClick(record: ListGridRecord, recordNum: Number, fieldNum: Number, keyboardGenerated: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun rowDoubleClick(record: ListGridRecord, recordNum: Number, fieldNum: Number, keyboardGenerated: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun getCellHoverComponent(record: Record, rowNum: Number, colNum: Number): Canvas = definedExternally
//    override fun selectRecord(record: Number, newState: Boolean?): Unit = definedExternally
//    override fun selectRecord(record: Record, newState: Boolean?): Unit = definedExternally
//    override fun deselectRecord(record: Number): Unit = definedExternally
//    override fun deselectRecord(record: Record): Unit = definedExternally
//    override fun selectRecords(records: Number, newState: Boolean?): Unit = definedExternally
//    override fun selectRecords(records: Array<Any?>, newState: Boolean?): Unit = definedExternally
//    override fun deselectRecords(records: Number): Unit = definedExternally
//    override fun deselectRecords(records: Array<Any?>): Unit = definedExternally
    open fun selectAllRecords(visibleNodesOnly: Boolean? = definedExternally /* null */): Unit = definedExternally
//    override fun deselectAllRecords(): Unit = definedExternally
//    override fun selectRange(startRow: Number, endRow: Number, newState: Boolean?): Unit = definedExternally
//    override fun deselectRange(startRow: Number, endRow: Number): Unit = definedExternally
    open fun userSelectAllRecords(): Unit = definedExternally
//    override fun anySelected(): Boolean = definedExternally
//    override fun selectSingleRecord(record: Number): Unit = definedExternally
//    override fun selectSingleRecord(record: Record): Unit = definedExternally
    open fun canSelectCell(rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun canSelectRecord(record: ListGridRecord): Boolean = definedExternally
//    override fun keyPress(): Boolean = definedExternally
    open fun bodyKeyPress(): Boolean = definedExternally
    open fun focusInCell(row: Number, col: Number): Unit = definedExternally
    open fun focusInRow(row: Number): Unit = definedExternally
    open fun getFocusRow(): Number = definedExternally
    open fun scrollToColumn(colNum: Number, xPosition: String? /* "left" */ = definedExternally /* null */): Unit = definedExternally
//    open fun scrollToColumn(colNum: Number, xPosition: String? /* "right" */ = definedExternally /* null */): Unit = definedExternally
//    open fun scrollToColumn(colNum: Number, xPosition: String? /* "center" */ = definedExternally /* null */): Unit = definedExternally
    open fun scrollToRow(rowNum: Number, yPosition: String? /* "top" */ = definedExternally /* null */): Unit = definedExternally
//    open fun scrollToRow(rowNum: Number, yPosition: String? /* "center" */ = definedExternally /* null */): Unit = definedExternally
//    open fun scrollToRow(rowNum: Number, yPosition: String? /* "bottom" */ = definedExternally /* null */): Unit = definedExternally
    open fun scrollToCell(rowNum: Number, colNum: Number, xPosition: String? /* "left" */ = definedExternally /* null */, yPosition: String? /* "top" */ = definedExternally /* null */): Unit = definedExternally
//    open fun scrollToCell(rowNum: Number, colNum: Number, xPosition: String? /* "left" */ = definedExternally /* null */, yPosition: String? /* "center" */ = definedExternally /* null */): Unit = definedExternally
//    open fun scrollToCell(rowNum: Number, colNum: Number, xPosition: String? /* "left" */ = definedExternally /* null */, yPosition: String? /* "bottom" */ = definedExternally /* null */): Unit = definedExternally
//    open fun scrollToCell(rowNum: Number, colNum: Number, xPosition: String? /* "right" */ = definedExternally /* null */, yPosition: String? /* "top" */ = definedExternally /* null */): Unit = definedExternally
//    open fun scrollToCell(rowNum: Number, colNum: Number, xPosition: String? /* "right" */ = definedExternally /* null */, yPosition: String? /* "center" */ = definedExternally /* null */): Unit = definedExternally
//    open fun scrollToCell(rowNum: Number, colNum: Number, xPosition: String? /* "right" */ = definedExternally /* null */, yPosition: String? /* "bottom" */ = definedExternally /* null */): Unit = definedExternally
//    open fun scrollToCell(rowNum: Number, colNum: Number, xPosition: String? /* "center" */ = definedExternally /* null */, yPosition: String? /* "top" */ = definedExternally /* null */): Unit = definedExternally
//    open fun scrollToCell(rowNum: Number, colNum: Number, xPosition: String? /* "center" */ = definedExternally /* null */, yPosition: String? /* "center" */ = definedExternally /* null */): Unit = definedExternally
//    open fun scrollToCell(rowNum: Number, colNum: Number, xPosition: String? /* "center" */ = definedExternally /* null */, yPosition: String? /* "bottom" */ = definedExternally /* null */): Unit = definedExternally
    open fun recordClick(viewer: ListGrid, record: ListGridRecord, recordNum: Number, field: ListGridField, fieldNum: Number, value: Any, rawValue: Any): Boolean = definedExternally
    open fun recordDoubleClick(viewer: ListGrid, record: ListGridRecord, recordNum: Number, field: ListGridField, fieldNum: Number, value: Any, rawValue: Any): Boolean = definedExternally
    open fun setShowGridSummary(showGridSummary: Boolean): Unit = definedExternally
    open fun recalculateSummaries(records: Array<Any?>? = definedExternally /* null */, fields: Array<Any?>? = definedExternally /* null */): Unit = definedExternally
    open fun recalculateGridSummary(): Unit = definedExternally
    open fun getGridSummaryFunction(field: ListGridField): dynamic /* String /* "title" */ | String /* "sum" */ | String /* "avg" */ | String /* "max" */ | String /* "min" */ | String /* "multiplier" */ | String /* "count" */ | String /* "first" */ | String /* "concat" */ */ = definedExternally
    open fun getGridSummary(field: ListGridField): Any = definedExternally
    open fun getGridSummaryData(): Array<Any?> = definedExternally
    open fun getGroupSummaryData(records: Array<Any?>, groupNode: Record, recalculate: Boolean? = definedExternally /* null */): Array<Any?> = definedExternally
    open fun getRecordSummary(record: ListGridRecord, field: String): Any = definedExternally
    open fun getRecordSummary(record: ListGridRecord, field: Number): Any = definedExternally
    open fun getRecordSummary(record: ListGridRecord, field: ListGridField): Any = definedExternally
    open fun isSummaryRecord(record: ListGridRecord): Boolean = definedExternally
    open fun setUserFormula(field: String, userFormula: UserFormula? = definedExternally /* null */): Unit = definedExternally
    open fun setUserFormula(field: ListGridField, userFormula: UserFormula? = definedExternally /* null */): Unit = definedExternally
    open fun setUserSummary(field: String, userSummary: UserSummary? = definedExternally /* null */): Unit = definedExternally
    open fun setUserSummary(field: ListGridField, userSummary: UserSummary? = definedExternally /* null */): Unit = definedExternally
    open fun setUserFormulaText(field: String, text: String? = definedExternally /* null */): Unit = definedExternally
    open fun setUserFormulaText(field: ListGridField, text: String? = definedExternally /* null */): Unit = definedExternally
    open fun setUserSummaryText(field: String, text: String? = definedExternally /* null */): Unit = definedExternally
    open fun setUserSummaryText(field: ListGridField, text: String? = definedExternally /* null */): Unit = definedExternally
    open fun setShowFilterEditor(value: Boolean): Unit = definedExternally
    open fun getFilterEditorValueMap(field: ListGridField): Any? = definedExternally
    open fun getFilterEditorType(field: ListGridField): String = definedExternally
    open fun setFilterEditorCriteria(criteria: Any?): Unit = definedExternally
    open fun setFilterEditorCriteria(criteria: AdvancedCriteria): Unit = definedExternally
    open fun getFilterEditorCriteria(omitHiddenFields: Boolean? = definedExternally /* null */): dynamic /* Any? | AdvancedCriteria */ = definedExternally
    open fun canEditCell(rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun fieldIsEditable(field: String): Boolean = definedExternally
    open fun fieldIsEditable(field: Number): Boolean = definedExternally
    open fun fieldIsEditable(field: ListGridField): Boolean = definedExternally
    open fun startEditing(rowNum: Number? = definedExternally /* null */, colNum: Number? = definedExternally /* null */, suppressFocus: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun stopHover(): Unit = definedExternally
    open fun getEditFormItem(field: String): FormItem = definedExternally
    open fun getEditFormItem(field: Number): FormItem = definedExternally
    open fun getEditorValueMap(field: ListGridField, values: Any): Any? = definedExternally
    open fun getEditorValueIcons(field: Any, values: Any): Any = definedExternally
    open fun setEditorValueMap(fieldID: String, map: Any): Unit = definedExternally
    open fun setEditorValueMap(fieldID: Number, map: Any): Unit = definedExternally
    open fun setEditorValueMap(fieldID: Any?, map: Any): Unit = definedExternally
    open fun getEditorType(field: ListGridField, values: Any): String = definedExternally
    open fun getEditorProperties(field: ListGridField): Any = definedExternally
    open fun refreshCell(rowNum: Number, colNum: Number): Unit = definedExternally
    open fun refreshRow(rowNum: Number): Unit = definedExternally
    open fun startEditingNew(newValues: Record? = definedExternally /* null */, suppressFocus: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun startEditingNew(newValues: Map<Any>? = definedExternally /* null */, suppressFocus: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun getAllEditRows(): Array<Number> = definedExternally
    open fun getEditValues(valuesID: Number): Any = definedExternally
    open fun getEditValues(valuesID: Any?): Any = definedExternally
    open fun getEditedRecord(valuesID: Number): Any = definedExternally
    open fun getEditedRecord(valuesID: Any?): Any = definedExternally
    open fun getEditedCell(record: Number, field: String): Any = definedExternally
    open fun getEditedCell(record: Number, field: Number): Any = definedExternally
    open fun getEditedCell(record: Any?, field: String): Any = definedExternally
    open fun getEditedCell(record: Any?, field: Number): Any = definedExternally
    open fun setEditValues(rowNum: Number, values: Any): Unit = definedExternally
    open fun setEditValue(rowNum: Number, colNum: String, value: Any): Unit = definedExternally
    open fun setEditValue(rowNum: Number, colNum: Number, value: Any): Unit = definedExternally
    open fun getEditValue(rowNum: Number, colNum: String): Any = definedExternally
    open fun getEditValue(rowNum: Number, colNum: Number): Any = definedExternally
    open fun clearEditValue(editValuesID: Number, colNum: String): Unit = definedExternally
    open fun clearEditValue(editValuesID: Number, colNum: Number): Unit = definedExternally
    open fun clearEditValue(editValuesID: Any?, colNum: String): Unit = definedExternally
    open fun clearEditValue(editValuesID: Any?, colNum: Number): Unit = definedExternally
    open fun getEditRow(): Number = definedExternally
    open fun getEditCol(): Number = definedExternally
    open fun getEditField(): Any = definedExternally
    open fun cancelEditing(): Unit = definedExternally
    open fun endEditing(): Unit = definedExternally
    open fun findNextEditCell(rowNum: Number, colNum: Number, direction: Number, stepThroughFields: Boolean, checkStartingCell: Boolean? = definedExternally /* null */): Array<Any> = definedExternally
    open fun discardAllEdits(rows: Array<Number>? = definedExternally /* null */, dontHideEditor: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun discardEdits(rowNum: Number, colNum: Number, dontHideEditor: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun saveEdits(editCompletionEvent: dynamic /* String /* "click" */ | String /* "doubleClick" */ | String /* "click_outside" */ | String /* "enter" */ | String /* "escape" */ | String /* "arrow_up" */ | String /* "arrow_down" */ | String /* "tab" */ | String /* "shift_tab" */ | String /* "field_change" */ | String /* "programmatic" */ */ = definedExternally /* null */, callback: Any? = definedExternally /* null */, rowNum: Number? = definedExternally /* null */): Unit = definedExternally
    open fun rowHasChanges(rowNum: Number): Boolean = definedExternally
    open fun hasChanges(): Boolean = definedExternally
    open fun cellHasChanges(rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun saveAllEdits(rows: Array<Number>? = definedExternally /* null */, saveCallback: Any? = definedExternally /* null */): Boolean = definedExternally
    open fun validateRow(rowNum: Number): Boolean = definedExternally
    open fun validateCell(rowNum: Number, fieldName: String): Boolean = definedExternally
    open fun validateCell(rowNum: Number, fieldName: Number): Boolean = definedExternally
    open fun getRequiredFieldMessage(field: Any, record: Any): String = definedExternally
    open fun hasErrors(): Boolean = definedExternally
    open fun rowHasErrors(rowNum: Number): Boolean = definedExternally
    open fun cellHasErrors(rowNum: Number, fieldID: String): Boolean = definedExternally
    open fun cellHasErrors(rowNum: Number, fieldID: Number): Boolean = definedExternally
    open fun getRowErrors(rowNum: Number): Any = definedExternally
    open fun getCellErrors(rowNum: Number, fieldName: String): Array<String> = definedExternally
    open fun getCellErrors(rowNum: Number, fieldName: Number): Array<String> = definedExternally
    open fun setFieldError(rowNum: Number, fieldName: String, errorMessage: String): Unit = definedExternally
    open fun setFieldError(rowNum: Number, fieldName: String, errorMessage: Array<String>): Unit = definedExternally
    open fun setFieldError(rowNum: Number, fieldName: Number, errorMessage: String): Unit = definedExternally
    open fun setFieldError(rowNum: Number, fieldName: Number, errorMessage: Array<String>): Unit = definedExternally
    open fun setRowErrors(rowNum: Number, errors: Any): Unit = definedExternally
    open fun clearFieldError(rowNum: Number, fieldName: String): Unit = definedExternally
    open fun clearFieldError(rowNum: Number, fieldName: Number): Unit = definedExternally
    open fun clearRowErrors(rowNum: Number): Unit = definedExternally
    open fun removeData(data: Record, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun removeRecordClick(rowNum: Number): Unit = definedExternally
//    override fun setDragTracker(): Boolean = definedExternally
    open fun getDragTrackerIcon(records: Array<Any?>): String = definedExternally
    open fun getDragTrackerTitle(record: ListGridRecord, rowNum: Number): String = definedExternally
//    override fun willAcceptDrop(): Boolean = definedExternally
//    override fun transferSelectedData(source: DataBoundComponent, index: Number?, callback: Any?): Unit = definedExternally
    open fun recordDrop(dropRecords: Array<Any?>, targetRecord: ListGridRecord, index: Number, sourceWidget: Canvas): Unit = definedExternally
//    override fun transferDragData(): Array<Any> = definedExternally
//    override fun getDragData(source: DataBoundComponent): Array<Any?> = definedExternally
    open fun getRecord(recordNum: Number): ListGridRecord = definedExternally
    open fun getCellRecord(recordNum: Number): ListGridRecord = definedExternally
    open fun getTotalRows(): Number = definedExternally
    open fun getAllFields(): Array<Any?> = definedExternally
    open fun getFieldName(colNum: String): String = definedExternally
    open fun getFieldName(colNum: Number): String = definedExternally
    open fun getFieldByName(fieldName: String): ListGridField = definedExternally
//    override fun getField(colNum: String): ListGridField = definedExternally
//    override fun getField(colNum: Number): ListGridField = definedExternally
    open fun getFieldNum(fieldID: String): Number = definedExternally
    open fun getFieldNum(fieldID: Number): Number = definedExternally
    open fun getFieldTitle(fieldId: String): String = definedExternally
    open fun getFieldTitle(fieldId: Number): String = definedExternally
    open fun getSummaryTitle(field: ListGridField): String = definedExternally
    open fun setValueMap(fieldID: String, map: Any): Unit = definedExternally
    open fun setValueMap(fieldID: Number, map: Any): Unit = definedExternally
    open fun getDisplayValue(fieldID: String, valueFieldValue: Any): String = definedExternally
    open fun getDisplayValue(fieldID: Number, valueFieldValue: Any): String = definedExternally
    open fun getDisplayValue(fieldID: ListGridField, valueFieldValue: Any): String = definedExternally
    open fun getRecordIndex(record: ListGridRecord): Number = definedExternally
    open fun getRowNum(record: ListGridRecord): Number = definedExternally
    open fun getEventRow(y: Number? = definedExternally /* null */): Number = definedExternally
    open fun getEventColumn(x: Number? = definedExternally /* null */): Number = definedExternally
    open fun getRecordDropPosition(): dynamic /* String /* "none" */ | String /* "over" */ | String /* "before" */ | String /* "after" */ */ = definedExternally
    open fun getDropIndex(recordNum: Number? = definedExternally /* null */, reorderPosition: String? /* "over" */ = definedExternally /* null */): Number = definedExternally
//    open fun getDropIndex(recordNum: Number? = definedExternally /* null */, reorderPosition: String? /* "before" */ = definedExternally /* null */): Number = definedExternally
//    open fun getDropIndex(recordNum: Number? = definedExternally /* null */, reorderPosition: String? /* "after" */ = definedExternally /* null */): Number = definedExternally
    open fun cellSelectionChanged(cellList: Array<Any>): Boolean = definedExternally
    open fun selectionChanged(record: ListGridRecord, state: Boolean): Unit = definedExternally
//    override fun selectionUpdated(record: Any, recordList: Array<Any?>): Unit = definedExternally
    open fun setCanFreezeFields(canFreeze: Boolean): Unit = definedExternally
    open fun getColumnLeft(colNum: Number): Number = definedExternally
    open fun getColumnPageLeft(colNum: Number): Number = definedExternally
    open fun getColumnWidth(colNum: Number): Number = definedExternally
    open fun getCellPageRect(rowNum: Number, colNum: Number): Array<Number> = definedExternally
    open fun freezeField(field: String): Unit = definedExternally
    open fun freezeField(field: Number): Unit = definedExternally
    open fun freezeField(field: Array<Any>): Unit = definedExternally
    open fun freezeField(field: ListGridField): Unit = definedExternally
    open fun unfreezeField(field: String): Unit = definedExternally
    open fun unfreezeField(field: Number): Unit = definedExternally
    open fun unfreezeField(field: Array<Any>): Unit = definedExternally
    open fun unfreezeField(field: ListGridField): Unit = definedExternally
    open fun toggleFrozen(field: String): Unit = definedExternally
    open fun toggleFrozen(field: Number): Unit = definedExternally
    open fun toggleFrozen(field: Array<Any>): Unit = definedExternally
    open fun toggleFrozen(field: ListGridField): Unit = definedExternally
    open fun getBody(): GridRenderer = definedExternally
    open fun getDrawnRowHeight(rowNum: Number): Number = definedExternally
    open fun getRowHeight(record: ListGridRecord, rowNum: Number): Number = definedExternally
    open fun getRollOverCanvas(rowNum: Number, colNum: Number): Canvas = definedExternally
    open fun getFrozenRollOverCanvas(rowNum: Number, colNum: Number): Canvas = definedExternally
    open fun getRollUnderCanvas(rowNum: Number, colNum: Number): Canvas = definedExternally
    open fun getFrozenRollUnderCanvas(rowNum: Number, colNum: Number): Canvas = definedExternally
    open fun setFieldButtonProperties(name: String, properties: Canvas): Unit = definedExternally
    open fun setHeaderSpanButtonProperties(name: String, properties: Canvas): Unit = definedExternally
    open fun setHeaderHeight(height: Number): Unit = definedExternally
    open fun setShowHeader(show: Boolean): Unit = definedExternally
    open fun headerTitleClipped(fieldNum: Number): Boolean = definedExternally
    open fun headerHoverHTML(fieldNum: Number, defaultHTML: String): String = definedExternally
    open fun headerClick(fieldNum: Number): Unit = definedExternally
    open fun headerDoubleClick(fieldNum: Number): Unit = definedExternally
    open fun reorderField(fieldNum: Number, moveToPosition: Number): Unit = definedExternally
    open fun reorderFields(start: Number, end: Number, moveDelta: Number): Unit = definedExternally
    open fun setCanResizeFields(canResize: Boolean): Unit = definedExternally
    open fun resizeField(fieldNum: Number, newWidth: Number): Unit = definedExternally
    open fun sorterContextClick(): Boolean = definedExternally
    open fun displayHeaderContextMenu(target: Canvas, position: Array<Any>? = definedExternally /* null */): Unit = definedExternally
    open fun getToggleFreezeText(field: ListGridField): String = definedExternally
    open fun getGroupByText(field: ListGridField): String = definedExternally
    open fun getHeaderSpanContextMenuItems(headerSpan: HeaderSpan): Array<Any?> = definedExternally
    open fun getHeaderContextMenuItems(fieldNum: Number? = definedExternally /* null */): Array<Any?> = definedExternally
    open fun sorterClick(): Boolean = definedExternally
    open fun unsort(): Unit = definedExternally
    open fun resort(): Unit = definedExternally
    open fun sort(sortField: String? = definedExternally /* null */, sortDirection: String? /* "ascending" */ = definedExternally /* null */): Boolean = definedExternally
//    open fun sort(sortField: String? = definedExternally /* null */, sortDirection: String? /* "descending" */ = definedExternally /* null */): Boolean = definedExternally
    open fun sort(sortField: Number? = definedExternally /* null */, sortDirection: String? /* "ascending" */ = definedExternally /* null */): Boolean = definedExternally
//    open fun sort(sortField: Number? = definedExternally /* null */, sortDirection: String? /* "descending" */ = definedExternally /* null */): Boolean = definedExternally
    open fun getSortField(): String = definedExternally
//    override fun askForSort(): Unit = definedExternally
    open fun toggleSort(fieldName: String): Unit = definedExternally
    open fun addSort(sortSpecifier: SortSpecifier): Unit = definedExternally
//    override fun getSort(): Array<Any?> = definedExternally
    open fun getSortSpecifier(fieldName: String): SortSpecifier = definedExternally
    open fun getSortFieldCount(): Number = definedExternally
    open fun isSortField(fieldName: String): Boolean = definedExternally
    open fun getSortNumeralHTML(fieldName: String, sortIndex: Number): String = definedExternally
    open fun clearSort(): Unit = definedExternally
    open fun getSortByGroupFirst(): Unit = definedExternally
    open fun setSortByGroupFirst(sortByGroupFirst: Boolean): Unit = definedExternally
    open fun setSortHandler(sortSpecifiers: Array<Any?>): Boolean = definedExternally
//    override fun setSort(sortSpecifiers: Array<Any?>): Unit = definedExternally
    open fun displaySort(sortSpecifiers: Array<Any?>): Unit = definedExternally
    open fun applySortToData(sortSpecifiers: Array<Any?>): Unit = definedExternally
    open fun addEmbeddedComponent(component: Canvas, record: ListGridRecord, rowNum: Number? = definedExternally /* null */, colNum: Number? = definedExternally /* null */, position: String? /* "expand" */ = definedExternally /* null */): Unit = definedExternally
//    open fun addEmbeddedComponent(component: Canvas, record: ListGridRecord, rowNum: Number? = definedExternally /* null */, colNum: Number? = definedExternally /* null */, position: String? /* "within" */ = definedExternally /* null */): Unit = definedExternally
    open fun removeEmbeddedComponent(record: Canvas, component: Number? = definedExternally /* null */): Unit = definedExternally
//    open fun removeEmbeddedComponent(record: Canvas, component: Canvas? = definedExternally /* null */): Unit = definedExternally
    open fun removeEmbeddedComponent(record: ListGridRecord, component: Number? = definedExternally /* null */): Unit = definedExternally
//    open fun removeEmbeddedComponent(record: ListGridRecord, component: Canvas? = definedExternally /* null */): Unit = definedExternally
    open fun getRecordComponent(rowNum: Number, colNum: Number? = definedExternally /* null */): Canvas = definedExternally
    open fun chartData(labelField: String, dataFields: Array<String>? = definedExternally /* null */, dataRows: Array<Any?>? = definedExternally /* null */, chartProperties: FacetChart? = definedExternally /* null */, labelFieldFirst: Boolean? = definedExternally /* null */): FacetChart = definedExternally
    open fun chartRow(rowNum: Number, dataFields: Array<String>? = definedExternally /* null */, chartProperties: Chart? = definedExternally /* null */): Chart = definedExternally
    open fun chartColumn(dataColumn: String, labelColumn: String, chartProperties: Chart? = definedExternally /* null */): Chart = definedExternally
    open fun regroup(): Unit = definedExternally
    open fun getGroupMembers(node: GroupNode, recordsOnly: Boolean): Array<Any?> = definedExternally
    open fun groupBy(vararg args: Any): Unit = definedExternally
    open fun getGroupNodeHTML(node: Any, gridBody: GridRenderer? = definedExternally /* null */): Unit = definedExternally
    open fun getGroupTreeSelection(excludePartialSelection: Boolean? = definedExternally /* null */, groupNodesOnly: Boolean? = definedExternally /* null */): Array<Any?> = definedExternally
    open fun getSelection(excludePartialSelections: Boolean? = definedExternally /* null */): Array<Any?> = definedExternally
    open fun isGroupNode(record: ListGridRecord): Boolean = definedExternally
    open fun setShowGroupSummaryInHeader(showGroupSummaryInHeader: Boolean): Unit = definedExternally
    open fun setShowCollapsedGroupSummary(showCollapsedGroupSummary: Boolean): Unit = definedExternally
    open fun ungroup(): Unit = definedExternally
    open fun setHeaderSpans(headerSpans: Array<Any?>): Unit = definedExternally
    open fun setHeaderSpanTitle(name: String, newTitle: String): Unit = definedExternally
    open fun setHeaderSpanHeaderTitle(name: String, newTitle: String): Unit = definedExternally
    open fun setHeaderSpanBaseStyle(name: String, newStyle: String): Unit = definedExternally
    open fun setHeaderSpanTitleStyle(name: String, newTitle: String): Unit = definedExternally
    open fun setShowGroupSummary(showGroupSummary: Boolean): Unit = definedExternally
    open fun setGroupByFieldSummaries(groupByFieldSummaries: Array<String>): Unit = definedExternally
    open fun configureGrouping(): Unit = definedExternally
    open fun getOriginalData(): Any = definedExternally
    open fun getSelectedCellData(): Any = definedExternally
    open fun applyCellData(cellData: Any): Unit = definedExternally
    open fun applyRecordData(recordData: Any): Unit = definedExternally
    open fun cellChanged(record: ListGridRecord, newValue: Any, oldValue: Any, rowNum: Number, colNum: Number, grid: ListGrid): Unit = definedExternally
    open fun editComplete(rowNum: Number, colNum: Number, newValues: Any?, oldValues: Record, editCompletionEvent: dynamic /* String /* "click" */ | String /* "doubleClick" */ | String /* "click_outside" */ | String /* "enter" */ | String /* "escape" */ | String /* "arrow_up" */ | String /* "arrow_down" */ | String /* "tab" */ | String /* "shift_tab" */ | String /* "field_change" */ | String /* "programmatic" */ */, dsResponse: DSResponse? = definedExternally /* null */): Unit = definedExternally
    open fun editComplete(rowNum: Number, colNum: Number, newValues: Record, oldValues: Record, editCompletionEvent: dynamic /* String /* "click" */ | String /* "doubleClick" */ | String /* "click_outside" */ | String /* "enter" */ | String /* "escape" */ | String /* "arrow_up" */ | String /* "arrow_down" */ | String /* "tab" */ | String /* "shift_tab" */ | String /* "field_change" */ | String /* "programmatic" */ */, dsResponse: DSResponse? = definedExternally /* null */): Unit = definedExternally
    open fun editFailed(rowNum: Number, colNum: Number, newValues: Any?, oldValues: Record, editCompletionEvent: dynamic /* String /* "click" */ | String /* "doubleClick" */ | String /* "click_outside" */ | String /* "enter" */ | String /* "escape" */ | String /* "arrow_up" */ | String /* "arrow_down" */ | String /* "tab" */ | String /* "shift_tab" */ | String /* "field_change" */ | String /* "programmatic" */ */, dsResponse: DSResponse? = definedExternally /* null */): Unit = definedExternally
    open fun editFailed(rowNum: Number, colNum: Number, newValues: Record, oldValues: Record, editCompletionEvent: dynamic /* String /* "click" */ | String /* "doubleClick" */ | String /* "click_outside" */ | String /* "enter" */ | String /* "escape" */ | String /* "arrow_up" */ | String /* "arrow_down" */ | String /* "tab" */ | String /* "shift_tab" */ | String /* "field_change" */ | String /* "programmatic" */ */, dsResponse: DSResponse? = definedExternally /* null */): Unit = definedExternally
    open fun editorEnter(record: ListGridRecord, value: Any, rowNum: Number, colNum: Number): Unit = definedExternally
    open fun rowEditorEnter(record: ListGridField, editValues: Any, rowNum: Number): Unit = definedExternally
    open fun editorExit(editCompletionEvent: dynamic /* String /* "click" */ | String /* "doubleClick" */ | String /* "click_outside" */ | String /* "enter" */ | String /* "escape" */ | String /* "arrow_up" */ | String /* "arrow_down" */ | String /* "tab" */ | String /* "shift_tab" */ | String /* "field_change" */ | String /* "programmatic" */ */, record: ListGridRecord, newValue: Any, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun rowEditorExit(editCompletionEvent: dynamic /* String /* "click" */ | String /* "doubleClick" */ | String /* "click_outside" */ | String /* "enter" */ | String /* "escape" */ | String /* "arrow_up" */ | String /* "arrow_down" */ | String /* "tab" */ | String /* "shift_tab" */ | String /* "field_change" */ | String /* "programmatic" */ */, record: ListGridRecord, newValues: Any, rowNum: Number): Boolean = definedExternally
    open fun formatCellValue(value: Any, record: ListGridRecord, rowNum: Number, colNum: Number): String = definedExternally
    open fun formatInactiveCellValue(value: Any, record: ListGridRecord, rowNum: Number, colNum: Number): String = definedExternally
    open fun formatEditorValue(value: Any, record: ListGridRecord, rowNum: Number, colNum: Number): Any = definedExternally
    open fun parseEditorValue(value: Any, record: ListGridRecord, rowNum: Number, colNum: Number): Any = definedExternally
    open fun sortChanged(sortSpecifiers: Array<Any?>): Unit = definedExternally
    open fun fieldStateChanged(): Unit = definedExternally
    open fun groupStateChanged(): Unit = definedExternally
    open fun viewStateChanged(): Unit = definedExternally
    open fun dataArrived(startRow: Number, endRow: Number): Unit = definedExternally
    open fun dataChanged(operationType: String? = definedExternally /* null */): Unit = definedExternally
    open fun headerHover(fieldNum: Number): Unit = definedExternally
    open fun drawAreaChanged(oldStartRow: Number, oldEndRow: Number, oldStartCol: Number, oldEndCol: Number): Unit = definedExternally
    open fun showRecordComponent(record: ListGridRecord, colNum: Number? = definedExternally /* null */): Boolean = definedExternally
    open fun createRecordComponent(record: ListGridRecord, colNum: Number): Canvas = definedExternally
    open fun updateRecordComponent(record: ListGridRecord, colNum: Number, component: Canvas, recordChanged: Boolean): Canvas = definedExternally
    open fun filterEditorSubmit(criteria: Any?): Boolean = definedExternally
    open fun handleGroupBy(fields: Array<String>, specifiers: Array<Any?>): Boolean = definedExternally
    open fun groupByComplete(fields: Array<String>): Unit = definedExternally
    open fun hilitesChanged(): Unit = definedExternally
    open fun cellErrorIconHover(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun cellErrorIconOver(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun cellErrorIconOut(record: ListGridRecord, rowNum: Number, colNum: Number): Boolean = definedExternally
    open fun formulaUpdated(field: ListGridField, formula: UserFormula): Unit = definedExternally
    open fun summaryUpdated(field: ListGridField, summary: UserSummary): Unit = definedExternally
//    override var deepCloneOnEdit: Boolean = definedExternally
//    override var deepCloneNonFieldValuesOnEdit: Boolean = definedExternally
//    override var showHiddenFields: Boolean = definedExternally
//    override var showComplexFields: Boolean = definedExternally
//    override var fetchOperation: String = definedExternally
//    override var updateOperation: String = definedExternally
//    override var addOperation: String = definedExternally
//    override var removeOperation: String = definedExternally
//    override var exportFields: Array<String> = definedExternally
//    override var exportAll: Boolean = definedExternally
//    override var exportIncludeSummaries: Boolean = definedExternally
//    override var dragRecategorize: dynamic /* String /* "never" */ | String /* "always" */ | String /* "checked" */ */ = definedExternally
//    override var preventDuplicates: Boolean = definedExternally
//    override var duplicateDragMessage: String = definedExternally
//    override var showOfflineMessage: Boolean = definedExternally
//    override var offlineMessage: String = definedExternally
//    override var offlineSaveMessage: String = definedExternally
//    override var addDropValues: Boolean = definedExternally
//    override var dropValues: Any = definedExternally
//    override var dataArity: String = definedExternally
//    override var progressiveLoading: Boolean = definedExternally
//    override var useFlatFields: Boolean = definedExternally
//    override var canChangeNonFieldValues: Boolean = definedExternally
//    override var implicitCriteria: Any? = definedExternally
//    override var hilites: Array<Any?> = definedExternally
//    override var hiliteProperty: String = definedExternally
//    override var hiliteState: String = definedExternally
//    override var fieldNamingStrategy: dynamic /* String /* "simple" */ | String /* "uuid" */ */ = definedExternally
//    override var editHilitesText: String = definedExternally
//    override var editHilitesDialogTitle: String = definedExternally
//    override var fieldEditorWindowTitle: String = definedExternally
//    override var fieldEditorWindow: Window = definedExternally
//    override var hiliteEditor: HiliteEditor = definedExternally
//    override var addFormulaFieldText: String = definedExternally
//    override var editFormulaFieldText: String = definedExternally
//    override var removeFormulaFieldText: String = definedExternally
//    override var addSummaryFieldText: String = definedExternally
//    override var editSummaryFieldText: String = definedExternally
//    override var removeSummaryFieldText: String = definedExternally
//    override var iconField: String = definedExternally
//    override var infoField: String = definedExternally
//    override var dataField: String = definedExternally
//    override var descriptionField: String = definedExternally
//    override var emptyExportMessage: String = definedExternally
//    override var unknownErrorMessage: String = definedExternally
//    override var noErrorDetailsMessage: String = definedExternally
//    override fun dragComplete(): Unit = definedExternally
//    override fun dropComplete(transferredRecords: Array<Any?>): Unit = definedExternally
//    override fun getDataPathField(dataPath: String): Unit = definedExternally
//    override fun find(advancedCriteria: AdvancedCriteria): Any = definedExternally
//    override fun findAll(advancedCriteria: AdvancedCriteria): Array<Any> = definedExternally
//    override fun findIndex(advancedCriteria: AdvancedCriteria): Number = definedExternally
//    override fun findNextIndex(startIndex: Number, advancedCriteria: AdvancedCriteria, endIndex: Number?): Number = definedExternally
//    override fun getFieldAlignments(): Array<dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */> = definedExternally
//    override fun findByKey(keyValue: Any): Record = definedExternally
//    override fun getSelectionLength(): Number = definedExternally
//    override fun getHilites(): Array<Any?> = definedExternally
//    override fun setHilites(hilites: Array<Any?>): Unit = definedExternally
//    override fun getHiliteState(): String = definedExternally
//    override fun setHiliteState(hiliteState: String): Unit = definedExternally
//    override fun enableHilite(hiliteID: String, enable: Boolean?): Unit = definedExternally
//    override fun disableHilite(hiliteID: String): Unit = definedExternally
//    override fun enableHiliting(enable: Boolean?): Unit = definedExternally
//    override fun disableHiliting(): Unit = definedExternally
//    override fun editHilites(): Unit = definedExternally
//    override fun transferRecords(dropRecords: Array<Any?>, targetRecord: Record, index: Number, sourceWidget: Canvas, callback: Any?): Unit = definedExternally
//    override fun getDropValues(record: Record, sourceDS: DataSource, targetRecord: Record, index: Number, sourceWidget: Canvas): Any = definedExternally
//    override fun addFormulaField(): Unit = definedExternally
//    override fun editFormulaField(field: String): Unit = definedExternally
//    override fun addSummaryField(): Unit = definedExternally
//    override fun editSummaryField(field: String): Unit = definedExternally
//    override fun getTitleFieldValue(record: Record): String = definedExternally
//    override fun getRecordHiliteCSSText(record: Record, cssText: String, field: String): String = definedExternally
//    override fun isOffline(): Boolean = definedExternally
//    override fun editFields(): Unit = definedExternally
//    override fun userAddedField(field: ListGridField): Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ListGrid = definedExternally
        var BEFORE: String = definedExternally
        var AFTER: String = definedExternally
        var OVER: String = definedExternally
        var BETWEEN: String = definedExternally
        var BOTH: String = definedExternally
        var BODY: String = definedExternally
        var NONE: String = definedExternally
        var CLICK_OUTSIDE: String = definedExternally
        var CLICK: String = definedExternally
        var DOUBLE_CLICK: String = definedExternally
        var ENTER_KEYPRESS: String = definedExternally
        var ESCAPE_KEYPRESS: String = definedExternally
        var UP_ARROW_KEYPRESS: String = definedExternally
        var DOWN_ARROW_KEYPRESS: String = definedExternally
        var TAB_KEYPRESS: String = definedExternally
        var SHIFT_TAB_KEYPRESS: String = definedExternally
        var EDIT_FIELD_CHANGE: String = definedExternally
        var PROGRAMMATIC: String = definedExternally
        fun requestsArePending(): Boolean = definedExternally
    }
//    override fun willFetchData(newCriteria: Any?): Boolean = definedExternally
    open fun scrollToColumn(colNum: Number): Unit = definedExternally
    open fun scrollToRow(rowNum: Number): Unit = definedExternally
    open fun scrollToCell(rowNum: Number, colNum: Number): Unit = definedExternally
    open fun startEditingNew(): Unit = definedExternally
    open fun getDropIndex(): Number = definedExternally
    open fun sort(): Boolean = definedExternally
    open fun addEmbeddedComponent(component: Canvas, record: ListGridRecord): Unit = definedExternally
    open fun removeEmbeddedComponent(record: Canvas): Unit = definedExternally
    open fun removeEmbeddedComponent(record: ListGridRecord): Unit = definedExternally
}
external open class MultiGroupPanel : Layout {
    open var fields: Array<Any?> = definedExternally
    open var addLevelButtonTitle: String = definedExternally
    open var deleteLevelButtonTitle: String = definedExternally
    open var copyLevelButtonTitle: String = definedExternally
    open var invalidListPrompt: String = definedExternally
    open var propertyFieldTitle: String = definedExternally
    open var groupingFieldTitle: String = definedExternally
    open var firstGroupLevelTitle: String = definedExternally
    open var otherGroupLevelTitle: String = definedExternally
    open var addLevelButton: IButton = definedExternally
    open var deleteLevelButton: IButton = definedExternally
    open var copyLevelButton: IButton = definedExternally
    open var levelUpButtonTitle: String = definedExternally
    open var levelUpButton: ImgButton = definedExternally
    open var levelDownButtonTitle: String = definedExternally
    open var levelDownButton: ImgButton = definedExternally
    open var optionsGrid: ListGrid = definedExternally
    open var initialGrouping: Array<Any> = definedExternally
    open var maxLevels: Number = definedExternally
    open fun getNumLevels(): Number = definedExternally
    open fun getGroup(): Array<Any?> = definedExternally
    open fun validate(): Boolean = definedExternally
    open fun groupChanged(groupLevels: Array<Any?>): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): MultiGroupPanel = definedExternally
    }
}
external open class DrawCurve : DrawItem {
//    override var knobs: Array<dynamic /* String /* "resize" */ | String /* "move" */ | String /* "startPoint" */ | String /* "endPoint" */ | String /* "controlPoint1" */ | String /* "controlPoint2" */ | String /* "rotate" */ */> = definedExternally
//    override var showTitleLabelBackground: Boolean = definedExternally
    open var startPoint: Point = definedExternally
    open var endPoint: Point = definedExternally
    open var controlPoint1: Point = definedExternally
    open var controlPoint2: Point = definedExternally
//    override var lineCap: dynamic /* String /* "square" */ | String /* "round" */ | String /* "butt" */ */ = definedExternally
    open var c1Knob: DrawKnob = definedExternally
    open var c2Knob: DrawKnob = definedExternally
//    override fun getCenter(): Point = definedExternally
    open fun setStartPoint(left: Number, top: Number): Unit = definedExternally
    open fun setEndPoint(left: Number, top: Number): Unit = definedExternally
    open fun setControlPoint1(left: Number, top: Number): Unit = definedExternally
    open fun setControlPoint2(left: Number, top: Number): Unit = definedExternally
//    override fun getBoundingBox(): Array<Number> = definedExternally
    open fun moveStartPointTo(x: Number, y: Number): Unit = definedExternally
//    override fun moveBy(x: Number, y: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DrawCurve = definedExternally
    }
}
external open class PickListMenu : ListGrid {
//    override var emptyMessage: String = definedExternally
//    override var dataProperties: ResultSet = definedExternally
//    override var styleName: String = definedExternally
//    override var bodyStyleName: String = definedExternally
//    override var normalCellHeight: Number = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): PickListMenu = definedExternally
    }
}
external open class Img : StatefulCanvas {
    open var name: String = definedExternally
    open var src: String = definedExternally
    open var altText: String = definedExternally
//    override var prompt: String = definedExternally
    open var activeAreaHTML: String = definedExternally
    open var imageType: dynamic /* String /* "center" */ | String /* "tile" */ | String /* "stretch" */ | String /* "normal" */ */ = definedExternally
    open var imageHeight: Number = definedExternally
    open var imageWidth: Number = definedExternally
    open var size: Number = definedExternally
    open var showTitle: Boolean = definedExternally
    open var usePNGFix: Boolean = definedExternally
//    override var editProxyConstructor: String = definedExternally
    open fun setImageType(imageType: String /* "center" */): Unit = definedExternally
    open fun setImageType(imageType: String /* "tile" */): Unit = definedExternally
    open fun setImageType(imageType: String /* "stretch" */): Unit = definedExternally
    open fun setImageType(imageType: String /* "normal" */): Unit = definedExternally
    open fun setSrc(URL: String): Unit = definedExternally
    open fun resetSrc(): Unit = definedExternally
//    override fun getHoverHTML(): String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Img = definedExternally
    }
}
external open class ValuesManager : Class {
    open var dataSource: dynamic /* String | DataSource */ = definedExternally
    open var addOperation: String = definedExternally
    open var updateOperation: String = definedExternally
    open var removeOperation: String = definedExternally
    open var fetchOperation: String = definedExternally
    open var members: Array<Any?> = definedExternally
    open var disableValidation: Boolean = definedExternally
    open var autoSynchronize: Boolean = definedExternally
    open var deepCloneOnEdit: Boolean = definedExternally
    open var operator: dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */ = definedExternally
    open var saveOperationType: dynamic /* String /* "custom" */ | String /* "fetch" */ | String /* "add" */ | String /* "update" */ | String /* "remove" */ | String /* "validate" */ | String /* "viewFile" */ | String /* "downloadFile" */ | String /* "storeTestData" */ | String /* "clientExport" */ | String /* "getFile" */ | String /* "hasFile" */ | String /* "listFiles" */ | String /* "removeFile" */ | String /* "saveFile" */ | String /* "renameFile" */ | String /* "getFileVersion" */ | String /* "hasFileVersion" */ | String /* "listFileVersions" */ | String /* "removeFileVersion" */ */ = definedExternally
    open var suppressValidationErrorCallback: Boolean = definedExternally
    open fun synchronizeMembers(): Unit = definedExternally
    open fun synchronizeMembersOnDataPath(dataPath: String): Unit = definedExternally
    open fun synchronizeMember(member: Canvas): Unit = definedExternally
    open fun memberSynchronized(member: Canvas): Unit = definedExternally
    open fun setDataSource(dataSource: String): Unit = definedExternally
    open fun setDataSource(dataSource: DataSource): Unit = definedExternally
    open fun getDataSource(): DataSource = definedExternally
    open fun getItem(itemID: String, retrieveAll: Boolean? = definedExternally /* null */): FormItem = definedExternally
    open fun getMembers(): Array<Any?> = definedExternally
    open fun getMember(ID: String): Canvas = definedExternally
    open fun getMemberForField(fieldName: String): Canvas = definedExternally
    open fun validate(): Boolean = definedExternally
    open fun getValidatedValues(): Any = definedExternally
    open fun setErrors(errors: Any, showErrors: Boolean): Unit = definedExternally
    open fun addFieldErrors(fieldName: String, errors: String, showErrors: Boolean): Unit = definedExternally
    open fun addFieldErrors(fieldName: String, errors: Array<String>, showErrors: Boolean): Unit = definedExternally
    open fun setFieldErrors(fieldName: String, errors: String, showErrors: Boolean): Unit = definedExternally
    open fun setFieldErrors(fieldName: String, errors: Array<String>, showErrors: Boolean): Unit = definedExternally
    open fun clearErrors(showErrors: Boolean): Unit = definedExternally
    open fun clearFieldErrors(fieldName: String, show: Boolean): Unit = definedExternally
    open fun getErrors(): Any = definedExternally
    open fun getFieldErrors(fieldName: String): dynamic /* String | Array<String> */ = definedExternally
    open fun hasErrors(): Boolean = definedExternally
    open fun hasFieldErrors(fieldName: String): Boolean = definedExternally
    open fun showErrors(): Unit = definedExternally
    open fun showFieldErrors(): Unit = definedExternally
    open fun handleAsyncValidationReply(success: Boolean, errors: Any): Unit = definedExternally
    open fun isPendingAsyncValidation(): Boolean = definedExternally
    open fun getValues(): Any = definedExternally
    open fun setValues(values: Any): Unit = definedExternally
    open fun clearValues(): Unit = definedExternally
    open fun getMemberValues(ID: String): Any = definedExternally
    open fun setMemberValues(ID: String, values: Any): Unit = definedExternally
    open fun getValuesAsCriteria(advanced: Boolean, textMatchStyle: String? /* "startsWith" */ = definedExternally /* null */): dynamic /* Any? | AdvancedCriteria */ = definedExternally
    open fun getValuesAsCriteria(advanced: Boolean, textMatchStyle: String? /* "exact" */ = definedExternally /* null */): dynamic /* Any? | AdvancedCriteria */ = definedExternally
    open fun getValuesAsCriteria(advanced: Boolean, textMatchStyle: String? /* "exactCase" */ = definedExternally /* null */): dynamic /* Any? | AdvancedCriteria */ = definedExternally
    open fun getValuesAsCriteria(advanced: Boolean, textMatchStyle: String? /* "substring" */ = definedExternally /* null */): dynamic /* Any? | AdvancedCriteria */ = definedExternally
    open fun getValuesAsAdvancedCriteria(textMatchStyle: String? /* "startsWith" */ = definedExternally /* null */): AdvancedCriteria = definedExternally
    open fun getValuesAsAdvancedCriteria(textMatchStyle: String? /* "exact" */ = definedExternally /* null */): AdvancedCriteria = definedExternally
    open fun getValuesAsAdvancedCriteria(textMatchStyle: String? /* "exactCase" */ = definedExternally /* null */): AdvancedCriteria = definedExternally
    open fun getValuesAsAdvancedCriteria(textMatchStyle: String? /* "substring" */ = definedExternally /* null */): AdvancedCriteria = definedExternally
    open fun rememberValues(): Any = definedExternally
    open fun getOldValues(): Any = definedExternally
    open fun getChangedValues(): Any = definedExternally
    open fun resetValues(): Unit = definedExternally
    open fun valuesHaveChanged(): Boolean = definedExternally
    open fun getValue(fieldName: String, component: Canvas? = definedExternally /* null */): Any = definedExternally
    open fun setValue(fieldName: String, newValue: Any): Unit = definedExternally
    open fun clearValue(fieldName: String): Unit = definedExternally
    open fun addMember(member: String): Unit = definedExternally
    open fun addMember(member: DynamicForm): Unit = definedExternally
    open fun addMembers(members: Array<Any?>): Unit = definedExternally
    open fun removeMember(member: String): Unit = definedExternally
    open fun removeMember(member: DynamicForm): Unit = definedExternally
    open fun removeMembers(members: Array<Any?>): Unit = definedExternally
    open fun handleHiddenValidationErrors(errors: Any): Boolean = definedExternally
    open fun submitValues(values: Any, valuesManager: ValuesManager): Unit = definedExternally
    open fun itemChanged(item: FormItem, newValue: Any): Unit = definedExternally
    open fun editNewRecord(initialValues: Any? = definedExternally /* null */): Unit = definedExternally
    open fun editNewRecord(initialValues: Record? = definedExternally /* null */): Unit = definedExternally
    open fun editRecord(record: Record): Unit = definedExternally
    open fun setSaveOperationType(operationType: dynamic /* String /* "custom" */ | String /* "fetch" */ | String /* "add" */ | String /* "update" */ | String /* "remove" */ | String /* "validate" */ | String /* "viewFile" */ | String /* "downloadFile" */ | String /* "storeTestData" */ | String /* "clientExport" */ | String /* "getFile" */ | String /* "hasFile" */ | String /* "listFiles" */ | String /* "removeFile" */ | String /* "saveFile" */ | String /* "renameFile" */ | String /* "getFileVersion" */ | String /* "hasFileVersion" */ | String /* "listFileVersions" */ | String /* "removeFileVersion" */ */): Unit = definedExternally
    open fun isNewRecord(): Boolean = definedExternally
    open fun getSaveOperationType(requestProperties: DSRequest? = definedExternally /* null */): dynamic /* String /* "custom" */ | String /* "fetch" */ | String /* "add" */ | String /* "update" */ | String /* "remove" */ | String /* "validate" */ | String /* "viewFile" */ | String /* "downloadFile" */ | String /* "storeTestData" */ | String /* "clientExport" */ | String /* "getFile" */ | String /* "hasFile" */ | String /* "listFiles" */ | String /* "removeFile" */ | String /* "saveFile" */ | String /* "renameFile" */ | String /* "getFileVersion" */ | String /* "hasFileVersion" */ | String /* "listFileVersions" */ | String /* "removeFileVersion" */ */ = definedExternally
    open fun editSelectedData(selectionComponent: String): Unit = definedExternally
    open fun editSelectedData(selectionComponent: ListGrid): Unit = definedExternally
    open fun saveData(callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun submit(callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun cancel(requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun filterData(criteria: Any? = definedExternally /* null */, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun fetchData(criteria: Any? = definedExternally /* null */, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ValuesManager = definedExternally
        fun getById(ID: String): ValuesManager = definedExternally
    }
    open fun getValuesAsCriteria(advanced: Boolean): dynamic /* Any? | AdvancedCriteria */ = definedExternally
    open fun getValuesAsAdvancedCriteria(): AdvancedCriteria = definedExternally
    open fun editNewRecord(): Unit = definedExternally
}
external open class RibbonGroup : ToolStripGroup {
    open var newControlConstructor: Class = definedExternally
    open var newControlDefaults: IconButton = definedExternally
    open fun createControl(properties: Canvas, position: Number? = definedExternally /* null */): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): RibbonGroup = definedExternally
    }
}
external open class PropertySheet : DynamicForm {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): PropertySheet = definedExternally
    }
}
external open class TextItemEditProxy : FormItemEditProxy {
//    override fun getInlineEditText(): Unit = definedExternally
//    override fun setInlineEditText(newValue: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): TextItemEditProxy = definedExternally
    }
}
external open class TabSet : Canvas {
    open var tabs: Array<Any?> = definedExternally
    open var tabBar: TabBar = definedExternally
    open var tabProperties: Tab = definedExternally
    open var defaultTabWidth: Number = definedExternally
    open var defaultTabHeight: Number = definedExternally
    open var useSimpleTabs: Boolean = definedExternally
    open var simpleTabBaseStyle: String = definedExternally
    open var simpleTabIconOnlyBaseStyle: String = definedExternally
    open var tabBarPosition: dynamic /* String /* "left" */ | String /* "top" */ | String /* "right" */ | String /* "bottom" */ */ = definedExternally
    open var tabBarAlign: dynamic /* String /* "left" */ | String /* "top" */ | String /* "right" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
    open var tabBarThickness: Number = definedExternally
    open var selectedTab: dynamic /* Number | Tab */ = definedExternally
    open var canCloseTabs: Boolean = definedExternally
    open var closeTabIcon: String = definedExternally
    open var closeTabIconSize: Number = definedExternally
    open var ariaCloseableSuffix: String = definedExternally
    open var canReorderTabs: Boolean = definedExternally
    open var showMoreTab: Boolean = definedExternally
    open var moreTabCount: Number = definedExternally
    open var moreTabTitle: String = definedExternally
    open var moreTabImage: String = definedExternally
    open var moreTab: Tab = definedExternally
    open var moreTabProperties: Tab = definedExternally
    open var moreTabPane: VLayout = definedExternally
    open var moreTabPaneProperties: Canvas = definedExternally
    open var moreTabPaneDefaults: Canvas = definedExternally
    open var moreTabPaneNavBar: NavigationBar = definedExternally
    open var moreTabPaneTable: TableView = definedExternally
    open var tabBarControls: Array<Any> = definedExternally
    open var showTabScroller: Boolean = definedExternally
    open var showTabPicker: Boolean = definedExternally
    open var tabBarControlLayout: Layout = definedExternally
    open var animateTabScrolling: Boolean = definedExternally
    open var scroller: StretchImgButton = definedExternally
    open var scrollerButtonSize: Number = definedExternally
    open var tabPicker: ImgButton = definedExternally
    open var pickerButtonSize: Number = definedExternally
    open var touchPickerButtonSize: Number = definedExternally
//    override var skinImgDir: String = definedExternally
    open var symmetricScroller: Boolean = definedExternally
    open var scrollerSrc: String = definedExternally
    open var scrollerHSrc: String = definedExternally
    open var scrollerVSrc: String = definedExternally
    open var symmetricPickerButton: Boolean = definedExternally
    open var pickerButtonSrc: String = definedExternally
    open var pickerButtonHSrc: String = definedExternally
    open var pickerButtonVSrc: String = definedExternally
    open var paneContainer: VLayout = definedExternally
    open var paneContainerClassName: String = definedExternally
    open var paneContainerOverflow: dynamic /* String /* "auto" */ | String /* "visible" */ | String /* "hidden" */ | String /* "scroll" */ | String /* "clip-h" */ | String /* "clip-v" */ */ = definedExternally
    open var symmetricEdges: Boolean = definedExternally
    open var leftEdgeSizes: Any? = definedExternally
    open var topEdgeSizes: Any? = definedExternally
    open var bottomEdgeSizes: Any? = definedExternally
    open var rightEdgeSizes: Any? = definedExternally
    open var leftEdgeOffsets: Any? = definedExternally
    open var rightEdgeOffsets: Any? = definedExternally
    open var topEdgeOffsets: Any? = definedExternally
    open var bottomEdgeOffsets: Any? = definedExternally
    open var showPaneContainerEdges: Boolean = definedExternally
    open var paneMargin: Number = definedExternally
    open var canEditTabTitles: Boolean = definedExternally
    open var titleEditEvent: dynamic /* String /* "click" */ | String /* "doubleClick" */ */ = definedExternally
    open var titleEditor: TextItem = definedExternally
    open var titleEditorProperties: TextItem = definedExternally
    open var titleEditorLeftOffset: Number = definedExternally
    open var titleEditorRightOffset: Number = definedExternally
    open var titleEditorTopOffset: Number = definedExternally
    open var useIOSTabs: Boolean = definedExternally
    open var canAddTabs: Boolean = definedExternally
    open var addTabButton: ImgButton = definedExternally
    open var addTabButtonIcon: String = definedExternally
    open var showTabBar: Boolean = definedExternally
    open var simpleTabButtonConstructor: Class = definedExternally
    open var tabBarProperties: TabBar = definedExternally
    open var showPartialEdges: Boolean = definedExternally
    open var destroyPanes: Boolean = definedExternally
    open var locateTabsBy: String = definedExternally
//    override var editProxyConstructor: String = definedExternally
    open fun setPaneContainerOverflow(newOverflow: String /* "auto" */): Unit = definedExternally
    open fun setPaneContainerOverflow(newOverflow: String /* "visible" */): Unit = definedExternally
    open fun setPaneContainerOverflow(newOverflow: String /* "hidden" */): Unit = definedExternally
    open fun setPaneContainerOverflow(newOverflow: String /* "scroll" */): Unit = definedExternally
    open fun setPaneContainerOverflow(newOverflow: String /* "clip-h" */): Unit = definedExternally
    open fun setPaneContainerOverflow(newOverflow: String /* "clip-v" */): Unit = definedExternally
    open fun getPaneContainerEdges(): Array<Any> = definedExternally
    open fun setTabTitle(tab: String, title: String): Unit = definedExternally
    open fun setTabTitle(tab: Number, title: String): Unit = definedExternally
    open fun setTabTitle(tab: Tab, title: String): Unit = definedExternally
    open fun setTabIcon(tab: String, icon: String): Unit = definedExternally
    open fun setTabIcon(tab: Number, icon: String): Unit = definedExternally
    open fun setTabIcon(tab: Tab, icon: String): Unit = definedExternally
    open fun enableTab(tab: String): Unit = definedExternally
    open fun enableTab(tab: Number): Unit = definedExternally
    open fun enableTab(tab: Tab): Unit = definedExternally
    open fun disableTab(tab: String): Unit = definedExternally
    open fun disableTab(tab: Number): Unit = definedExternally
    open fun disableTab(tab: Tab): Unit = definedExternally
    open fun setTabProperties(tab: String, properties: Any): Unit = definedExternally
    open fun setTabProperties(tab: Number, properties: Any): Unit = definedExternally
    open fun setTabProperties(tab: Tab, properties: Any): Unit = definedExternally
    open fun addTab(tab: Tab, position: Number? = definedExternally /* null */): Unit = definedExternally
    open fun addTabs(tabs: Tab, position: Number): Unit = definedExternally
    open fun addTabs(tabs: Array<Any?>, position: Number): Unit = definedExternally
    open fun setTabPane(tab: String, pane: Canvas): Unit = definedExternally
    open fun setTabPane(tab: Number, pane: Canvas): Unit = definedExternally
    open fun setTabPane(tab: Tab, pane: Canvas): Unit = definedExternally
    open fun removeTab(tabs: String): Unit = definedExternally
    open fun removeTab(tabs: Number): Unit = definedExternally
    open fun removeTab(tabs: Tab): Unit = definedExternally
    open fun removeTab(tabs: Array<Any?>): Unit = definedExternally
    open fun removeTabs(tabs: String): Unit = definedExternally
    open fun removeTabs(tabs: Number): Unit = definedExternally
    open fun removeTabs(tabs: Tab): Unit = definedExternally
    open fun removeLastTab(): Unit = definedExternally
    open fun reorderTab(tab: String, moveToPosition: Number? = definedExternally /* null */): Unit = definedExternally
    open fun reorderTab(tab: Number, moveToPosition: Number? = definedExternally /* null */): Unit = definedExternally
    open fun reorderTab(tab: Tab, moveToPosition: Number? = definedExternally /* null */): Unit = definedExternally
    open fun setCanCloseTab(tab: String, canClose: Boolean): Unit = definedExternally
    open fun setCanCloseTab(tab: Number, canClose: Boolean): Unit = definedExternally
    open fun setCanCloseTab(tab: Tab, canClose: Boolean): Unit = definedExternally
    open fun setCanCloseTabs(canCloseTabs: Boolean): Unit = definedExternally
    open fun closeClick(tab: Tab): Unit = definedExternally
    open fun tabIconClick(tab: Tab): Unit = definedExternally
    open fun getTabObject(tab: String): Tab = definedExternally
    open fun getTabObject(tab: Number): Tab = definedExternally
    open fun getTabObject(tab: Tab): Tab = definedExternally
    open fun getTab(tab: String): StatefulCanvas = definedExternally
    open fun getTab(tab: Number): StatefulCanvas = definedExternally
    open fun getTab(tab: Canvas): StatefulCanvas = definedExternally
    open fun getTabPane(tab: String): Canvas = definedExternally
    open fun getTabPane(tab: Number): Canvas = definedExternally
    open fun getTabPane(tab: Any?): Canvas = definedExternally
    open fun getTabPane(tab: Tab): Canvas = definedExternally
    open fun getTabNumber(tab: String): Number = definedExternally
    open fun getTabNumber(tab: Number): Number = definedExternally
    open fun getTabNumber(tab: Tab): Number = definedExternally
    open fun updateTab(tab: String, pane: String): Unit = definedExternally
    open fun updateTab(tab: String, pane: Canvas): Unit = definedExternally
    open fun updateTab(tab: Number, pane: String): Unit = definedExternally
    open fun updateTab(tab: Number, pane: Canvas): Unit = definedExternally
    open fun updateTab(tab: Tab, pane: String): Unit = definedExternally
    open fun updateTab(tab: Tab, pane: Canvas): Unit = definedExternally
//    override fun revealChild(child: String): Unit = definedExternally
//    override fun revealChild(child: Canvas): Unit = definedExternally
    open fun scrollForward(): Unit = definedExternally
    open fun scrollBack(): Unit = definedExternally
    open fun getSelectedTab(): Tab = definedExternally
    open fun getSelectedTabNumber(): Number = definedExternally
    open fun selectTab(tab: String): Unit = definedExternally
    open fun selectTab(tab: Number): Unit = definedExternally
    open fun selectTab(tab: Tab): Unit = definedExternally
    open fun tabForPane(pane: Canvas): Tab = definedExternally
    open fun editTabTitle(tab: String): Unit = definedExternally
    open fun editTabTitle(tab: Number): Unit = definedExternally
    open fun editTabTitle(tab: Tab): Unit = definedExternally
    open fun cancelTabTitleEditing(): Unit = definedExternally
    open fun saveTabTitle(): Unit = definedExternally
    open fun addTabClicked(): Unit = definedExternally
    open fun tabSelected(tabNum: Number, tabPane: Canvas, ID: String, tab: Tab, name: String): Unit = definedExternally
    open fun tabDeselected(tabNum: Number, tabPane: Canvas, ID: String, tab: Tab, newTab: Tab): Boolean = definedExternally
    open fun titleChanged(newTitle: String, oldTitle: String, tab: Tab): Boolean = definedExternally
    open fun showTabContextMenu(tabSet: TabSet, tab: Tab): Boolean = definedExternally
    open fun tabsReordered(tabCanvas: StatefulCanvas, tabIndex: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): TabSet = definedExternally
    }
}
external open class SelectItemEditProxy : FormItemEditProxy {
//    override fun getInlineEditText(): Unit = definedExternally
//    override fun setInlineEditText(newValue: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SelectItemEditProxy = definedExternally
    }
}
external open class TabBar : Toolbar {
    open var tabs: Array<Any?> = definedExternally
    open var breadth: Number = definedExternally
//    override var buttonConstructor: Class = definedExternally
    open var closeTabKeys: Array<Any?> = definedExternally
    open var showMoreTab: Boolean = definedExternally
    open var moreTabCount: Number = definedExternally
    open var moreTab: Tab = definedExternally
    open var baseLineThickness: Number = definedExternally
    open var baseLineSrc: String = definedExternally
    open var baseLineCapSize: Number = definedExternally
    open var defaultTabSize: Number = definedExternally
//    override var editProxyConstructor: String = definedExternally
    open fun selectTab(tabNum: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): TabBar = definedExternally
    }
}
external open class MockupElement : Img {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): MockupElement = definedExternally
    }
}
external open class DateItem : FormItem {
    open var textField: TextItem = definedExternally
    open var textFieldProperties: TextItem = definedExternally
//    override var browserInputType: String = definedExternally
//    override var wrapHintText: Boolean = definedExternally
    open var showHintInField: Boolean = definedExternally
    open var usePlaceholderForHint: Boolean = definedExternally
    open var daySelector: SelectItem = definedExternally
    open var daySelectorProperties: SelectItem = definedExternally
    open var monthSelector: SelectItem = definedExternally
    open var monthSelectorProperties: SelectItem = definedExternally
    open var yearSelector: SelectItem = definedExternally
    open var yearSelectorProperties: SelectItem = definedExternally
    open var useSharedPicker: Boolean = definedExternally
//    override var pickerConstructor: String = definedExternally
//    override var pickerProperties: DateChooser = definedExternally
    open var useTextField: Boolean = definedExternally
//    override var textAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var useMask: Boolean = definedExternally
    open var maskDateSeparator: String = definedExternally
    open var enforceDate: Boolean = definedExternally
    open var invalidDateStringMessage: String = definedExternally
//    override var pickerIconPrompt: String = definedExternally
    open var startDate: Date = definedExternally
    open var endDate: Date = definedExternally
    open var centuryThreshold: Number = definedExternally
    open var use24HourTime: Boolean = definedExternally
    open var showPickerTimeItem: Boolean = definedExternally
    open var pickerTimeItemProperties: TimeItem = definedExternally
//    override var dateFormatter: dynamic /* String /* "toString" */ | String /* "toLocaleString" */ | String /* "toUSShortDate" */ | String /* "toUSShortDatetime" */ | String /* "toEuropeanShortDate" */ | String /* "toEuropeanShortDatetime" */ | String /* "toJapanShortDate" */ | String /* "toJapanShortDatetime" */ | String /* "toSerializeableDate" */ | String /* "toDateStamp" */ */ = definedExternally
//    override var displayFormat: dynamic /* String /* "toString" */ | String /* "toLocaleString" */ | String /* "toUSShortDate" */ | String /* "toUSShortDatetime" */ | String /* "toEuropeanShortDate" */ | String /* "toEuropeanShortDatetime" */ | String /* "toJapanShortDate" */ | String /* "toJapanShortDatetime" */ | String /* "toSerializeableDate" */ | String /* "toDateStamp" */ */ = definedExternally
//    override var inputFormat: String = definedExternally
    open var selectorFormat: dynamic /* String /* "DMY" */ | String /* "MDY" */ | String /* "YMD" */ | String /* "DM" */ | String /* "MD" */ | String /* "YM" */ | String /* "MY" */ */ = definedExternally
    open var defaultChooserDate: Date = definedExternally
    open var showChooserFiscalYearPicker: Boolean = definedExternally
    open var showChooserWeekPicker: Boolean = definedExternally
//    override var editProxyConstructor: String = definedExternally
//    override fun pendingStatusChanged(form: DynamicForm, item: FormItem, pendingStatus: Boolean, newValue: Any, value: Any): Boolean = definedExternally
    open fun getEnteredValue(): String = definedExternally
    open fun setStartDate(startDate: String): Unit = definedExternally
    open fun setStartDate(startDate: Date): Unit = definedExternally
    open fun setEndDate(endDate: String): Unit = definedExternally
    open fun setEndDate(endDate: Date): Unit = definedExternally
    open fun setSelectionRange(start: Number, end: Number): Unit = definedExternally
    open fun getSelectionRange(): Array<Any> = definedExternally
    open fun selectValue(): Unit = definedExternally
    open fun deselectValue(start: Boolean? = definedExternally /* null */): Unit = definedExternally
//    override fun parseEditorValue(value: String, form: DynamicForm, item: FormItem): Any = definedExternally
//    override fun formatEditorValue(value: Any, record: ListGridRecord, form: DynamicForm, item: FormItem): String = definedExternally
    open fun getInputFormat(): String = definedExternally
    open fun getFiscalCalendar(): FiscalCalendar = definedExternally
    open fun setFiscalCalendar(fiscalCalendar: FiscalCalendar? = definedExternally /* null */): Unit = definedExternally
    open fun getDefaultChooserDate(): Date = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DateItem = definedExternally
        var DAY_MONTH_YEAR: String = definedExternally
        var MONTH_DAY_YEAR: String = definedExternally
        var YEAR_MONTH_DAY: String = definedExternally
        var DAY_MONTH: String = definedExternally
        var MONTH_DAY: String = definedExternally
        var YEAR_MONTH: String = definedExternally
        var MONTH_YEAR: String = definedExternally
    }
}
external open class Record
external open class NativeScrollbar : Canvas {
    open fun setScrollTarget(newTarget: Canvas? = definedExternally /* null */): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): NativeScrollbar = definedExternally
    }
}
external open class GroupingMessages : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): GroupingMessages = definedExternally
        var upcomingTodayTitle: String = definedExternally
        var upcomingTomorrowTitle: String = definedExternally
        var upcomingThisWeekTitle: String = definedExternally
        var upcomingNextWeekTitle: String = definedExternally
        var upcomingNextMonthTitle: String = definedExternally
        var upcomingBeforeTitle: String = definedExternally
        var upcomingLaterTitle: String = definedExternally
        var byDayTitle: String = definedExternally
        var byWeekTitle: String = definedExternally
        var byMonthTitle: String = definedExternally
        var byQuarterTitle: String = definedExternally
        var byYearTitle: String = definedExternally
        var byDayOfMonthTitle: String = definedExternally
        var byUpcomingTitle: String = definedExternally
        var byDateTitle: String = definedExternally
        var byWeekAndYearTitle: String = definedExternally
        var byMonthAndYearTitle: String = definedExternally
        var byQuarterAndYearTitle: String = definedExternally
        var byDayOfWeekAndYearTitle: String = definedExternally
        var byDayOfMonthAndYearTitle: String = definedExternally
        var byHoursTitle: String = definedExternally
        var byMinutesTitle: String = definedExternally
        var bySecondsTitle: String = definedExternally
        var byMillisecondsTitle: String = definedExternally
        var weekNumberTitle: String = definedExternally
        var timezoneMinutesSuffix: String = definedExternally
        var timezoneSecondsSuffix: String = definedExternally
    }
}
external open class DrawLabel : DrawItem {
//    override var knobs: Array<dynamic /* String /* "resize" */ | String /* "move" */ | String /* "startPoint" */ | String /* "endPoint" */ | String /* "controlPoint1" */ | String /* "controlPoint2" */ | String /* "rotate" */ */> = definedExternally
    open var contents: String = definedExternally
    open var escapeContents: Boolean = definedExternally
    open var left: Number = definedExternally
    open var top: Number = definedExternally
    open var alignment: dynamic /* String /* "start" */ | String /* "end" */ | String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var fontFamily: String = definedExternally
    open var fontSize: Number = definedExternally
    open var fontWeight: String = definedExternally
    open var fontStyle: String = definedExternally
    open var styleName: String = definedExternally
//    override var lineColor: String = definedExternally
//    override var rotation: Number = definedExternally
//    override var editProxyConstructor: String = definedExternally
    open fun setEscapeContents(escapeContents: Boolean): Unit = definedExternally
    open fun setStyleName(styleName: String): Unit = definedExternally
//    override fun getCenter(): Point = definedExternally
//    override fun getBoundingBox(): Array<Number> = definedExternally
//    override fun setLineColor(color: String): Unit = definedExternally
    open fun setContents(contents: String): Unit = definedExternally
    open fun setFontSize(size: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DrawLabel = definedExternally
        var defaultCursiveFont: String = definedExternally
        var defaultFantasyFont: String = definedExternally
        var defaultMonospaceFont: String = definedExternally
        var defaultSansSerifFont: String = definedExternally
        var defaultSerifFont: String = definedExternally
        var START: String = definedExternally
        var END: String = definedExternally
        var CENTER: String = definedExternally
        var LEFT: String = definedExternally
        var RIGHT: String = definedExternally
    }
}
external open class FacetValue {
    open var id: dynamic /* String | Number */ = definedExternally
    open var title: String = definedExternally
    open var parentId: dynamic /* String | Number */ = definedExternally
    open var canEdit: Boolean = definedExternally
    open var collapsed: Boolean = definedExternally
    open var canCollapse: Boolean = definedExternally
    open var isMinimizeValue: Boolean = definedExternally
    open var width: Number = definedExternally
    open var align: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var cellAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var borderBefore: String = definedExternally
    open var borderAfter: String = definedExternally
    open var selectionBoundary: dynamic /* String /* "both" */ | String /* "before" */ | String /* "after" */ */ = definedExternally
    open var titleHilite: String = definedExternally
    open fun getCellValue(viewer: CubeGrid, record: Any, rowNum: Number, colNum: Number): String = definedExternally
    open fun formatCellValue(value: Any, record: CellRecord, rowNum: Number, colNum: Number): String = definedExternally
}
external open class TreeNode {
    open var enabled: Boolean = definedExternally
    open var canDrag: Boolean = definedExternally
    open var canAcceptDrop: Boolean = definedExternally
    open var isFolder: dynamic /* String | Boolean */ = definedExternally
    open var name: String = definedExternally
    open var title: String = definedExternally
    open var id: dynamic /* String | Number */ = definedExternally
    open var parentId: dynamic /* String | Number */ = definedExternally
    open var children: Array<Any?> = definedExternally
    open var icon: String = definedExternally
    open var showOpenIcon: Boolean = definedExternally
    open var showDropIcon: Boolean = definedExternally
    open var showSelectedIcon: Boolean = definedExternally
}
external open class TabSetEditProxy : CanvasEditProxy {
//    override fun getInlineEditText(): Unit = definedExternally
//    override fun setInlineEditText(newValue: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): TabSetEditProxy = definedExternally
    }
}
external open class ZoneCanvas : EventCanvas {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ZoneCanvas = definedExternally
    }
}
external open class Toolbar : Layout {
    open var buttons: Array<Any?> = definedExternally
//    override var vertical: Boolean = definedExternally
    open var buttonConstructor: Class = definedExternally
    open var canReorderItems: Boolean = definedExternally
    open var canResizeItems: Boolean = definedExternally
//    override var canAcceptDrop: Boolean = definedExternally
    open var buttonDefaults: Any = definedExternally
    open var createButtonsOnInit: Boolean = definedExternally
    open fun setButtons(newButtons: Array<Any?>? = definedExternally /* null */): Unit = definedExternally
    open fun addButtons(buttons: Array<Any?>? = definedExternally /* null */, position: Number? = definedExternally /* null */): Unit = definedExternally
    open fun removeButtons(buttons: Array<Any>? = definedExternally /* null */): Unit = definedExternally
    open fun getButton(index: String): Button = definedExternally
    open fun getButton(index: Number): Button = definedExternally
    open fun getButton(index: Any?): Button = definedExternally
    open fun getButtonNumber(button: Number): Number = definedExternally
    open fun getButtonNumber(button: String): Number = definedExternally
    open fun getButtonNumber(button: Any): Number = definedExternally
    open fun setCanResizeItems(canResizeItems: Boolean): Unit = definedExternally
    open fun selectButton(buttonID: String): Unit = definedExternally
    open fun selectButton(buttonID: Number): Unit = definedExternally
    open fun selectButton(buttonID: Any?): Unit = definedExternally
    open fun selectButton(buttonID: Canvas): Unit = definedExternally
    open fun deselectButton(buttonID: String): Unit = definedExternally
    open fun deselectButton(buttonID: Number): Unit = definedExternally
    open fun deselectButton(buttonID: Any?): Unit = definedExternally
    open fun deselectButton(buttonID: Canvas): Unit = definedExternally
    open fun itemDoubleClick(item: Button, itemNum: Number): Unit = definedExternally
    open fun itemDragResized(itemNum: Number, newSize: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Toolbar = definedExternally
    }
}
external open class BaseWidget : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): BaseWidget = definedExternally
    }
}
external open class Class {
    open var addPropertiesOnCreate: Boolean = definedExternally
    open var ruleScope: String = definedExternally
    open var dynamicProperties: Map<Any> = definedExternally
    open fun init(vararg args: Any): Unit = definedExternally
    open fun destroy(): Unit = definedExternally
    open fun getID(): String = definedExternally
    open fun getClass(): Class = definedExternally
    open fun getSuperClass(): Class = definedExternally
    open fun getClassName(): String = definedExternally
    open fun addProperties(vararg args: Any): Any = definedExternally
    open fun addPropertyList(list: Array<Any?>): Any = definedExternally
    open fun setProperty(propertyName: String, newValue: Any): Unit = definedExternally
    open fun setProperties(vararg args: Any): Unit = definedExternally
    open fun isA(className: String): Boolean = definedExternally
    open fun observe(`object`: Any, methodName: String, action: String? = definedExternally /* null */): Boolean = definedExternally
    open fun ignore(`object`: Any, methodName: String): Boolean = definedExternally
    open fun isObserving(`object`: Any, methodName: String): Boolean = definedExternally
    open fun evaluate(expression: String, evalArgs: Any): Any = definedExternally
    open fun fireCallback(callback: Any?, argNames: String? = definedExternally /* null */, args: Array<Any>? = definedExternally /* null */): Any = definedExternally
    open fun delayCall(methodName: String, arrayArgs: Array<Any>? = definedExternally /* null */, time: Number? = definedExternally /* null */): String = definedExternally
    open fun addAutoChild(childName: String, defaults: Any?): Class = definedExternally
    open fun createAutoChild(childName: String, defaults: Any?): Class = definedExternally
    open fun map(methodName: String, items: Array<Any>): Array<Any> = definedExternally
    open fun Super(methodName: String, args: Any, nativeArgs: Any? = definedExternally /* null */): Any = definedExternally
    open fun Super(methodName: String, args: Array<Any>, nativeArgs: Any? = definedExternally /* null */): Any = definedExternally
    open fun addDynamicProperty(propertyName: String, source: String): Unit = definedExternally
    open fun addDynamicProperty(propertyName: String, source: UserFormula): Unit = definedExternally
    open fun addDynamicProperty(propertyName: String, source: UserSummary): Unit = definedExternally
    open fun clearDynamicProperty(propertyName: String): Unit = definedExternally
    open fun hasDynamicProperty(propertyName: String): Boolean = definedExternally
//    override fun toString(): Unit = definedExternally
    open fun getCallTrace(args: Any? = definedExternally /* null */): Unit = definedExternally
    open fun getStackTrace(): String = definedExternally
    open fun echoLeaf(obj: Any): String = definedExternally
    open fun echo(obj: Any): String = definedExternally
    open fun echoAll(obj: Any): String = definedExternally
    open fun logDebug(message: String, category: String? = definedExternally /* null */): Unit = definedExternally
    open fun logInfo(message: String, category: String? = definedExternally /* null */): Unit = definedExternally
    open fun logWarn(message: String, category: String? = definedExternally /* null */): Unit = definedExternally
    open fun logError(message: String, category: String? = definedExternally /* null */): Unit = definedExternally
    open fun logFatal(message: String, category: String? = definedExternally /* null */): Unit = definedExternally
    open fun logIsEnabledFor(priority: Number /* 1 */, category: String? = definedExternally /* null */): Unit = definedExternally
    open fun logIsEnabledFor(priority: Number /* 2 */, category: String? = definedExternally /* null */): Unit = definedExternally
    open fun logIsEnabledFor(priority: Number /* 3 */, category: String? = definedExternally /* null */): Unit = definedExternally
    open fun logIsEnabledFor(priority: Number /* 4 */, category: String? = definedExternally /* null */): Unit = definedExternally
    open fun logIsEnabledFor(priority: Number /* 5 */, category: String? = definedExternally /* null */): Unit = definedExternally
    open fun logIsDebugEnabled(category: String? = definedExternally /* null */): Unit = definedExternally
    open fun logIsInfoEnabled(category: String? = definedExternally /* null */): Unit = definedExternally
    open fun logIsWarnEnabled(category: String? = definedExternally /* null */): Unit = definedExternally
    open fun logIsErrorEnabled(category: String? = definedExternally /* null */): Unit = definedExternally
    open fun setLogPriority(category: String, priority: Number /* 1 */): Unit = definedExternally
    open fun setLogPriority(category: String, priority: Number /* 2 */): Unit = definedExternally
    open fun setLogPriority(category: String, priority: Number /* 3 */): Unit = definedExternally
    open fun setLogPriority(category: String, priority: Number /* 4 */): Unit = definedExternally
    open fun setLogPriority(category: String, priority: Number /* 5 */): Unit = definedExternally
    open fun setDefaultLogPriority(category: String, priority: Number /* 1 */): Unit = definedExternally
    open fun setDefaultLogPriority(category: String, priority: Number /* 2 */): Unit = definedExternally
    open fun setDefaultLogPriority(category: String, priority: Number /* 3 */): Unit = definedExternally
    open fun setDefaultLogPriority(category: String, priority: Number /* 4 */): Unit = definedExternally
    open fun setDefaultLogPriority(category: String, priority: Number /* 5 */): Unit = definedExternally
    open fun getDefaultLogPriority(): dynamic /* Number /* 1 */ | Number /* 2 */ | Number /* 3 */ | Number /* 4 */ | Number /* 5 */ */ = definedExternally
    open fun clearLogPriority(category: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Class = definedExternally
        var isFrameworkClass: Boolean = definedExternally
        fun modifyFrameworkStart(): Unit = definedExternally
        fun modifyFrameworkDone(): Unit = definedExternally
        fun markUnsupportedMethods(messageTemplate: String, methodNames: Array<String>): Unit = definedExternally
        fun isMethodSupported(methodName: String): Boolean = definedExternally
        fun getClassName(): String = definedExternally
        fun getSuperClass(): Class = definedExternally
        fun addMethods(vararg args: Any): Any = definedExternally
        fun registerStringMethods(methodName: Any, argumentString: String): Unit = definedExternally
        fun evaluate(expression: String, evalArgs: Any): Any = definedExternally
        fun addClassProperties(vararg args: Any): Any = definedExternally
        fun markAsFrameworkClass(): Unit = definedExternally
        fun addProperties(vararg args: Any): Any = definedExternally
        fun addPropertyList(list: Array<Any?>): Any = definedExternally
        fun changeDefaults(defaultsName: String, newDefaults: Any): Unit = definedExternally
        fun setProperties(vararg args: Any): Unit = definedExternally
        fun isA(className: String): Boolean = definedExternally
        fun Super(methodName: String, args: Any, nativeArgs: Any? = definedExternally /* null */): Any = definedExternally
        fun Super(methodName: String, args: Array<Any>, nativeArgs: Any? = definedExternally /* null */): Any = definedExternally
        fun map(methodName: String, items: Array<Any>): Array<Any> = definedExternally
        fun getInstanceProperty(property: String): Unit = definedExternally
        fun setInstanceProperty(property: String, value: Any): Unit = definedExternally
        fun fireCallback(callback: Any?, argNames: String? = definedExternally /* null */, args: Array<Any>? = definedExternally /* null */, target: Any? = definedExternally /* null */): Any = definedExternally
        fun delayCall(methodName: String, arrayArgs: Array<Any>? = definedExternally /* null */, time: Number? = definedExternally /* null */, target: Any? = definedExternally /* null */): String = definedExternally
//        override fun toString(): Unit = definedExternally
        fun getCallTrace(args: Any? = definedExternally /* null */): Unit = definedExternally
        fun getStackTrace(): String = definedExternally
        fun echoLeaf(obj: Any): String = definedExternally
        fun echo(obj: Any): String = definedExternally
        fun echoAll(obj: Any): String = definedExternally
        fun logDebug(message: String, category: String? = definedExternally /* null */): Unit = definedExternally
        fun logInfo(message: String, category: String? = definedExternally /* null */): Unit = definedExternally
        fun logWarn(message: String, category: String? = definedExternally /* null */): Unit = definedExternally
        fun logError(message: String, category: String? = definedExternally /* null */): Unit = definedExternally
        fun logFatal(message: String, category: String? = definedExternally /* null */): Unit = definedExternally
        fun logIsEnabledFor(priority: Number /* 1 */, category: String? = definedExternally /* null */): Unit = definedExternally
        fun logIsEnabledFor(priority: Number /* 2 */, category: String? = definedExternally /* null */): Unit = definedExternally
        fun logIsEnabledFor(priority: Number /* 3 */, category: String? = definedExternally /* null */): Unit = definedExternally
        fun logIsEnabledFor(priority: Number /* 4 */, category: String? = definedExternally /* null */): Unit = definedExternally
        fun logIsEnabledFor(priority: Number /* 5 */, category: String? = definedExternally /* null */): Unit = definedExternally
        fun logIsDebugEnabled(category: String? = definedExternally /* null */): Unit = definedExternally
        fun logIsInfoEnabled(category: String? = definedExternally /* null */): Unit = definedExternally
        fun logIsWarnEnabled(category: String? = definedExternally /* null */): Unit = definedExternally
        fun logIsErrorEnabled(category: String? = definedExternally /* null */): Unit = definedExternally
        fun setLogPriority(category: String, priority: Number /* 1 */): Unit = definedExternally
        fun setLogPriority(category: String, priority: Number /* 2 */): Unit = definedExternally
        fun setLogPriority(category: String, priority: Number /* 3 */): Unit = definedExternally
        fun setLogPriority(category: String, priority: Number /* 4 */): Unit = definedExternally
        fun setLogPriority(category: String, priority: Number /* 5 */): Unit = definedExternally
        fun setDefaultLogPriority(category: String, priority: Number /* 1 */): Unit = definedExternally
        fun setDefaultLogPriority(category: String, priority: Number /* 2 */): Unit = definedExternally
        fun setDefaultLogPriority(category: String, priority: Number /* 3 */): Unit = definedExternally
        fun setDefaultLogPriority(category: String, priority: Number /* 4 */): Unit = definedExternally
        fun setDefaultLogPriority(category: String, priority: Number /* 5 */): Unit = definedExternally
        fun getDefaultLogPriority(): dynamic /* Number /* 1 */ | Number /* 2 */ | Number /* 3 */ | Number /* 4 */ | Number /* 5 */ */ = definedExternally
        fun clearLogPriority(category: String): Unit = definedExternally
    }
}
external open class ViewFileItem : FileItem {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ViewFileItem = definedExternally
    }
}
external open class HTMLPane : HTMLFlow {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): HTMLPane = definedExternally
    }
}
external open class DrawKnob : Canvas {
    open var knobShape: DrawItem = definedExternally
    open var knobShapeDefaults: DrawItem = definedExternally
    open var drawPane: DrawPane = definedExternally
    open var x: Number = definedExternally
    open var y: Number = definedExternally
    open fun setCenterPoint(x: Number, y: Number, viewboxCoords: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun updatePoints(x: Number, y: Number, dX: Number, dY: Number, state: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DrawKnob = definedExternally
    }
}
external open class RichTextEditor : VLayout {
    open var editArea: Canvas = definedExternally
    open var editAreaBackgroundColor: String = definedExternally
    open var value: String = definedExternally
    open var toolArea: Layout = definedExternally
    open var toolbar: Layout = definedExternally
    open var toolbarBackgroundColor: String = definedExternally
    open var controlGroups: Array<Any> = definedExternally
    open var styleControls: Array<dynamic /* String /* "boldSelection" */ | String /* "italicSelection" */ | String /* "underlineSelection" */ | String /* "fontSelector" */ | String /* "fontSizeSelector" */ | String /* "alignLeft" */ | String /* "alignRight" */ | String /* "alignCenter" */ | String /* "justify" */ | String /* "color" */ | String /* "backgroundColor" */ | String /* "indent" */ | String /* "outdent" */ | String /* "orderedList" */ | String /* "unorderedList" */ | String /* "listProperties" */ */> = definedExternally
    open var fontSelectorItem: SelectItem = definedExternally
    open var fontSizeSelectorItem: SelectItem = definedExternally
    open var fontSelectorPrompt: String = definedExternally
    open var fontSizeSelectorPrompt: String = definedExternally
    open var linkUrlTitle: String = definedExternally
    open var boldSelectionPrompt: String = definedExternally
    open var italicSelectionPrompt: String = definedExternally
    open var underlineSelectionPrompt: String = definedExternally
    open var strikethroughSelectionPrompt: String = definedExternally
    open var fontControls: Array<dynamic /* String /* "boldSelection" */ | String /* "italicSelection" */ | String /* "underlineSelection" */ | String /* "fontSelector" */ | String /* "fontSizeSelector" */ | String /* "alignLeft" */ | String /* "alignRight" */ | String /* "alignCenter" */ | String /* "justify" */ | String /* "color" */ | String /* "backgroundColor" */ | String /* "indent" */ | String /* "outdent" */ | String /* "orderedList" */ | String /* "unorderedList" */ | String /* "listProperties" */ */> = definedExternally
    open var fontNames: Any = definedExternally
    open var fontSizes: Any = definedExternally
    open var copySelectionPrompt: String = definedExternally
    open var cutSelectionPrompt: String = definedExternally
    open var pasteSelectionPrompt: String = definedExternally
    open var formatControls: Array<dynamic /* String /* "boldSelection" */ | String /* "italicSelection" */ | String /* "underlineSelection" */ | String /* "fontSelector" */ | String /* "fontSizeSelector" */ | String /* "alignLeft" */ | String /* "alignRight" */ | String /* "alignCenter" */ | String /* "justify" */ | String /* "color" */ | String /* "backgroundColor" */ | String /* "indent" */ | String /* "outdent" */ | String /* "orderedList" */ | String /* "unorderedList" */ | String /* "listProperties" */ */> = definedExternally
    open var alignLeftPrompt: String = definedExternally
    open var alignCenterPrompt: String = definedExternally
    open var alignRightPrompt: String = definedExternally
    open var justifyPrompt: String = definedExternally
    open var colorControls: Array<dynamic /* String /* "boldSelection" */ | String /* "italicSelection" */ | String /* "underlineSelection" */ | String /* "fontSelector" */ | String /* "fontSizeSelector" */ | String /* "alignLeft" */ | String /* "alignRight" */ | String /* "alignCenter" */ | String /* "justify" */ | String /* "color" */ | String /* "backgroundColor" */ | String /* "indent" */ | String /* "outdent" */ | String /* "orderedList" */ | String /* "unorderedList" */ | String /* "listProperties" */ */> = definedExternally
    open var colorPrompt: String = definedExternally
    open var backgroundColorPrompt: String = definedExternally
    open var linkPrompt: String = definedExternally
    open var bulletControls: Array<dynamic /* String /* "boldSelection" */ | String /* "italicSelection" */ | String /* "underlineSelection" */ | String /* "fontSelector" */ | String /* "fontSizeSelector" */ | String /* "alignLeft" */ | String /* "alignRight" */ | String /* "alignCenter" */ | String /* "justify" */ | String /* "color" */ | String /* "backgroundColor" */ | String /* "indent" */ | String /* "outdent" */ | String /* "orderedList" */ | String /* "unorderedList" */ | String /* "listProperties" */ */> = definedExternally
    open var indentPrompt: String = definedExternally
    open var outdentPrompt: String = definedExternally
    open var orderedListPrompt: String = definedExternally
    open var unorderedListPrompt: String = definedExternally
    open var listPropertiesPrompt: String = definedExternally
    open var moveFocusOnTab: Boolean = definedExternally
    open var listPropertiesDialog: ListPropertiesDialog = definedExternally
    open var listPropertiesWarningText: String = definedExternally
    open fun doWarn(): Unit = definedExternally
    open fun richEditorSupported(): Boolean = definedExternally
    open fun setMoveFocusOnTab(moveFocusOnTab: Boolean): Unit = definedExternally
    open fun getValue(): Unit = definedExternally
    open fun setValue(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): RichTextEditor = definedExternally
    }
}
external open class ImgButton : Img {
//    override var title: String = definedExternally
    open var hiliteAccessKey: Boolean = definedExternally
    open var showClippedTitleOnHover: Boolean = definedExternally
//    override var icon: String = definedExternally
//    override var iconSize: Number = definedExternally
//    override var iconWidth: Number = definedExternally
//    override var iconHeight: Number = definedExternally
//    override var iconOrientation: String = definedExternally
    open var iconAlign: String = definedExternally
//    override var iconSpacing: Number = definedExternally
//    override var showDisabledIcon: Boolean = definedExternally
//    override var showRollOverIcon: Boolean = definedExternally
//    override var showFocusedIcon: Boolean = definedExternally
//    override var showDownIcon: Boolean = definedExternally
//    override var showSelectedIcon: Boolean = definedExternally
//    override var autoFit: Boolean = definedExternally
//    override var baseStyle: String = definedExternally
//    override var selected: Boolean = definedExternally
//    override var radioGroup: String = definedExternally
//    override var actionType: dynamic /* String /* "radio" */ | String /* "button" */ | String /* "checkbox" */ */ = definedExternally
//    override var state: dynamic /* String /* "" */ | String /* "Down" */ | String /* "Over" */ | String /* "Disabled" */ */ = definedExternally
//    override var showDisabled: Boolean = definedExternally
//    override var showDown: Boolean = definedExternally
//    override var showFocus: Boolean = definedExternally
//    override var showFocused: Boolean = definedExternally
//    override var showRollOver: Boolean = definedExternally
//    override var align: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
//    override var valign: dynamic /* String /* "top" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
//    override var showTitle: Boolean = definedExternally
    open var labelHPad: Number = definedExternally
    open var labelVPad: Number = definedExternally
//    override var src: String = definedExternally
//    override fun getTitle(): String = definedExternally
//    override fun setTitle(newTitle: String): Unit = definedExternally
//    override fun setIconOrientation(orientation: String): Unit = definedExternally
//    override fun setIcon(icon: String): Unit = definedExternally
//    override fun setAutoFit(autoFit: Boolean): Unit = definedExternally
//    override fun setBaseStyle(style: String): Unit = definedExternally
//    override fun select(): Unit = definedExternally
//    override fun deselect(): Unit = definedExternally
//    override fun isSelected(): Boolean = definedExternally
    open fun setSelected(): Unit = definedExternally
//    override fun addToRadioGroup(groupID: String): Unit = definedExternally
//    override fun removeFromRadioGroup(groupID: String?): Unit = definedExternally
//    override fun setActionType(): Unit = definedExternally
//    override fun getActionType(): Unit = definedExternally
//    override fun setState(newState: String /* "" */): Unit = definedExternally
//    override fun setState(newState: String /* "Down" */): Unit = definedExternally
//    override fun setState(newState: String /* "Over" */): Unit = definedExternally
//    override fun setState(newState: String /* "Disabled" */): Unit = definedExternally
//    override fun setDisabled(disabled: Boolean): Unit = definedExternally
//    override fun getState(): dynamic /* String /* "" */ | String /* "Down" */ | String /* "Over" */ | String /* "Disabled" */ */ = definedExternally
    open fun action(): Unit = definedExternally
    open fun titleClipped(): Boolean = definedExternally
    open fun titleHoverHTML(defaultHTML: String): String = definedExternally
    open fun titleHover(): Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ImgButton = definedExternally
    }
}
external open class UploadItem : TextItem {
//    override var textBoxStyle: String = definedExternally
//    override var multiple: Boolean = definedExternally
    open var accept: String = definedExternally
//    override var width: Number = definedExternally
//    override var height: Number = definedExternally
    open fun setValue(): Unit = definedExternally
//    override fun getSelectionRange(): Array<Number> = definedExternally
    open fun setSelectionRange(): Unit = definedExternally
//    override fun selectValue(): Unit = definedExternally
//    override fun deselectValue(start: Boolean?): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): UploadItem = definedExternally
    }
}
external open class PickTreeMenu : TreeGrid {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): PickTreeMenu = definedExternally
    }
}
external open class WSDataSource : DataSource {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): WSDataSource = definedExternally
    }
}
external open class Comm : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Comm = definedExternally
        var concurrentXHRsInIE: Boolean = definedExternally
        var concurrentXHRErrorMessage: String = definedExternally
    }
}
external open class PaletteNode {
    open var icon: String = definedExternally
    open var title: String = definedExternally
    open var type: String = definedExternally
    open var idPrefix: String = definedExternally
    open var defaults: Any? = definedExternally
    open var editProxyProperties: EditProxy = definedExternally
    open var editNodeProperties: EditNode = definedExternally
    open var liveObject: Any = definedExternally
    open var canDuplicate: Boolean = definedExternally
}
external open class Criterion {
    open var operator: dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */ = definedExternally
    open var fieldName: String = definedExternally
    open var value: Any = definedExternally
    open var valuePath: String = definedExternally
    open var criteria: Array<Any?> = definedExternally
    open var start: Any = definedExternally
    open var end: Any = definedExternally
}
external open class DetailViewerField : DBCField {
    open var name: String = definedExternally
    open var displayField: String = definedExternally
    open var dataPath: String = definedExternally
    open var dateFormatter: dynamic /* String /* "toString" */ | String /* "toLocaleString" */ | String /* "toUSShortDate" */ | String /* "toUSShortDatetime" */ | String /* "toEuropeanShortDate" */ | String /* "toEuropeanShortDatetime" */ | String /* "toJapanShortDate" */ | String /* "toJapanShortDatetime" */ | String /* "toSerializeableDate" */ | String /* "toDateStamp" */ */ = definedExternally
    open var timeFormatter: dynamic /* String /* "toTime" */ | String /* "to24HourTime" */ | String /* "toPaddedTime" */ | String /* "toPadded24HourTime" */ | String /* "toShortTime" */ | String /* "toShort24HourTime" */ | String /* "toShortPaddedTime" */ | String /* "toShortPadded24HourTime" */ */ = definedExternally
    open var decimalPrecision: Number = definedExternally
    open var decimalPad: Number = definedExternally
    open var imageSize: dynamic /* String | Number */ = definedExternally
    open var imageWidth: dynamic /* String | Number */ = definedExternally
    open var imageHeight: dynamic /* String | Number */ = definedExternally
    open var imageURLPrefix: String = definedExternally
    open var linkText: String = definedExternally
    open var linkTextProperty: String = definedExternally
    open var linkURLPrefix: String = definedExternally
    open var linkURLSuffix: String = definedExternally
    open var target: String = definedExternally
    open var format: String = definedExternally
    open var exportFormat: String = definedExternally
    open var exportRawValues: Boolean = definedExternally
    open var canHilite: Boolean = definedExternally
    open var hiliteIconPosition: dynamic /* String /* "before" */ | String /* "after" */ | String /* "replace" */ */ = definedExternally
    open var hiliteIconSize: Number = definedExternally
    open var hiliteIconWidth: Number = definedExternally
    open var hiliteIconHeight: Number = definedExternally
    open var hiliteIconLeftPadding: Number = definedExternally
    open var hiliteIconRightPadding: Number = definedExternally
    open var type: String = definedExternally
    open var title: String = definedExternally
    open var valueMap: Any = definedExternally
    open var escapeHTML: Boolean = definedExternally
    open var value: String = definedExternally
    open var height: Number = definedExternally
    open var cellStyle: String = definedExternally
    open var printCellStyle: String = definedExternally
    open var showFileInline: Boolean = definedExternally
    open var canExport: Boolean = definedExternally
    open var includeFrom: String = definedExternally
    open var emptyCellValue: String = definedExternally
    open fun formatCellValue(value: String, record: DetailViewerRecord, field: DetailViewerField, viewer: DetailViewer): Unit = definedExternally
    open fun showIf(viewer: DetailViewer, valueList: Array<Any?>): Boolean = definedExternally
    open fun getCellStyle(value: String, field: Any, record: Any, viewer: DetailViewer): String = definedExternally
}
external open class TextAreaItem : FormItem {
    open var wrap: dynamic /* String /* "OFF" */ | String /* "SOFT" */ | String /* "HARD" */ */ = definedExternally
//    override var width: Number = definedExternally
//    override var height: Number = definedExternally
//    override var pickerIconHeight: Number = definedExternally
//    override var staticHeight: Number = definedExternally
//    override var textBoxStyle: String = definedExternally
    open var browserAutoCapitalize: Boolean = definedExternally
    open var browserAutoCorrect: Boolean = definedExternally
    open var length: Number = definedExternally
    open var enforceLength: Boolean = definedExternally
    open var emptyStringValue: Any = definedExternally
//    override var iconVAlign: dynamic /* String /* "top" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
//    override var selectOnFocus: Boolean = definedExternally
//    override var selectOnClick: Boolean = definedExternally
//    override var changeOnKeypress: Boolean = definedExternally
//    override var supportsCutPasteEvents: Boolean = definedExternally
    open var showHintInField: Boolean = definedExternally
    open var usePlaceholderForHint: Boolean = definedExternally
    open var printFullText: Boolean = definedExternally
    open var escapeHTML: Boolean = definedExternally
    open var minHeight: Number = definedExternally
    open var formatOnBlur: Boolean = definedExternally
//    override var editProxyConstructor: String = definedExternally
    open fun getEnteredValue(): String = definedExternally
    open fun getSelectionRange(): Array<Number> = definedExternally
    open fun setSelectionRange(start: Number, end: Number): Unit = definedExternally
    open fun selectValue(): Unit = definedExternally
    open fun deselectValue(start: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun transformPastedValue(item: FormItem, form: DynamicForm, pastedValue: String): String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): TextAreaItem = definedExternally
        var OFF: String = definedExternally
        var SOFT: String = definedExternally
        var HARD: String = definedExternally
    }
}
external open class SimpleGradient : Gradient {
    open var direction: Number = definedExternally
//    override var startColor: String = definedExternally
//    override var endColor: String = definedExternally
}
external open class DOMGrid : TreeGrid {
    open var rootElement: DOMElement = definedExternally
    open fun setRootElement(rootElement: DOMElement): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DOMGrid = definedExternally
    }
}
external open class DrawnValue {
    open var x: Number = definedExternally
    open var y: Number = definedExternally
    open var startAngle: Number = definedExternally
    open var endAngle: Number = definedExternally
    open var radius: Number = definedExternally
    open var barThickness: Number = definedExternally
    open var value: Number = definedExternally
    open var facetValues: FacetValueMap = definedExternally
    open var record: CellRecord = definedExternally
}
external open class MultiFileItem : CanvasItem {
    open var dataSource: dynamic /* String | DataSource */ = definedExternally
    open var removeButton: StatefulCanvas = definedExternally
    open var editButton: StatefulCanvas = definedExternally
//    override var pickerConstructor: String = definedExternally
    open var emptyMessage: String = definedExternally
    open var editButtonPrompt: String = definedExternally
    open var removeButtonPrompt: String = definedExternally
    open var pickerUploadButtonInitialTitle: String = definedExternally
    open var pickerUploadButtonTitle: String = definedExternally
    open var pickerCancelButtonTitle: String = definedExternally
    open var pickerAddAnotherFileButtonTitle: String = definedExternally
    open var pickerUploadProgressLabel: String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): MultiFileItem = definedExternally
    }
}
external open class DateUtil : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DateUtil = definedExternally
        var shortDayNames: Array<Any> = definedExternally
        var dayNames: Array<Any> = definedExternally
        var shortMonthNames: Array<Any> = definedExternally
        var monthNames: Array<Any> = definedExternally
        var weekendDays: Array<Number> = definedExternally
        fun format(date: Date, format: String): String = definedExternally
        fun createLogicalDate(year: Number, month: Number, date: Number): Date = definedExternally
        fun getDisplayYear(datetime: Date): Number = definedExternally
        fun getDisplayMonth(datetime: Date): Number = definedExternally
        fun getDisplayDay(datetime: Date): Number = definedExternally
        fun getDisplayHours(datetime: Date): Number = definedExternally
        fun getDisplayMinutes(datetime: Date): Number = definedExternally
        fun createLogicalTime(hour: Number, minute: Number, second: Number): Date = definedExternally
        fun getLogicalDateOnly(date: Date): Date = definedExternally
        fun getLogicalTimeOnly(date: Date): Date = definedExternally
        fun combineLogicalDateAndTime(date: Date, time: Date): Date = definedExternally
        fun compareDates(date1: Date, date2: Date): Number = definedExternally
        fun compareLogicalDates(date1: Date, date2: Date): Number = definedExternally
        fun setInputFormat(format: String): Unit = definedExternally
        fun setInputFormat(format: Function<*>): Unit = definedExternally
        fun getInputFormat(): String = definedExternally
        fun parseInput(dateString: String, format: String? = definedExternally /* null */, centuryThreshold: Number? = definedExternally /* null */, suppressConversion: Boolean? = definedExternally /* null */): Date = definedExternally
        fun setNormalDisplayFormat(format: String): Unit = definedExternally
        fun setNormalDisplayFormat(format: Function<*>): Unit = definedExternally
        fun setNormalDatetimeDisplayFormat(format: String): Unit = definedExternally
        fun setNormalDatetimeDisplayFormat(format: Function<*>): Unit = definedExternally
        fun setShortDisplayFormat(format: String): Unit = definedExternally
        fun setShortDisplayFormat(format: Function<*>): Unit = definedExternally
        fun setDefaultDateSeparator(separator: String): Unit = definedExternally
        fun getDefaultDateSeparator(): String = definedExternally
        fun setShortDatetimeDisplayFormat(format: String): Unit = definedExternally
        fun setShortDatetimeDisplayFormat(format: Function<*>): Unit = definedExternally
        fun setFiscalCalendar(fiscalCalendar: FiscalCalendar): Unit = definedExternally
        fun getFiscalCalendar(): FiscalCalendar = definedExternally
        fun getFiscalStartDate(date: Number, fiscalCalendar: FiscalCalendar? = definedExternally /* null */): Date = definedExternally
        fun getFiscalStartDate(date: Date, fiscalCalendar: FiscalCalendar? = definedExternally /* null */): Date = definedExternally
        fun setShowChooserFiscalYearPickers(showChooserFiscalYearPickers: Boolean): Unit = definedExternally
        fun setShowChooserWeekPickers(showChooserWeekPickers: Boolean): Unit = definedExternally
        fun setFirstDayOfWeek(firstDayOfWeek: Number): Unit = definedExternally
        fun getFirstDayOfWeek(): Number = definedExternally
        fun getFiscalYear(date: Number, fiscalCalendar: FiscalCalendar? = definedExternally /* null */): FiscalYear = definedExternally
        fun getFiscalYear(date: Date, fiscalCalendar: FiscalCalendar? = definedExternally /* null */): FiscalYear = definedExternally
        fun getFiscalWeek(date: Date, fiscalCalendar: FiscalCalendar? = definedExternally /* null */): Number = definedExternally
        fun setWeekendDays(weekendDays: Array<Number>): Unit = definedExternally
        fun getWeekendDays(): Array<Number> = definedExternally
        fun mapRelativeDateShortcut(relativeDate: String, rangePosition: String? /* "start" */ = definedExternally /* null */): String = definedExternally
        fun mapRelativeDateShortcut(relativeDate: String, rangePosition: String? /* "end" */ = definedExternally /* null */): String = definedExternally
        fun getAbsoluteDate(relativeDate: String, baseDate: Date? = definedExternally /* null */, rangePosition: String? /* "start" */ = definedExternally /* null */, isLogicalDate: Boolean? = definedExternally /* null */): Date = definedExternally
        fun getAbsoluteDate(relativeDate: String, baseDate: Date? = definedExternally /* null */, rangePosition: String? /* "end" */ = definedExternally /* null */, isLogicalDate: Boolean? = definedExternally /* null */): Date = definedExternally
        fun getAbsoluteDate(relativeDate: RelativeDate, baseDate: Date? = definedExternally /* null */, rangePosition: String? /* "start" */ = definedExternally /* null */, isLogicalDate: Boolean? = definedExternally /* null */): Date = definedExternally
        fun getAbsoluteDate(relativeDate: RelativeDate, baseDate: Date? = definedExternally /* null */, rangePosition: String? /* "end" */ = definedExternally /* null */, isLogicalDate: Boolean? = definedExternally /* null */): Date = definedExternally
        fun getStartOf(date: Date, period: String, logicalDate: Boolean? = definedExternally /* null */, firstDayOfWeek: Number? = definedExternally /* null */): Date = definedExternally
        fun getEndOf(date: Date, period: String, logicalDate: Boolean? = definedExternally /* null */, firstDayOfWeek: Number? = definedExternally /* null */): Date = definedExternally
        fun mapRelativeDateShortcut(relativeDate: String): String = definedExternally
        fun getAbsoluteDate(relativeDate: String): Date = definedExternally
        fun getAbsoluteDate(relativeDate: RelativeDate): Date = definedExternally
    }
}
external open class Snapbar : Splitbar {
//    override var showRollOver: Boolean = definedExternally
//    override var showDown: Boolean = definedExternally
//    override var showGrip: Boolean = definedExternally
//    override var showDownGrip: Boolean = definedExternally
//    override var showRollOverGrip: Boolean = definedExternally
//    override var showClosedGrip: Boolean = definedExternally
//    override var gripImgSuffix: String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Snapbar = definedExternally
    }
}
external open class ToolStripButton : Button {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ToolStripButton = definedExternally
    }
}
external interface Chart {
    var valueProperty: String? get() = definedExternally; set(value) = definedExternally
    var data: dynamic /* CellRecord | Array<Any?> */ get() = definedExternally; set(value) = definedExternally
    var facets: dynamic /* Facet | Array<Any?> */ get() = definedExternally; set(value) = definedExternally
    var stacked: Boolean? get() = definedExternally; set(value) = definedExternally
    var chartType: dynamic /* String /* "Area" */ | String /* "Column" */ | String /* "Bar" */ | String /* "Line" */ | String /* "Radar" */ | String /* "Pie" */ | String /* "Doughnut" */ | String /* "Scatter" */ | String /* "Bubble" */ | String /* "Histogram" */ */ get() = definedExternally; set(value) = definedExternally
    var valueTitle: String? get() = definedExternally; set(value) = definedExternally
    var title: String? get() = definedExternally; set(value) = definedExternally
    var subTitle: String? get() = definedExternally; set(value) = definedExternally
    var threeD: Boolean? get() = definedExternally; set(value) = definedExternally
    var shouldAnimateShow: Boolean? get() = definedExternally; set(value) = definedExternally
    var labelValues: Boolean? get() = definedExternally; set(value) = definedExternally
    val setupChart: (() -> Unit)? get() = definedExternally
    val getFacet: ((facetId: String) -> Facet)? get() = definedExternally
    val getFacetValue: ((facetId: String, facetValueId: String) -> FacetValue)? get() = definedExternally
    val getValue: ((criteria: FacetValueMap) -> Any)? get() = definedExternally
    val setData: ((newData: dynamic /* CellRecord | Array<Any?> */) -> Unit)? get() = definedExternally
}
external open class CancelItem : ButtonItem {
//    override var title: String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): CancelItem = definedExternally
    }
}
external open class TableView : ListGrid {
//    override var iconField: String = definedExternally
    open var showIconField: Boolean = definedExternally
//    override var titleField: String = definedExternally
//    override var infoField: String = definedExternally
//    override var dataField: String = definedExternally
//    override var descriptionField: String = definedExternally
    open var recordNavigationProperty: String = definedExternally
    open var tableMode: dynamic /* String /* "plain" */ | String /* "grouped" */ */ = definedExternally
    open var recordLayout: dynamic /* String /* "titleOnly" */ | String /* "titleAndDescription" */ | String /* "summaryInfo" */ | String /* "summaryData" */ | String /* "summaryFull" */ */ = definedExternally
    open var navIcon: String = definedExternally
    open var wholeRecordNavIcon: String = definedExternally
    open var showNavigation: Boolean = definedExternally
    open var navigationMode: dynamic /* String /* "wholeRecord" */ | String /* "navIconOnly" */ */ = definedExternally
    open var recordTitleStyle: String = definedExternally
    open var recordDescriptionStyle: String = definedExternally
    open var recordDataStyle: String = definedExternally
    open var recordInfoStyle: String = definedExternally
    open fun recordNavigationClick(record: ListGridRecord): Unit = definedExternally
    open fun imageClick(record: ListGridRecord): Unit = definedExternally
    open fun formatRecord(record: ListGridRecord): String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): TableView = definedExternally
        var PLAIN: String = definedExternally
        var GROUPED: String = definedExternally
        var TITLE_ONLY: String = definedExternally
        var TITLE_DESCRIPTION: String = definedExternally
        var SUMMARY_INFO: String = definedExternally
        var SUMMARY_DATA: String = definedExternally
        var SUMMARY_FULL: String = definedExternally
        var WHOLE_RECORD: String = definedExternally
        var NAVICON_ONLY: String = definedExternally
    }
}
external open class DateItemEditProxy : FormItemEditProxy {
//    override fun getInlineEditText(): Unit = definedExternally
//    override fun setInlineEditText(newValue: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DateItemEditProxy = definedExternally
    }
}
external open class DSLoadSettings {
    open var forceReload: Boolean = definedExternally
    open var loadParents: Boolean = definedExternally
    open var mockMode: Boolean = definedExternally
}
external open class AutoTest : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): AutoTest = definedExternally
        var implicitNetworkWait: Boolean = definedExternally
        var testRoot: Canvas = definedExternally
        fun getLocator(DOMElement: DOMElement, checkForNativeHandling: Boolean? = definedExternally /* null */, coords: Array<Any>? = definedExternally /* null */): String = definedExternally
        fun locateCanvasFromDOMElement(element: DOMElement): Unit = definedExternally
        fun getElement(locator: String): DOMElement = definedExternally
        fun getObject(locator: String): dynamic /* Canvas | FormItem | SectionStackSection */ = definedExternally
        fun getValue(locator: String): Any = definedExternally
        fun getPageCoords(locator: String): Array<Any> = definedExternally
        fun setTestRoot(canvas: Canvas): Unit = definedExternally
        fun isCanvasDone(element: String): Boolean = definedExternally
        fun isCanvasDone(element: Canvas): Boolean = definedExternally
        fun isCanvasDone(element: DOMElement): Boolean = definedExternally
        fun isTileLayoutDone(element: String): Boolean = definedExternally
        fun isTileLayoutDone(element: Canvas): Boolean = definedExternally
        fun isTileLayoutDone(element: DOMElement): Boolean = definedExternally
        fun isTileGridDone(element: String): Boolean = definedExternally
        fun isTileGridDone(element: Canvas): Boolean = definedExternally
        fun isTileGridDone(element: DOMElement): Boolean = definedExternally
        fun isFormDone(element: String): Boolean = definedExternally
        fun isFormDone(element: Canvas): Boolean = definedExternally
        fun isFormDone(element: DOMElement): Boolean = definedExternally
        fun isItemDone(element: String): Boolean = definedExternally
        fun isItemDone(element: FormItem): Boolean = definedExternally
        fun isItemDone(element: DOMElement): Boolean = definedExternally
        fun isGridDone(element: String): Boolean = definedExternally
        fun isGridDone(element: Canvas): Boolean = definedExternally
        fun isGridDone(element: DOMElement): Boolean = definedExternally
        fun isElementClickable(element: String): Boolean = definedExternally
        fun isElementClickable(element: Canvas): Boolean = definedExternally
        fun isElementClickable(element: FormItem): Boolean = definedExternally
        fun isElementClickable(element: DOMElement): Boolean = definedExternally
        fun isElementReadyForKeyPresses(element: String): Boolean = definedExternally
        fun isElementReadyForKeyPresses(element: Canvas): Boolean = definedExternally
        fun isElementReadyForKeyPresses(element: FormItem): Boolean = definedExternally
        fun isElementReadyForKeyPresses(element: DOMElement): Boolean = definedExternally
        fun isSystemDone(includeRedraws: Boolean? = definedExternally /* null */, allowEdits: Boolean? = definedExternally /* null */): Boolean = definedExternally
    }
}
external open class isA {
    companion object {
        fun emptyString(`object`: Any): Boolean = definedExternally
        fun nonemptyString(`object`: Any): Boolean = definedExternally
        fun Object(`object`: Any): Boolean = definedExternally
        fun emptyObject(`object`: Any): Boolean = definedExternally
        fun emptyArray(`object`: Any): Boolean = definedExternally
        fun String(`object`: Any): Boolean = definedExternally
        fun Array(`object`: Any): Boolean = definedExternally
        fun Function(`object`: Any): Boolean = definedExternally
        fun Number(`object`: Any): Boolean = definedExternally
        fun Boolean(`object`: Any): Boolean = definedExternally
        fun Date(`object`: Any): Boolean = definedExternally
        fun RegularExpression(`object`: Any): Boolean = definedExternally
        fun Instance(`object`: Any): Boolean = definedExternally
        fun ClassObject(`object`: Any): Boolean = definedExternally
        fun Interface(`object`: Any): Boolean = definedExternally
        fun List(`object`: Any): Boolean = definedExternally
    }
}
external open class GroupNode {
    open var groupMembers: dynamic /* Array<Any?> | GroupNode */ = definedExternally
    open var groupTitle: String = definedExternally
    open var groupValue: Any = definedExternally
}
external open class ToolStripSeparator : Img {
//    override var skinImgDir: String = definedExternally
    open var vSrc: String = definedExternally
    open var hSrc: String = definedExternally
//    override var editProxyConstructor: String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ToolStripSeparator = definedExternally
    }
}
external interface List {
    val get: ((pos: Number) -> Any)? get() = definedExternally
    val getLength: (() -> Number)? get() = definedExternally
    val isEmpty: (() -> Boolean)? get() = definedExternally
    val first: (() -> Any)? get() = definedExternally
    val last: (() -> Any)? get() = definedExternally
    val indexOf: ((obj: Any, pos: Number? /*= null*/, endPos: Number? /*= null*/) -> Number)? get() = definedExternally
    val lastIndexOf: ((obj: Any, pos: Number? /*= null*/, endPos: Number? /*= null*/) -> Number)? get() = definedExternally
    val findIndex: ((propertyName: dynamic /* String | Any? | AdvancedCriteria */, value: Any? /*= null*/) -> Number)? get() = definedExternally
    val findNextIndex: ((startIndex: Number, propertyName: dynamic /* String | Any? | Function<*> | AdvancedCriteria */, value: Any? /*= null*/, endIndex: Number? /*= null*/) -> Number)? get() = definedExternally
    val find: ((propertyName: dynamic /* String | Any? | AdvancedCriteria */, value: Any? /*= null*/) -> Any)? get() = definedExternally
    val findAll: ((propertyName: dynamic /* String | Any? | AdvancedCriteria */, value: Any? /*= null*/) -> Array<Any>)? get() = definedExternally
    val contains: ((obj: Any, pos: Number? /*= null*/) -> Boolean)? get() = definedExternally
    val containsAll: ((list: List) -> Boolean)? get() = definedExternally
    val intersect: ((lists: Any) -> List)? get() = definedExternally
    val equals: ((list: List) -> Boolean)? get() = definedExternally
    val getItems: ((itemList: Array<Number>) -> Array<Any>)? get() = definedExternally
    val getRange: ((start: Number, end: Number) -> Array<Any>)? get() = definedExternally
    val duplicate: (() -> Array<Any>)? get() = definedExternally
    val set: ((pos: Number, obj: Any) -> Any)? get() = definedExternally
    val addAt: ((obj: Any, pos: Number) -> Any)? get() = definedExternally
    val removeAt: ((pos: Number) -> Any)? get() = definedExternally
    val add: ((`object`: Any) -> Any)? get() = definedExternally
    val addList: ((list: Array<Any>, listStartRow: Number? /*= null*/, listEndRow: Number? /*= null*/) -> List)? get() = definedExternally
    val setLength: ((length: Number) -> Unit)? get() = definedExternally
    val addListAt: ((list: Array<Any>, pos: Number) -> Array<Any>)? get() = definedExternally
    val remove: ((obj: Any) -> Boolean)? get() = definedExternally
    val removeList: ((list: Array<Any>) -> List)? get() = definedExternally
    val sort: ((comparator: Function<*>? /*= null*/) -> List)? get() = definedExternally
    val getProperty: ((property: String) -> Array<Any>)? get() = definedExternally
    val sortByProperty: ((property: String, up: Boolean, normalizer: dynamic /* Any? | Function<*> */ /*= null*/, context: Any? /*= null*/) -> List)? get() = definedExternally
    val getValueMap: ((idField: String, displayField: String) -> Any)? get() = definedExternally
    val dataChanged: (() -> Unit)? get() = definedExternally
}
external open class ButtonItem : CanvasItem {
//    override var height: Number = definedExternally
    open var baseStyle: String = definedExternally
    open var icon: String = definedExternally
//    override var showTitle: Boolean = definedExternally
//    override var startRow: Boolean = definedExternally
//    override var endRow: Boolean = definedExternally
    open var button: Canvas = definedExternally
    open var buttonConstructor: Class = definedExternally
    open var autoFit: Boolean = definedExternally
    open var buttonProperties: Any = definedExternally
//    override var readOnlyDisplay: dynamic /* String /* "static" */ | String /* "readOnly" */ | String /* "disabled" */ */ = definedExternally
    open var enableWhen: AdvancedCriteria = definedExternally
    open var showFocusedAsOver: Boolean = definedExternally
//    override var editProxyConstructor: String = definedExternally
//    override fun click(form: DynamicForm, item: FormItem): Boolean = definedExternally
    open fun setTitle(newTitle: String): Unit = definedExternally
    open fun setShowFocusedAsOver(showFocusedAsOver: Boolean): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ButtonItem = definedExternally
    }
}
external open class FilterClause : Layout {
    open var criterion: Any? = definedExternally
    open var showFieldTitles: Boolean = definedExternally
    open var validateOnChange: Boolean = definedExternally
    open var fieldPicker: PickList = definedExternally
    open var fieldPickerTitle: String = definedExternally
    open var fieldPickerProperties: FormItem = definedExternally
    open var operatorPicker: SelectItem = definedExternally
    open var operatorPickerProperties: FormItem = definedExternally
    open var operatorPickerTitle: String = definedExternally
    open var valueItemTitle: String = definedExternally
    open var valueSetHint: String = definedExternally
    open var valueItemTextHint: String = definedExternally
    open var valueItemListHint: String = definedExternally
    open var valueItemFieldHint: String = definedExternally
    open var clause: SearchForm = definedExternally
    open var showRemoveButton: Boolean = definedExternally
    open var removeButtonPrompt: String = definedExternally
    open var removeButton: ImgButton = definedExternally
    open fun getFilterBuilder(): Unit = definedExternally
    open fun getValueFieldProperties(type: dynamic /* String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "datetime" */ | String /* "enum" */ | String /* "intEnum" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ | String /* "any" */ | String /* "custom" */ | String /* "modifier" */ | String /* "modifierTimestamp" */ | String /* "creator" */ | String /* "creatorTimestamp" */ | String /* "password" */ | String /* "ntext" */ | String /* "localeInt" */ | String /* "localeFloat" */ | String /* "localeCurrency" */ | String /* "phoneNumber" */ */, fieldName: String, operatorId: dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */, itemType: String /* "value" */): FormItem = definedExternally
    open fun getValueFieldProperties(type: dynamic /* String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "datetime" */ | String /* "enum" */ | String /* "intEnum" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ | String /* "any" */ | String /* "custom" */ | String /* "modifier" */ | String /* "modifierTimestamp" */ | String /* "creator" */ | String /* "creatorTimestamp" */ | String /* "password" */ | String /* "ntext" */ | String /* "localeInt" */ | String /* "localeFloat" */ | String /* "localeCurrency" */ | String /* "phoneNumber" */ */, fieldName: String, operatorId: dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */, itemType: String /* "name" */): FormItem = definedExternally
    open fun getValueFieldProperties(type: dynamic /* String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "datetime" */ | String /* "enum" */ | String /* "intEnum" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ | String /* "any" */ | String /* "custom" */ | String /* "modifier" */ | String /* "modifierTimestamp" */ | String /* "creator" */ | String /* "creatorTimestamp" */ | String /* "password" */ | String /* "ntext" */ | String /* "localeInt" */ | String /* "localeFloat" */ | String /* "localeCurrency" */ | String /* "phoneNumber" */ */, fieldName: String, operatorId: dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */, itemType: String /* "start" */): FormItem = definedExternally
    open fun getValueFieldProperties(type: dynamic /* String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "datetime" */ | String /* "enum" */ | String /* "intEnum" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ | String /* "any" */ | String /* "custom" */ | String /* "modifier" */ | String /* "modifierTimestamp" */ | String /* "creator" */ | String /* "creatorTimestamp" */ | String /* "password" */ | String /* "ntext" */ | String /* "localeInt" */ | String /* "localeFloat" */ | String /* "localeCurrency" */ | String /* "phoneNumber" */ */, fieldName: String, operatorId: dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */, itemType: String /* "end" */): FormItem = definedExternally
    open fun remove(): Unit = definedExternally
    open fun getCriterion(): Any? = definedExternally
    open fun validate(): Boolean = definedExternally
    open fun getFieldOperators(fieldName: String): Array<dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */> = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): FilterClause = definedExternally
    }
}
external open class TextSettings : Class {
    open var fieldList: Array<String> = definedExternally
    open var fieldSeparator: String = definedExternally
    open var lineSeparator: String = definedExternally
    open var escapingMode: dynamic /* String /* "double" */ | String /* "backslash" */ */ = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): TextSettings = definedExternally
    }
}
external open class FacetChart : DrawPane, Chart {
//    override var styleName: String = definedExternally
//    override var valueProperty: String = definedExternally
//    override var data: dynamic /* CellRecord | Array<Any?> */ = definedExternally
//    override var facets: dynamic /* Facet | Array<Any?> */ = definedExternally
    open var metricFacetId: String = definedExternally
//    override var chartType: dynamic /* String /* "Area" */ | String /* "Column" */ | String /* "Bar" */ | String /* "Line" */ | String /* "Radar" */ | String /* "Pie" */ | String /* "Doughnut" */ | String /* "Scatter" */ | String /* "Bubble" */ | String /* "Histogram" */ */ = definedExternally
//    override var stacked: Boolean = definedExternally
    open var filled: Boolean = definedExternally
    open var proportional: Boolean = definedExternally
    open var proportionalAxisLabel: String = definedExternally
    open var allowedChartTypes: Array<dynamic /* String /* "Area" */ | String /* "Column" */ | String /* "Bar" */ | String /* "Line" */ | String /* "Radar" */ | String /* "Pie" */ | String /* "Doughnut" */ | String /* "Scatter" */ | String /* "Bubble" */ | String /* "Histogram" */ */> = definedExternally
//    override var title: String = definedExternally
    open var showTitle: Boolean = definedExternally
    open var titlePadding: Boolean = definedExternally
    open var titleProperties: DrawLabel = definedExternally
    open var titleRectHeight: Number = definedExternally
    open var titleBackgroundProperties: DrawLabel = definedExternally
    open var titleBoundaryProperties: DrawLine = definedExternally
    open var drawTitleBackground: Boolean = definedExternally
    open var drawTitleBoundary: Boolean = definedExternally
//    override var valueTitle: String = definedExternally
    open var showValueAxisLabel: Boolean = definedExternally
    open var valueAxisLabelProperties: DrawLabel = definedExternally
    open var showDataAxisLabel: Boolean = definedExternally
    open var dataAxisLabelProperties: DrawLabel = definedExternally
    open var pixelsPerGradation: Number = definedExternally
    open var otherAxisPixelsPerGradation: Number = definedExternally
    open var gradationGaps: Array<Number> = definedExternally
    open var otherAxisGradationGaps: Array<Number> = definedExternally
    open var otherAxisGradationTimes: Array<String> = definedExternally
    open var minDataSpreadPercent: Number = definedExternally
    open var axisStartValue: Number = definedExternally
    open var axisEndValue: Number = definedExternally
    open var xAxisStartValue: dynamic /* Number | Date */ = definedExternally
    open var xAxisEndValue: dynamic /* Number | Date */ = definedExternally
    open var minXDataSpreadPercent: Number = definedExternally
    open var gradationLabelProperties: DrawLabel = definedExternally
    open var gradationLineProperties: DrawLine = definedExternally
    open var gradationZeroLineProperties: DrawLine = definedExternally
    open var bandedBackground: Boolean = definedExternally
    open var backgroundBandProperties: DrawRect = definedExternally
    open var showRadarGradationLabels: Boolean = definedExternally
    open var xAxisMetric: String = definedExternally
    open var yAxisMetric: String = definedExternally
    open var showScatterLines: Boolean = definedExternally
    open var dataLineType: dynamic /* String /* "straight" */ | String /* "smooth" */ */ = definedExternally
    open var probabilityMetric: String = definedExternally
    open var showStatisticsOverData: Boolean = definedExternally
    open var showExpectedValueLine: Boolean = definedExternally
    open var expectedValueLineProperties: DrawItem = definedExternally
    open var showStandardDeviationLines: Boolean = definedExternally
    open var standardDeviationLineProperties: DrawItem = definedExternally
    open var useSymmetricStandardDeviations: Boolean = definedExternally
    open var standardDeviations: Array<Number> = definedExternally
    open var bandedStandardDeviations: Boolean = definedExternally
    open var standardDeviationBandProperties: Array<Any?> = definedExternally
    open var showRegressionLine: Boolean = definedExternally
    open var regressionLineProperties: DrawLine = definedExternally
    open var regressionLineType: dynamic /* String /* "line" */ | String /* "polynomial" */ */ = definedExternally
    open var regressionPolynomialDegree: Number = definedExternally
    open var showDataPoints: Boolean = definedExternally
    open var dataPointSize: Number = definedExternally
    open var dataPointProperties: DrawItem = definedExternally
    open var pointShapes: Array<dynamic /* String /* "Oval" */ | String /* "Square" */ | String /* "Diamond" */ | String /* "Triangle" */ */> = definedExternally
    open var pointSizeMetric: String = definedExternally
    open var minDataPointSize: Number = definedExternally
    open var maxDataPointSize: Number = definedExternally
    open var logScalePointSize: Boolean = definedExternally
    open var pointSizeLogBase: Number = definedExternally
    open var bubbleProperties: DrawItem = definedExternally
    open var allowBubbleGradients: Boolean = definedExternally
    open var useMultiplePointShapes: Boolean = definedExternally
    open var showPointSizeLegend: Boolean = definedExternally
    open var pointSizeGradations: Number = definedExternally
    open var usePointSizeLogGradations: Boolean = definedExternally
    open var pointSizeLogGradations: Array<Number> = definedExternally
    open var showBubbleLegendPerShape: Boolean = definedExternally
    open var autoSortBubblePoints: Boolean = definedExternally
    open var colorScaleMetric: String = definedExternally
    open var logScalePointColor: Boolean = definedExternally
    open var pointColorLogBase: Number = definedExternally
    open var showColorScaleLegend: Boolean = definedExternally
    open var scaleStartColor: String = definedExternally
    open var scaleEndColor: String = definedExternally
    open var logScale: Boolean = definedExternally
    open var useLogGradations: Boolean = definedExternally
    open var logBase: Number = definedExternally
    open var logGradations: Array<Number> = definedExternally
    open var showChartRect: Boolean = definedExternally
    open var chartRectProperties: DrawRect = definedExternally
    open var padChartRectByCornerRadius: Boolean = definedExternally
    open var chartRectMargin: Number = definedExternally
    open var dataMargin: Number = definedExternally
    open var rotateLabels: dynamic /* String /* "auto" */ | String /* "never" */ | String /* "always" */ */ = definedExternally
    open var radarRotateLabels: dynamic /* String /* "auto" */ | String /* "never" */ | String /* "always" */ */ = definedExternally
    open var autoRotateLabels: Boolean = definedExternally
    open var labelCollapseMode: dynamic /* String /* "none" */ | String /* "time" */ | String /* "numeric" */ | String /* "sample" */ */ = definedExternally
    open var minLabelGap: Number = definedExternally
    open var dataLabelProperties: DrawLabel = definedExternally
    open var showDataLabels: Boolean = definedExternally
    open var decimalPrecision: Number = definedExternally
    open var canZoom: Boolean = definedExternally
    open var zoomChart: FacetChart = definedExternally
    open var zoomChartProperties: FacetChart = definedExternally
    open var zoomSelectionChart: FacetChart = definedExternally
    open var zoomSelectionChartProperties: FacetChart = definedExternally
    open var zoomShowSelection: Boolean = definedExternally
    open var zoomChartSlider: RangeSlider = definedExternally
    open var zoomChartHeight: Number = definedExternally
    open var zoomLogScale: Boolean = definedExternally
    open var colorMutePercent: Number = definedExternally
    open var zoomMutePercent: Number = definedExternally
    open var zoomStartPosition: dynamic /* String /* "start" */ | String /* "end" */ */ = definedExternally
    open var zoomStartValue: Any = definedExternally
    open var zoomEndValue: Any = definedExternally
    open var printZoomChart: Boolean = definedExternally
    open var showInlineLabels: Boolean = definedExternally
    open var showGradationsOverData: Boolean = definedExternally
    open var showLegend: Boolean = definedExternally
    open var legendMargin: Number = definedExternally
    open var legendPadding: Number = definedExternally
    open var legendRectHeight: Number = definedExternally
    open var legendSwatchSize: Number = definedExternally
    open var legendSwatchProperties: DrawRect = definedExternally
    open var legendTextPadding: Number = definedExternally
    open var legendItemPadding: Number = definedExternally
    open var legendRectProperties: DrawRect = definedExternally
    open var legendBoundaryProperties: DrawLine = definedExternally
    open var legendLabelProperties: DrawLabel = definedExternally
    open var drawLegendBoundary: Boolean = definedExternally
    open var showShadows: Boolean = definedExternally
    open var shadowProperties: DrawOval = definedExternally
    open var barMargin: Number = definedExternally
    open var minBarThickness: Number = definedExternally
    open var maxBarThickness: Number = definedExternally
    open var clusterMarginRatio: Number = definedExternally
    open var barProperties: DrawRect = definedExternally
    open var dataLineProperties: DrawLine = definedExternally
    open var dataOutlineProperties: DrawItem = definedExternally
    open var dataShapeProperties: DrawPath = definedExternally
    open var valueLineProperties: DrawLine = definedExternally
    open var discontinuousLines: Boolean = definedExternally
    open var radarBackgroundProperties: DrawOval = definedExternally
    open var radialLabelOffset: Number = definedExternally
    open var pieStartAngle: Number = definedExternally
    open var pieSliceProperties: DrawSector = definedExternally
    open var pieBorderProperties: DrawOval = definedExternally
    open var pieRingBorderProperties: DrawOval = definedExternally
    open var showDoughnut: Boolean = definedExternally
    open var doughnutRatio: Number = definedExternally
    open var doughnutHoleProperties: DrawOval = definedExternally
    open var pieLabelLineProperties: DrawLine = definedExternally
    open var pieLabelAngleStart: Number = definedExternally
    open var pieLabelLineExtent: Number = definedExternally
    open var endValueMetric: String = definedExternally
    open var zIndexMetric: String = definedExternally
    open var maxDataZIndex: Number = definedExternally
    open var lowErrorMetric: String = definedExternally
    open var highErrorMetric: String = definedExternally
    open var errorBarWidth: Number = definedExternally
    open var errorLineProperties: DrawLine = definedExternally
    open var errorBarColorMutePercent: Number = definedExternally
    open var showValueOnHover: Boolean = definedExternally
    open var hoverLabelProperties: DrawLabel = definedExternally
    open var hoverLabelPadding: Number = definedExternally
    open var hoverRectProperties: DrawRect = definedExternally
    open var showDataValues: Boolean = definedExternally
    open var bubbleHoverMaxDistance: Number = definedExternally
    open var valueAxisMargin: Number = definedExternally
    open var showYTicks: Boolean = definedExternally
    open var showXTicks: Boolean = definedExternally
    open var tickLength: Number = definedExternally
    open var minorTickLength: Number = definedExternally
    open var gradationTickMarkLength: Number = definedExternally
    open var tickMarkToValueAxisMargin: Number = definedExternally
    open var showMinorTicks: Boolean = definedExternally
    open var majorTickGradations: Array<Number> = definedExternally
    open var majorTickTimeIntervals: Array<String> = definedExternally
    open var canMoveAxes: Boolean = definedExternally
    open var extraAxisMetrics: Array<String> = definedExternally
    open var extraAxisSettings: Array<Any?> = definedExternally
    open var autoScrollData: Boolean = definedExternally
    open var autoScrollDataApproach: dynamic /* String /* "both" */ | String /* "labels" */ | String /* "clusters" */ */ = definedExternally
    open var centerTitle: Boolean = definedExternally
    open var centerLegend: Boolean = definedExternally
    open var gradationLabelPadding: Number = definedExternally
    open var yAxisLabelPadding: Number = definedExternally
    open var formatStringFacetValueIds: Boolean = definedExternally
    open var useAutoGradients: Boolean = definedExternally
    open var matchBarChartDataLineColor: Boolean = definedExternally
    open var brightenAllOnHover: Boolean = definedExternally
    open var dataColors: Array<String> = definedExternally
    open var dataGradients: Any = definedExternally
//    override var editProxyConstructor: String = definedExternally
//    override fun getFacet(facetId: String): Facet = definedExternally
//    override fun getFacetValue(facetId: String, facetValueId: String): FacetValue = definedExternally
    open fun setProportional(proportional: Boolean): Unit = definedExternally
    open fun setPixelsPerGradation(pixelsPerGradation: Number): Unit = definedExternally
    open fun setOtherAxisPixelsPerGradation(pixelsPerGradation: Number): Unit = definedExternally
    open fun setGradationGaps(gradationGaps: Array<Number>): Unit = definedExternally
    open fun setOtherAxisGradationGaps(gradationGaps: Array<Number>): Unit = definedExternally
    open fun setOtherAxisGradationTimes(otherAxisGradationTimes: Array<String>): Unit = definedExternally
    open fun setShowScatterLines(showScatterLines: Boolean): Unit = definedExternally
    open fun setDataLineType(dataLineType: String /* "straight" */): Unit = definedExternally
    open fun setDataLineType(dataLineType: String /* "smooth" */): Unit = definedExternally
    open fun setUseMultiplePointShapes(useMultiplePointShapes: Boolean): Unit = definedExternally
    open fun setScaleStartColor(scaleStartColor: String): Unit = definedExternally
    open fun setScaleEndColor(scaleEndColor: String): Unit = definedExternally
    open fun zoomChanged(startValue: Any, endValue: Any): Unit = definedExternally
    open fun valueClick(drawnValue: DrawnValue): Unit = definedExternally
    open fun legendClick(facetValue: FacetValue, metricFacetValue: FacetValue): Unit = definedExternally
    open fun dataLabelClick(facetValue: FacetValue): Unit = definedExternally
    open fun getMinClusterSize(index: Number, facetValueId: String): Number = definedExternally
    open fun getMinClusterSize(index: Number, facetValueId: Number): Number = definedExternally
    open fun getMinClusterSize(index: Number, facetValueId: Date): Number = definedExternally
    open fun formatSegmentLabel(startValue: Any, endValue: Any): String = definedExternally
    open fun setZIndexMetric(zIndexMetric: String): Unit = definedExternally
    open fun dataLabelHover(facetValue: FacetValue): Unit = definedExternally
    open fun getDataLabelHoverHTML(facetValue: FacetValue): String = definedExternally
    open fun legendHover(facetValue: FacetValue, metricFacetValue: FacetValue): Unit = definedExternally
    open fun getLegendHoverHTML(facetValue: FacetValue, metricFacetValue: FacetValue): String = definedExternally
    open fun setShowYTicks(showTicks: Boolean): Unit = definedExternally
    open fun setShowXTicks(showTicks: Boolean): Unit = definedExternally
    open fun setTickLength(tickLength: Number): Unit = definedExternally
    open fun setMinorTickLength(minorTickLength: Number): Unit = definedExternally
    open fun setShowMinorTicks(showMinorTicks: Boolean): Unit = definedExternally
    open fun setMajorTickGradations(majorTickGradations: Array<Number>): Unit = definedExternally
    open fun setMajorTickTimeIntervals(majorTickTimeIntervals: Array<String>): Unit = definedExternally
//    override fun getPrintHTML(printProperties: PrintProperties?, callback: Any?): String = definedExternally
    open fun getChartTop(): Number = definedExternally
    open fun getChartHeight(recalc: Boolean): Number = definedExternally
    open fun getChartLeft(): Number = definedExternally
    open fun getChartWidth(recalc: Boolean): Number = definedExternally
    open fun setAutoScrollData(autoScrollData: Boolean): Unit = definedExternally
    open fun setAutoScrollDataApproach(autoScrollDataApproach: String /* "both" */): Unit = definedExternally
    open fun setAutoScrollDataApproach(autoScrollDataApproach: String /* "labels" */): Unit = definedExternally
    open fun setAutoScrollDataApproach(autoScrollDataApproach: String /* "clusters" */): Unit = definedExternally
    open fun setStacked(stacked: Boolean): Unit = definedExternally
    open fun setFilled(filled: Boolean): Unit = definedExternally
    open fun setChartType(chartType: String /* "Area" */): Unit = definedExternally
    open fun setChartType(chartType: String /* "Column" */): Unit = definedExternally
    open fun setChartType(chartType: String /* "Bar" */): Unit = definedExternally
    open fun setChartType(chartType: String /* "Line" */): Unit = definedExternally
    open fun setChartType(chartType: String /* "Radar" */): Unit = definedExternally
    open fun setChartType(chartType: String /* "Pie" */): Unit = definedExternally
    open fun setChartType(chartType: String /* "Doughnut" */): Unit = definedExternally
    open fun setChartType(chartType: String /* "Scatter" */): Unit = definedExternally
    open fun setChartType(chartType: String /* "Bubble" */): Unit = definedExternally
    open fun setChartType(chartType: String /* "Histogram" */): Unit = definedExternally
    open fun chartBackgroundDrawn(): Unit = definedExternally
    open fun chartDrawn(): Unit = definedExternally
    open fun getGradations(): Array<Number> = definedExternally
    open fun getYCoord(value: Number): Number = definedExternally
    open fun getYCoord(value: FacetValueMap): Number = definedExternally
    open fun getXCoord(value: Number): Number = definedExternally
    open fun getXCoord(value: FacetValueMap): Number = definedExternally
    open fun getChartCenter(): Point = definedExternally
    open fun getChartRadius(): Number = definedExternally
    open fun formatAxisValue(value: Any, forHorizontalAxis: Boolean): String = definedExternally
    open fun formatFacetValueId(value: Any, facet: Facet): String = definedExternally
    open fun formatDataValue(value: Any): String = definedExternally
    open fun getNumDataPoints(criteria: FacetValueMap? = definedExternally /* null */): Number = definedExternally
    open fun getMean(criteria: String): Number = definedExternally
    open fun getMean(criteria: FacetValueMap): Number = definedExternally
    open fun getMedian(criteria: String): Number = definedExternally
    open fun getMedian(criteria: FacetValueMap): Number = definedExternally
    open fun getPercentile(criteria: String, percentile: Number): Number = definedExternally
    open fun getPercentile(criteria: FacetValueMap, percentile: Number): Number = definedExternally
    open fun getRange(criteria: String): Number = definedExternally
    open fun getRange(criteria: FacetValueMap): Number = definedExternally
    open fun getStdDev(criteria: String, population: Boolean): Number = definedExternally
    open fun getStdDev(criteria: FacetValueMap, population: Boolean): Number = definedExternally
    open fun getVariance(criteria: String, population: Boolean): Number = definedExternally
    open fun getVariance(criteria: FacetValueMap, population: Boolean): Number = definedExternally
    open fun getMax(criteria: String): Number = definedExternally
    open fun getMax(criteria: FacetValueMap): Number = definedExternally
    open fun getMin(criteria: String): Number = definedExternally
    open fun getMin(criteria: FacetValueMap): Number = definedExternally
    open fun setRegressionLineType(regressionLineType: String /* "line" */): Unit = definedExternally
    open fun setRegressionLineType(regressionLineType: String /* "polynomial" */): Unit = definedExternally
    open fun setShowRegressionLine(showRegressionLine: Boolean): Unit = definedExternally
    open fun setRegressionPolynomialDegree(regressionPolynomialDegree: Number): Unit = definedExternally
    open fun getSimpleLinearRegressionFunction(xMetric: String? = definedExternally /* null */, yMetric: String? = definedExternally /* null */): Unit = definedExternally
    open fun getPolynomialRegressionFunction(degree: Number? = definedExternally /* null */, xMetric: String? = definedExternally /* null */, yMetric: String? = definedExternally /* null */): Unit = definedExternally
    open fun pointClick(value: Number, record: Record, metricId: String): Unit = definedExternally
    open fun getPointHoverHTML(value: Number, record: Record, metricId: String): String = definedExternally
    open fun getLegendFacet(): Facet = definedExternally
    open fun getDataLabelFacet(): Facet = definedExternally
    open fun setDataColors(dataColors: Array<String>): Unit = definedExternally
    open fun getDataColor(index: Number, facetValueId: String, purpose: String): String = definedExternally
    open fun getDataColor(index: Number, facetValueId: Number, purpose: String): String = definedExternally
    open fun getDataColor(index: Number, facetValueId: Date, purpose: String): String = definedExternally
    open fun getDataLineColor(index: Number, facetValueId: String, purpose: String): String = definedExternally
    open fun getDataLineColor(index: Number, facetValueId: Number, purpose: String): String = definedExternally
    open fun getDataLineColor(index: Number, facetValueId: Date, purpose: String): String = definedExternally
    open fun getDataLineWidth(index: Number, facetValueId: String, purpose: String): Number = definedExternally
    open fun getDataLineWidth(index: Number, facetValueId: Number, purpose: String): Number = definedExternally
    open fun getDataLineWidth(index: Number, facetValueId: Date, purpose: String): Number = definedExternally
    open fun getDataGradient(index: Number, facetValueId: String, purpose: String): String = definedExternally
    open fun getDataGradient(index: Number, facetValueId: Number, purpose: String): String = definedExternally
    open fun getDataGradient(index: Number, facetValueId: Date, purpose: String): String = definedExternally
    open fun getDrawnValueAtPoint(x: Number? = definedExternally /* null */, y: Number? = definedExternally /* null */, metric: String? = definedExternally /* null */): DrawnValue = definedExternally
    open fun getDrawnValuesAtPoint(x: Number? = definedExternally /* null */, y: Number? = definedExternally /* null */): Array<Any?> = definedExternally
    open fun drawnValueContainsPoint(drawnValue: DrawnValue, x: Number? = definedExternally /* null */, y: Number? = definedExternally /* null */): Boolean = definedExternally
    open fun getNearestDrawnValue(x: Number? = definedExternally /* null */, y: Number? = definedExternally /* null */, metric: String? = definedExternally /* null */): DrawnValue = definedExternally
    open fun getNearestDrawnValues(x: Number? = definedExternally /* null */, y: Number? = definedExternally /* null */): Array<Any?> = definedExternally
    open fun getDrawnValue(facetValues: FacetValueMap): DrawnValue = definedExternally
    open fun getDrawnValues(facetValues: FacetValueMap? = definedExternally /* null */): Array<Any?> = definedExternally
    open fun zoomTo(startValue: Any, endValue: Any): Unit = definedExternally
    open fun setZoomStartValue(zoomStartValue: Any): Unit = definedExternally
    open fun setZoomEndValue(zoomEndValue: Any): Unit = definedExternally
//    override var subTitle: String = definedExternally
//    override var threeD: Boolean = definedExternally
//    override var shouldAnimateShow: Boolean = definedExternally
//    override var labelValues: Boolean = definedExternally
//    override fun setupChart(): Unit = definedExternally
//    override fun getValue(criteria: FacetValueMap): Any = definedExternally
//    override fun setData(newData: CellRecord): Unit = definedExternally
//    override fun setData(newData: Array<Any?>): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): FacetChart = definedExternally
        var allChartTypes: Array<dynamic /* String /* "Area" */ | String /* "Column" */ | String /* "Bar" */ | String /* "Line" */ | String /* "Radar" */ | String /* "Pie" */ | String /* "Doughnut" */ | String /* "Scatter" */ | String /* "Bubble" */ | String /* "Histogram" */ */> = definedExternally
        var proportionalContextMenuItemTitle: String = definedExternally
        var regressionLinesContextMenuItemTitle: String = definedExternally
        var hideRegressionLinesContextMenuItemTitle: String = definedExternally
        var linearRegressionLinesContextMenuItemTitle: String = definedExternally
        var polynomialRegressionLinesContextMenuItemTitle: String = definedExternally
        var polynomialDegreeRegressionLinesContextMenuItemTitle: String = definedExternally
        var polynomialDegreePrompt: String = definedExternally
        var invalidPolynomialDegreeMessage: String = definedExternally
        var chartTypeContextMenuItemTitle: String = definedExternally
        var fillContextMenuItemTitle: String = definedExternally
        var fillFilledContextMenuItemTitle: String = definedExternally
        var fillUnfilledContextMenuItemTitle: String = definedExternally
        var fillAutoContextMenuItemTitle: String = definedExternally
        var stackContextMenuItemTitle: String = definedExternally
        var stackStackedContextMenuItemTitle: String = definedExternally
        var stackUnstackedContextMenuItemTitle: String = definedExternally
        var stackAutoContextMenuItemTitle: String = definedExternally
        var swapFacetsContextMenuItemTitle: String = definedExternally
        var chartTypeAreaTitle: String = definedExternally
        var chartTypeColumnTitle: String = definedExternally
        var chartTypeBarTitle: String = definedExternally
        var chartTypeLineTitle: String = definedExternally
        var chartTypeRadarTitle: String = definedExternally
        var chartTypePieTitle: String = definedExternally
        var chartTypeDoughnutTitle: String = definedExternally
        var chartTypeScatterTitle: String = definedExternally
        var chartTypeBubbleTitle: String = definedExternally
        var chartTypeHistogramTitle: String = definedExternally
    }
}
external open class PresetCriteriaItem : SelectItem {

    //    override var valueMap: Any = definedExternally
    open var options: Any = definedExternally
    open var showCustomOption: Boolean = definedExternally
    open var customOptionTitle: String = definedExternally
//    override var shouldSaveValue: Boolean = definedExternally
    open fun getCustomCriteria(callback: Any?): Unit = definedExternally
//    open fun getCriterion(): dynamic /* AdvancedCriteria | Criterion */ = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): PresetCriteriaItem = definedExternally
    }
}
external open class ToolStripSeparatorEditProxy : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ToolStripSeparatorEditProxy = definedExternally
    }
}
external open class LabelEditProxy : StatefulCanvasEditProxy {
//    override fun getInlineEditText(): Unit = definedExternally
//    override fun setInlineEditText(newValue: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): LabelEditProxy = definedExternally
    }
}
external open class Canvas : BaseWidget {
    open var canvasItem: CanvasItem = definedExternally
    open var animateTime: Number = definedExternally
    open var animateAcceleration: dynamic /* String /* "none" */ | String /* "smoothStart" */ | String /* "smoothEnd" */ | String /* "smoothStartEnd" */ */ = definedExternally
    open var animateShowEffect: dynamic /* String /* "slide" */ | String /* "wipe" */ | String /* "fade" */ | String /* "fly" */ | AnimateShowEffect */ = definedExternally
    open var animateHideEffect: dynamic /* String /* "slide" */ | String /* "wipe" */ | String /* "fade" */ | String /* "fly" */ | AnimateShowEffect */ = definedExternally
    open var animateMoveTime: Number = definedExternally
    open var animateResizeTime: Number = definedExternally
    open var animateRectTime: Number = definedExternally
    open var animateFadeTime: Number = definedExternally
    open var animateScrollTime: Number = definedExternally
    open var animateShowTime: Number = definedExternally
    open var animateHideTime: Number = definedExternally
    open var animateMoveAcceleration: dynamic /* String /* "none" */ | String /* "smoothStart" */ | String /* "smoothEnd" */ | String /* "smoothStartEnd" */ */ = definedExternally
    open var animateResizeAcceleration: dynamic /* String /* "none" */ | String /* "smoothStart" */ | String /* "smoothEnd" */ | String /* "smoothStartEnd" */ */ = definedExternally
    open var animateRectAcceleration: dynamic /* String /* "none" */ | String /* "smoothStart" */ | String /* "smoothEnd" */ | String /* "smoothStartEnd" */ */ = definedExternally
    open var animateScrollAcceleration: dynamic /* String /* "none" */ | String /* "smoothStart" */ | String /* "smoothEnd" */ | String /* "smoothStartEnd" */ */ = definedExternally
    open var animateShowAcceleration: dynamic /* String /* "none" */ | String /* "smoothStart" */ | String /* "smoothEnd" */ | String /* "smoothStartEnd" */ */ = definedExternally
    open var animateHideAcceleration: dynamic /* String /* "none" */ | String /* "smoothStart" */ | String /* "smoothEnd" */ | String /* "smoothStartEnd" */ */ = definedExternally
    open var layoutAlign: dynamic /* String /* "left" */ | String /* "top" */ | String /* "right" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
    open var showResizeBar: Boolean = definedExternally
    open var resizeBarTarget: String = definedExternally
    open var extraSpace: Number = definedExternally
    open var useOpacityFilter: Boolean = definedExternally
    open var ID: String = definedExternally
    open var autoDraw: Boolean = definedExternally
    open var parentElement: Canvas = definedExternally
    open var parentCanvas: Canvas = definedExternally
    open var topElement: Canvas = definedExternally
    open var masterElement: Canvas = definedExternally
    open var children: Array<Any?> = definedExternally
    open var peers: Array<Any?> = definedExternally
    open var autoParent: String = definedExternally
    open var htmlElement: DOMElement = definedExternally
    open var htmlPosition: dynamic /* String /* "replace" */ | String /* "beforeBegin" */ | String /* "afterBegin" */ | String /* "beforeEnd" */ | String /* "afterEnd" */ */ = definedExternally
    open var matchElement: Boolean = definedExternally
    open var position: dynamic /* String /* "absolute" */ | String /* "relative" */ */ = definedExternally
    open var left: dynamic /* String | Number */ = definedExternally
    open var top: dynamic /* String | Number */ = definedExternally
    open var leavePageSpace: Number = definedExternally
    open var width: dynamic /* String | Number */ = definedExternally
    open var height: dynamic /* String | Number */ = definedExternally
    open var defaultWidth: Number = definedExternally
    open var defaultHeight: Number = definedExternally
    open var minWidth: Number = definedExternally
    open var minHeight: Number = definedExternally
    open var maxWidth: Number = definedExternally
    open var maxHeight: Number = definedExternally
    open var dragMinWidth: Number = definedExternally
    open var dragMinHeight: Number = definedExternally
    open var dragMaxWidth: Number = definedExternally
    open var dragMaxHeight: Number = definedExternally
    open var shrinkElementOnHide: Boolean = definedExternally
    open var autoShowParent: Boolean = definedExternally
    open var visibility: dynamic /* String /* "visible" */ | String /* "hidden" */ | String /* "inherit" */ */ = definedExternally
    open var hideUsingDisplayNone: Boolean = definedExternally
    open var canSelectText: Boolean = definedExternally
    open var className: String = definedExternally
    open var styleName: String = definedExternally
    open var contents: String = definedExternally
    open var dynamicContents: Boolean = definedExternally
    open var dynamicContentsVars: Any? = definedExternally
    open var margin: Number = definedExternally
    open var padding: Number = definedExternally
    open var border: String = definedExternally
    open var backgroundColor: String = definedExternally
    open var backgroundImage: String = definedExternally
    open var backgroundRepeat: dynamic /* String /* "repeat" */ | String /* "no-repeat" */ | String /* "repeat-x" */ | String /* "repeat-y" */ */ = definedExternally
    open var backgroundPosition: String = definedExternally
    open var appImgDir: String = definedExternally
    open var skinImgDir: String = definedExternally
    open var cursor: dynamic /* String /* "text" */ | String /* "auto" */ | String /* "move" */ | String /* "default" */ | String /* "wait" */ | String /* "hand" */ | String /* "help" */ | String /* "pointer" */ | String /* "arrow" */ | String /* "all-scroll" */ | String /* "crosshair" */ | String /* "col-resize" */ | String /* "row-resize" */ | String /* "e-resize" */ | String /* "w-resize" */ | String /* "n-resize" */ | String /* "s-resize" */ | String /* "se-resize" */ | String /* "ne-resize" */ | String /* "nw-resize" */ | String /* "sw-resize" */ | String /* "not-allowed" */ */ = definedExternally
    open var disabledCursor: dynamic /* String /* "text" */ | String /* "auto" */ | String /* "move" */ | String /* "default" */ | String /* "wait" */ | String /* "hand" */ | String /* "help" */ | String /* "pointer" */ | String /* "arrow" */ | String /* "all-scroll" */ | String /* "crosshair" */ | String /* "col-resize" */ | String /* "row-resize" */ | String /* "e-resize" */ | String /* "w-resize" */ | String /* "n-resize" */ | String /* "s-resize" */ | String /* "se-resize" */ | String /* "ne-resize" */ | String /* "nw-resize" */ | String /* "sw-resize" */ | String /* "not-allowed" */ */ = definedExternally
    open var noDropCursor: dynamic /* String /* "text" */ | String /* "auto" */ | String /* "move" */ | String /* "default" */ | String /* "wait" */ | String /* "hand" */ | String /* "help" */ | String /* "pointer" */ | String /* "arrow" */ | String /* "all-scroll" */ | String /* "crosshair" */ | String /* "col-resize" */ | String /* "row-resize" */ | String /* "e-resize" */ | String /* "w-resize" */ | String /* "n-resize" */ | String /* "s-resize" */ | String /* "se-resize" */ | String /* "ne-resize" */ | String /* "nw-resize" */ | String /* "sw-resize" */ | String /* "not-allowed" */ */ = definedExternally
    open var opacity: Number = definedExternally
    open var overflow: dynamic /* String /* "auto" */ | String /* "visible" */ | String /* "hidden" */ | String /* "scroll" */ | String /* "clip-h" */ | String /* "clip-v" */ */ = definedExternally
    open var canAdaptWidth: Boolean = definedExternally
    open var canAdaptHeight: Boolean = definedExternally
    open var adaptiveWidthPriority: Number = definedExternally
    open var adaptiveHeightPriority: Number = definedExternally
    open var showCustomScrollbars: Boolean = definedExternally
    open var receiveScrollbarEvents: Boolean = definedExternally
    open var alwaysShowScrollbars: Boolean = definedExternally
    open var useTouchScrolling: Boolean = definedExternally
    open var disableTouchScrollingForDrag: Boolean = definedExternally
    open var scrollbarSize: Number = definedExternally
    open var scrollbarConstructor: String = definedExternally
    open var disabled: Boolean = definedExternally
    open var enabled: Boolean = definedExternally
    open var visibleWhen: AdvancedCriteria = definedExternally
    open var enableWhen: AdvancedCriteria = definedExternally
    open var redrawOnResize: Boolean = definedExternally
    open var canFocus: Boolean = definedExternally
    open var tabIndex: Number = definedExternally
    open var accessKey: String = definedExternally
    open var contextMenu: Menu = definedExternally
    open var menuConstructor: String = definedExternally
    open var prompt: String = definedExternally
    open var useNativeDrag: Boolean = definedExternally
    open var canDrag: Boolean = definedExternally
    open var dragStartDistance: Number = definedExternally
    open var canDragScroll: Boolean = definedExternally
    open var dragScrollDelay: Number = definedExternally
    open var dragIntersectStyle: dynamic /* String /* "mouse" */ | String /* "rect" */ */ = definedExternally
    open var canDragReposition: Boolean = definedExternally
    open var dragRepositionCursor: dynamic /* String /* "text" */ | String /* "auto" */ | String /* "move" */ | String /* "default" */ | String /* "wait" */ | String /* "hand" */ | String /* "help" */ | String /* "pointer" */ | String /* "arrow" */ | String /* "all-scroll" */ | String /* "crosshair" */ | String /* "col-resize" */ | String /* "row-resize" */ | String /* "e-resize" */ | String /* "w-resize" */ | String /* "n-resize" */ | String /* "s-resize" */ | String /* "se-resize" */ | String /* "ne-resize" */ | String /* "nw-resize" */ | String /* "sw-resize" */ | String /* "not-allowed" */ */ = definedExternally
    open var canDragResize: Boolean = definedExternally
    open var proportionalResizing: dynamic /* String /* "none" */ | String /* "modifier" */ | String /* "always" */ | String /* "modifierOff" */ */ = definedExternally
    open var proportionalResizeModifiers: Array<String> = definedExternally
    open var resizeFrom: Array<dynamic /* String /* "TL" */ | String /* "TR" */ | String /* "BL" */ | String /* "BR" */ | String /* "T" */ | String /* "B" */ | String /* "R" */ | String /* "L" */ | String /* "C" */ */> = definedExternally
    open var useDragMask: Boolean = definedExternally
    open var dragMaskType: dynamic /* String /* "none" */ | String /* "div" */ | String /* "iframe" */ | String /* "hide" */ */ = definedExternally
    open var canHover: Boolean = definedExternally
    open var hoverDelay: Number = definedExternally
    open var showHover: Boolean = definedExternally
    open var hoverWidth: Number = definedExternally
    open var hoverAutoFitWidth: Boolean = definedExternally
    open var hoverAutoFitMaxWidth: dynamic /* String | Number */ = definedExternally
    open var hoverHeight: Number = definedExternally
    open var hoverAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var hoverVAlign: dynamic /* String /* "top" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
    open var hoverWrap: Boolean = definedExternally
    open var hoverStyle: String = definedExternally
    open var hoverOpacity: Number = definedExternally
    open var hoverMoveWithMouse: Boolean = definedExternally
    open var hoverAutoDestroy: Boolean = definedExternally
    open var edgeMarginSize: Number = definedExternally
    open var minNonEdgeSize: Number = definedExternally
    open var edgeCursorMap: Any = definedExternally
    open var keepInParentRect: dynamic /* Boolean | Array<Number> */ = definedExternally
    open var dragAppearance: dynamic /* String /* "none" */ | String /* "tracker" */ | String /* "target" */ | String /* "outline" */ */ = definedExternally
    open var dragResizeAppearance: dynamic /* String /* "none" */ | String /* "tracker" */ | String /* "target" */ | String /* "outline" */ */ = definedExternally
    open var dragRepositionAppearance: dynamic /* String /* "none" */ | String /* "tracker" */ | String /* "target" */ | String /* "outline" */ */ = definedExternally
    open var dragType: String = definedExternally
    open var dropTypes: dynamic /* String | Array<String> */ = definedExternally
    open var dragTarget: dynamic /* String | Canvas */ = definedExternally
    open var showDragShadow: Boolean = definedExternally
    open var dragOpacity: Number = definedExternally
    open var canDrop: Boolean = definedExternally
    open var canAcceptDrop: Boolean = definedExternally
    open var canDropBefore: Boolean = definedExternally
    open var mouseStillDownInitialDelay: Number = definedExternally
    open var mouseStillDownDelay: Number = definedExternally
    open var doubleClickDelay: Number = definedExternally
    open var noDoubleClicks: Boolean = definedExternally
    open var useBackMask: Boolean = definedExternally
    open var percentSource: Canvas = definedExternally
    open var percentBox: dynamic /* String /* "visible" */ | String /* "viewport" */ */ = definedExternally
    open var snapTo: String = definedExternally
    open var snapEdge: String = definedExternally
    open var snapOffsetLeft: Number = definedExternally
    open var snapOffsetTop: Number = definedExternally
    open var snapToGrid: Boolean = definedExternally
    open var snapResizeToGrid: Boolean = definedExternally
    open var childrenSnapToGrid: Boolean = definedExternally
    open var childrenSnapResizeToGrid: Boolean = definedExternally
    open var snapHGap: Number = definedExternally
    open var snapVGap: Number = definedExternally
    open var snapHDirection: String = definedExternally
    open var snapVDirection: String = definedExternally
    open var snapAxis: String = definedExternally
    open var snapOnDrop: Boolean = definedExternally
    open var printChildrenAbsolutelyPositioned: Boolean = definedExternally
    open var isPrinting: Boolean = definedExternally
    open var shouldPrint: Boolean = definedExternally
    open var sizeMayChangeOnRedraw: Boolean = definedExternally
    open var destroyed: Boolean = definedExternally
    open var destroying: Boolean = definedExternally
    open var componentMask: Canvas = definedExternally
    open var componentMaskDefaults: Canvas = definedExternally
    open var momentumScrollMinSpeed: Number = definedExternally
    open var updateTabPositionOnDraw: Boolean = definedExternally
    open var updateTabPositionOnReparent: Boolean = definedExternally
    open var showHoverComponents: Boolean = definedExternally
    open var showSnapGrid: Boolean = definedExternally
    open var childrenSnapAlign: Boolean = definedExternally
    open var childrenResizeSnapAlign: Boolean = definedExternally
    open var childrenSnapCenterAlign: Boolean = definedExternally
    open var childrenSnapEdgeAlign: Boolean = definedExternally
    open var snapToAlign: Boolean = definedExternally
    open var snapResizeToAlign: Boolean = definedExternally
    open var snapToCenterAlign: Boolean = definedExternally
    open var snapToEdgeAlign: Boolean = definedExternally
    open var isSnapAlignCandidate: Boolean = definedExternally
    open var snapAlignCandidates: Array<Any?> = definedExternally
    open var snapAlignCenterLineStyle: String = definedExternally
    open var snapAlignEdgeLineStyle: String = definedExternally
    open var showEdges: Boolean = definedExternally
    open var edgeSize: Number = definedExternally
    open var edgeOffset: Number = definedExternally
    open var edgeImage: String = definedExternally
    open var customEdges: Array<String> = definedExternally
    open var edgeBackgroundColor: String = definedExternally
    open var edgeOpacity: Number = definedExternally
    open var edgeShowCenter: Boolean = definedExternally
    open var edgeCenterBackgroundColor: String = definedExternally
    open var showShadow: Boolean = definedExternally
    open var shadowDepth: Number = definedExternally
    open var shadowOffset: Number = definedExternally
    open var shadowHOffset: Number = definedExternally
    open var shadowVOffset: Number = definedExternally
    open var shadowSoftness: Number = definedExternally
    open var shadowImage: String = definedExternally
    open var useCSSShadow: Boolean = definedExternally
    open var shadowColor: String = definedExternally
    open var shadowSpread: Number = definedExternally
    open var isGroup: Boolean = definedExternally
    open var groupBorderCSS: String = definedExternally
    open var groupLabelStyleName: String = definedExternally
    open var groupLabelBackgroundColor: String = definedExternally
    open var groupTitle: String = definedExternally
//    override var ruleScope: String = definedExternally
    open var isRuleScope: Boolean = definedExternally
    open var valuesManager: dynamic /* String | ValuesManager */ = definedExternally
    open var dataPath: String = definedExternally
    open var locateChildrenBy: dynamic /* String /* "name" */ | String /* "title" */ | String /* "index" */ */ = definedExternally
    open var locateChildrenType: dynamic /* String /* "none" */ | String /* "Class" */ | String /* "scClass" */ | String /* "role" */ */ = definedExternally
    open var locatePeersBy: dynamic /* String /* "name" */ | String /* "title" */ | String /* "index" */ */ = definedExternally
    open var locatePeersType: dynamic /* String /* "none" */ | String /* "Class" */ | String /* "scClass" */ | String /* "role" */ */ = definedExternally
    open var autoMaskComponents: Boolean = definedExternally
    open var editProxy: EditProxy = definedExternally
    open var editProxyConstructor: String = definedExternally
    open var editNode: EditNode = definedExternally
    open var ariaRole: String = definedExternally
    open var ariaState: Any = definedExternally
    open fun animateMove(left: Number, top: Number, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: String? /* "none" */ = definedExternally /* null */): Unit = definedExternally
    open fun animateMove(left: Number, top: Number, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: String? /* "smoothStart" */ = definedExternally /* null */): Unit = definedExternally
    open fun animateMove(left: Number, top: Number, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: String? /* "smoothEnd" */ = definedExternally /* null */): Unit = definedExternally
    open fun animateMove(left: Number, top: Number, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: String? /* "smoothStartEnd" */ = definedExternally /* null */): Unit = definedExternally
    open fun animateResize(width: Number, height: Number, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: String? /* "none" */ = definedExternally /* null */): Unit = definedExternally
    open fun animateResize(width: Number, height: Number, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: String? /* "smoothStart" */ = definedExternally /* null */): Unit = definedExternally
    open fun animateResize(width: Number, height: Number, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: String? /* "smoothEnd" */ = definedExternally /* null */): Unit = definedExternally
    open fun animateResize(width: Number, height: Number, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: String? /* "smoothStartEnd" */ = definedExternally /* null */): Unit = definedExternally
    open fun animateRect(left: Number, top: Number, width: Number, height: Number, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: String? /* "none" */ = definedExternally /* null */): Unit = definedExternally
    open fun animateRect(left: Number, top: Number, width: Number, height: Number, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: String? /* "smoothStart" */ = definedExternally /* null */): Unit = definedExternally
    open fun animateRect(left: Number, top: Number, width: Number, height: Number, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: String? /* "smoothEnd" */ = definedExternally /* null */): Unit = definedExternally
    open fun animateRect(left: Number, top: Number, width: Number, height: Number, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: String? /* "smoothStartEnd" */ = definedExternally /* null */): Unit = definedExternally
    open fun animateFade(opacity: Number, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: String? /* "none" */ = definedExternally /* null */): Unit = definedExternally
    open fun animateFade(opacity: Number, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: String? /* "smoothStart" */ = definedExternally /* null */): Unit = definedExternally
    open fun animateFade(opacity: Number, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: String? /* "smoothEnd" */ = definedExternally /* null */): Unit = definedExternally
    open fun animateFade(opacity: Number, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: String? /* "smoothStartEnd" */ = definedExternally /* null */): Unit = definedExternally
    open fun animateScroll(scrollLeft: Number, scrollTop: Number, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: String? /* "none" */ = definedExternally /* null */): Unit = definedExternally
    open fun animateScroll(scrollLeft: Number, scrollTop: Number, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: String? /* "smoothStart" */ = definedExternally /* null */): Unit = definedExternally
    open fun animateScroll(scrollLeft: Number, scrollTop: Number, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: String? /* "smoothEnd" */ = definedExternally /* null */): Unit = definedExternally
    open fun animateScroll(scrollLeft: Number, scrollTop: Number, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: String? /* "smoothStartEnd" */ = definedExternally /* null */): Unit = definedExternally
    open fun animateShow(effect: String? /* "slide" */ = definedExternally /* null */, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: dynamic /* String? /* "none" */ | String? /* "smoothStart" */ | String? /* "smoothEnd" */ | String? /* "smoothStartEnd" */ */ = definedExternally /* null */): Unit = definedExternally
    open fun animateShow(effect: String? /* "wipe" */ = definedExternally /* null */, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: dynamic /* String? /* "none" */ | String? /* "smoothStart" */ | String? /* "smoothEnd" */ | String? /* "smoothStartEnd" */ */ = definedExternally /* null */): Unit = definedExternally
    open fun animateShow(effect: String? /* "fade" */ = definedExternally /* null */, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: dynamic /* String? /* "none" */ | String? /* "smoothStart" */ | String? /* "smoothEnd" */ | String? /* "smoothStartEnd" */ */ = definedExternally /* null */): Unit = definedExternally
    open fun animateShow(effect: String? /* "fly" */ = definedExternally /* null */, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: dynamic /* String? /* "none" */ | String? /* "smoothStart" */ | String? /* "smoothEnd" */ | String? /* "smoothStartEnd" */ */ = definedExternally /* null */): Unit = definedExternally
    open fun animateShow(effect: AnimateShowEffect? = definedExternally /* null */, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: dynamic /* String? /* "none" */ | String? /* "smoothStart" */ | String? /* "smoothEnd" */ | String? /* "smoothStartEnd" */ */ = definedExternally /* null */): Unit = definedExternally
    open fun animateHide(effect: String? /* "slide" */ = definedExternally /* null */, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: dynamic /* String? /* "none" */ | String? /* "smoothStart" */ | String? /* "smoothEnd" */ | String? /* "smoothStartEnd" */ */ = definedExternally /* null */): Unit = definedExternally
    open fun animateHide(effect: String? /* "wipe" */ = definedExternally /* null */, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: dynamic /* String? /* "none" */ | String? /* "smoothStart" */ | String? /* "smoothEnd" */ | String? /* "smoothStartEnd" */ */ = definedExternally /* null */): Unit = definedExternally
    open fun animateHide(effect: String? /* "fade" */ = definedExternally /* null */, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: dynamic /* String? /* "none" */ | String? /* "smoothStart" */ | String? /* "smoothEnd" */ | String? /* "smoothStartEnd" */ */ = definedExternally /* null */): Unit = definedExternally
    open fun animateHide(effect: String? /* "fly" */ = definedExternally /* null */, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: dynamic /* String? /* "none" */ | String? /* "smoothStart" */ | String? /* "smoothEnd" */ | String? /* "smoothStartEnd" */ */ = definedExternally /* null */): Unit = definedExternally
    open fun animateHide(effect: AnimateShowEffect? = definedExternally /* null */, callback: ((earlyFinish: Boolean) -> Unit)? = definedExternally /* null */, duration: Number? = definedExternally /* null */, acceleration: dynamic /* String? /* "none" */ | String? /* "smoothStart" */ | String? /* "smoothEnd" */ | String? /* "smoothStartEnd" */ */ = definedExternally /* null */): Unit = definedExternally
    open fun setShowResizeBar(show: Boolean): Unit = definedExternally
    open fun adaptWidthBy(pixelDifference: Number, unadaptedWidth: Number): Number = definedExternally
    open fun adaptHeightBy(pixelDifference: Number, unadaptedHeight: Number): Number = definedExternally
//    override fun init(vararg args: Any): Unit = definedExternally
    open fun initWidget(vararg args: Any): Unit = definedExternally
    open fun getByLocalId(localId: String): Canvas = definedExternally
    open fun getLocalId(): String = definedExternally
    open fun isDrawn(): Boolean = definedExternally
//    override fun getID(): String = definedExternally
    open fun getInnerHTML(): String = definedExternally
    open fun setSnapOffsetLeft(snapOffsetLeft: Number): Unit = definedExternally
    open fun setSnapOffsetTop(snapOffsetTop: Number): Unit = definedExternally
    open fun draw(): Canvas = definedExternally
    open fun getPrintHTML(printProperties: PrintProperties? = definedExternally /* null */, callback: Any? = definedExternally /* null */): String = definedExternally
    open fun setHtmlElement(element: DOMElement): Unit = definedExternally
    open fun setHtmlPosition(element: String /* "replace" */): Unit = definedExternally
    open fun setHtmlPosition(element: String /* "beforeBegin" */): Unit = definedExternally
    open fun setHtmlPosition(element: String /* "afterBegin" */): Unit = definedExternally
    open fun setHtmlPosition(element: String /* "beforeEnd" */): Unit = definedExternally
    open fun setHtmlPosition(element: String /* "afterEnd" */): Unit = definedExternally
    open fun isDirty(): Boolean = definedExternally
    open fun markForRedraw(reason: String? = definedExternally /* null */): Unit = definedExternally
    open fun redraw(reason: String? = definedExternally /* null */): Unit = definedExternally
    open fun clear(): Unit = definedExternally
//    override fun destroy(): Unit = definedExternally
    open fun markForDestroy(): Unit = definedExternally
    open fun getOuterElement(): DOMElement = definedExternally
    open fun getContentElement(): DOMElement = definedExternally
    open fun addChild(newChild: Canvas, name: String? = definedExternally /* null */, autoDraw: Boolean? = definedExternally /* null */): Canvas = definedExternally
    open fun removePeer(peer: Canvas, name: String? = definedExternally /* null */): Unit = definedExternally
    open fun depeer(): Unit = definedExternally
    open fun deparent(): Unit = definedExternally
    open fun removeChild(child: Canvas, name: String? = definedExternally /* null */): Unit = definedExternally
    open fun addPeer(newPeer: Canvas, name: String? = definedExternally /* null */, autoDraw: Boolean? = definedExternally /* null */, preDraw: Boolean? = definedExternally /* null */): Canvas = definedExternally
    open fun setSnapTo(snapTo: String): Unit = definedExternally
    open fun getSnapTo(): String = definedExternally
    open fun setSnapEdge(snapEdge: String): Unit = definedExternally
    open fun getSnapEdge(): String = definedExternally
    open fun getParentCanvas(): Canvas = definedExternally
    open fun getMasterCanvas(): Canvas = definedExternally
    open fun getParentElements(): Array<Any?> = definedExternally
    open fun contains(canvas: Canvas, testSelf: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun showClickMask(clickAction: Any?, mode: String /* "hard" */, unmaskedTargets: Any): String = definedExternally
    open fun showClickMask(clickAction: Any?, mode: String /* "hard" */, unmaskedTargets: Array<Any?>): String = definedExternally
    open fun showClickMask(clickAction: Any?, mode: String /* "soft" */, unmaskedTargets: Any): String = definedExternally
    open fun showClickMask(clickAction: Any?, mode: String /* "soft" */, unmaskedTargets: Array<Any?>): String = definedExternally
    open fun hideClickMask(ID: String? = definedExternally /* null */): Unit = definedExternally
    open fun clickMaskUp(ID: String? = definedExternally /* null */): Boolean = definedExternally
    open fun showComponentMask(unmaskedChildren: Array<Any?>? = definedExternally /* null */): Unit = definedExternally
    open fun hideComponentMask(suppressFocusReset: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun setRect(left: Number? = definedExternally /* null */, top: Number? = definedExternally /* null */, width: Number? = definedExternally /* null */, height: Number? = definedExternally /* null */): Boolean = definedExternally
    open fun setRect(left: Any? = definedExternally /* null */, top: Number? = definedExternally /* null */, width: Number? = definedExternally /* null */, height: Number? = definedExternally /* null */): Boolean = definedExternally
    open fun setRect(left: Array<Any>? = definedExternally /* null */, top: Number? = definedExternally /* null */, width: Number? = definedExternally /* null */, height: Number? = definedExternally /* null */): Boolean = definedExternally
    open fun getLeft(): Number = definedExternally
    open fun setLeft(left: String): Unit = definedExternally
    open fun setLeft(left: Number): Unit = definedExternally
    open fun getTop(): Number = definedExternally
    open fun setTop(top: String): Unit = definedExternally
    open fun setTop(top: Number): Unit = definedExternally
    open fun setLeavePageSpace(newPageSpace: Number): Unit = definedExternally
    open fun getWidth(): Number = definedExternally
    open fun setWidth(width: String): Unit = definedExternally
    open fun setWidth(width: Number): Unit = definedExternally
    open fun getHeight(): Number = definedExternally
    open fun setHeight(height: String): Unit = definedExternally
    open fun setHeight(height: Number): Unit = definedExternally
    open fun setMinWidth(width: Number): Unit = definedExternally
    open fun setMinHeight(height: Number): Unit = definedExternally
    open fun getRight(): Number = definedExternally
    open fun setRight(right: Number): Unit = definedExternally
    open fun getBottom(): Number = definedExternally
    open fun setBottom(bottom: Number): Unit = definedExternally
    open fun getScrollWidth(): Number = definedExternally
    open fun getScrollHeight(): Number = definedExternally
    open fun getScrollLeft(): Number = definedExternally
    open fun getScrollTop(): Number = definedExternally
    open fun setPageLeft(left: Number): Unit = definedExternally
    open fun setPageTop(top: Number): Unit = definedExternally
    open fun getPageLeft(): Number = definedExternally
    open fun getPageTop(): Number = definedExternally
    open fun getPageRight(): Number = definedExternally
    open fun getPageBottom(): Number = definedExternally
    open fun setMargin(margin: Number): Unit = definedExternally
    open fun setPadding(newPadding: Number): Unit = definedExternally
    open fun containsPoint(x: Number, y: Number, withinViewport: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun visibleAtPoint(x: Number, y: Number, withinViewport: Boolean? = definedExternally /* null */, ignoreWidgets: Canvas? = definedExternally /* null */, upToParent: Canvas? = definedExternally /* null */): Boolean = definedExternally
    open fun intersects(other: Canvas): Boolean = definedExternally
    open fun intersectsRect(left: Number, top: Number, width: Number, height: Number): Boolean = definedExternally
    open fun intersectsRect(left: Array<Any>, top: Number, width: Number, height: Number): Boolean = definedExternally
    open fun encloses(other: Canvas): Boolean = definedExternally
    open fun enclosesRect(left: Number, top: Number, width: Number, height: Number): Boolean = definedExternally
    open fun enclosesRect(left: Array<Number>, top: Number, width: Number, height: Number): Boolean = definedExternally
    open fun containsEvent(): Boolean = definedExternally
    open fun getOffsetX(): Number = definedExternally
    open fun getOffsetY(): Number = definedExternally
    open fun getScrollbarSize(): Number = definedExternally
    open fun getViewportWidth(): Number = definedExternally
    open fun getViewportHeight(): Number = definedExternally
    open fun getInnerHeight(): Number = definedExternally
    open fun getInnerWidth(): Number = definedExternally
    open fun getInnerContentHeight(): Number = definedExternally
    open fun getInnerContentWidth(): Number = definedExternally
    open fun getVisibleWidth(): Number = definedExternally
    open fun getVisibleHeight(): Number = definedExternally
    open fun moveBy(deltaX: Number, deltaY: Number): Boolean = definedExternally
    open fun moveTo(left: Number? = definedExternally /* null */, top: Number? = definedExternally /* null */): Boolean = definedExternally
    open fun moveTo(left: Any? = definedExternally /* null */, top: Number? = definedExternally /* null */): Boolean = definedExternally
    open fun getVSnapOrigin(snapChild: Canvas? = definedExternally /* null */): Number = definedExternally
    open fun getHSnapOrigin(snapChild: Canvas? = definedExternally /* null */): Number = definedExternally
    open fun showNextTo(otherWidget: Canvas, side: String? = definedExternally /* null */, canOcclude: Boolean? = definedExternally /* null */, skipAnimation: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun placeNear(left: Number? = definedExternally /* null */, top: Number? = definedExternally /* null */): Unit = definedExternally
    open fun resizeBy(deltaX: Number? = definedExternally /* null */, deltaY: Number? = definedExternally /* null */): Boolean = definedExternally
    open fun resized(): Unit = definedExternally
    open fun setPercentSource(sourceWidget: Canvas? = definedExternally /* null */): Unit = definedExternally
    open fun layoutChildren(reason: String): Unit = definedExternally
    open fun resizeTo(width: Number? = definedExternally /* null */, height: Number? = definedExternally /* null */): Boolean = definedExternally
    open fun parentResized(): Unit = definedExternally
    open fun setDragTracker(): Boolean = definedExternally
    open fun shouldDragScroll(): Unit = definedExternally
    open fun setOverflow(newOverflow: String /* "auto" */): Unit = definedExternally
    open fun setOverflow(newOverflow: String /* "visible" */): Unit = definedExternally
    open fun setOverflow(newOverflow: String /* "hidden" */): Unit = definedExternally
    open fun setOverflow(newOverflow: String /* "scroll" */): Unit = definedExternally
    open fun setOverflow(newOverflow: String /* "clip-h" */): Unit = definedExternally
    open fun setOverflow(newOverflow: String /* "clip-v" */): Unit = definedExternally
    open fun adjustForContent(immediate: Boolean): Unit = definedExternally
    open fun getScrollBottom(): Number = definedExternally
    open fun getScrollRight(): Number = definedExternally
    open fun scrollToTop(): Unit = definedExternally
    open fun scrollToBottom(): Unit = definedExternally
    open fun scrollToLeft(): Unit = definedExternally
    open fun scrollToRight(): Unit = definedExternally
    open fun scrollBy(dX: Number, dY: Number): Unit = definedExternally
    open fun scrollByPercent(dX: String, dY: String): Unit = definedExternally
    open fun scrollByPercent(dX: String, dY: Number): Unit = definedExternally
    open fun scrollByPercent(dX: Number, dY: String): Unit = definedExternally
    open fun scrollByPercent(dX: Number, dY: Number): Unit = definedExternally
    open fun scrollTo(left: Number? = definedExternally /* null */, top: Number? = definedExternally /* null */): Unit = definedExternally
    open fun scrollToPercent(left: String, top: String): Unit = definedExternally
    open fun scrollToPercent(left: String, top: Number): Unit = definedExternally
    open fun scrollToPercent(left: Number, top: String): Unit = definedExternally
    open fun scrollToPercent(left: Number, top: Number): Unit = definedExternally
    open fun pageScrollUp(): Unit = definedExternally
    open fun pageScrollDown(): Unit = definedExternally
    open fun show(): Unit = definedExternally
    open fun showRecursively(): Unit = definedExternally
    open fun getPanelContainer(): Canvas = definedExternally
    open fun setPanelContainer(container: Canvas): Unit = definedExternally
    open fun revealChild(child: String): Unit = definedExternally
    open fun revealChild(child: Canvas): Unit = definedExternally
    open fun hide(): Unit = definedExternally
    open fun isVisible(): Boolean = definedExternally
    open fun setEnabled(newState: Boolean): Unit = definedExternally
    open fun setDisabled(disabled: Boolean): Unit = definedExternally
    open fun enable(): Unit = definedExternally
    open fun disable(): Unit = definedExternally
    open fun isDisabled(): Boolean = definedExternally
    open fun isEnabled(): Boolean = definedExternally
    open fun setCanFocus(canFocus: Boolean): Unit = definedExternally
    open fun isFocused(): Boolean = definedExternally
    open fun focus(): Unit = definedExternally
    open fun blur(): Unit = definedExternally
    open fun containsFocus(): Boolean = definedExternally
    open fun setAccessKey(accessKey: String): Unit = definedExternally
    open fun clearExplicitTabIndex(): Unit = definedExternally
    open fun updateTabPositionForDraw(): Unit = definedExternally
    open fun updateChildTabPositions(): Unit = definedExternally
    open fun updateChildTabPosition(child: Canvas): Unit = definedExternally
    open fun getChildTabPosition(child: Canvas): Number = definedExternally
    open fun setUpdateTabPositionOnReparent(updateOnReparent: Boolean): Unit = definedExternally
    open fun setRelativeTabPosition(position: Number): Unit = definedExternally
    open fun setTabIndex(tabIndex: Number): Unit = definedExternally
    open fun focusInNextTabElement(): Unit = definedExternally
    open fun focusAfterGroup(): Unit = definedExternally
    open fun focusInPreviousTabElement(): Unit = definedExternally
    open fun focusAtEnd(start: Boolean): Unit = definedExternally
    open fun getZIndex(resolveToNumber: Boolean): Number = definedExternally
    open fun bringToFront(): Unit = definedExternally
    open fun sendToBack(): Unit = definedExternally
    open fun moveAbove(canvas: Canvas): Unit = definedExternally
    open fun moveBelow(canvas: Canvas): Unit = definedExternally
    open fun getContents(): String = definedExternally
    open fun setContents(newContents: String? = definedExternally /* null */): Unit = definedExternally
    open fun setBackgroundColor(newColor: String): Unit = definedExternally
    open fun setBackgroundImage(newImage: String): Unit = definedExternally
    open fun setBorder(newBorder: String): Unit = definedExternally
    open fun setOpacity(newOpacity: Number): Unit = definedExternally
    open fun setCursor(newCursor: dynamic /* String /* "text" */ | String /* "auto" */ | String /* "move" */ | String /* "default" */ | String /* "wait" */ | String /* "hand" */ | String /* "help" */ | String /* "pointer" */ | String /* "arrow" */ | String /* "all-scroll" */ | String /* "crosshair" */ | String /* "col-resize" */ | String /* "row-resize" */ | String /* "e-resize" */ | String /* "w-resize" */ | String /* "n-resize" */ | String /* "s-resize" */ | String /* "se-resize" */ | String /* "ne-resize" */ | String /* "nw-resize" */ | String /* "sw-resize" */ | String /* "not-allowed" */ */): Unit = definedExternally
    open fun getHoverComponent(): Canvas = definedExternally
    open fun handleHover(): Unit = definedExternally
    open fun updateHover(hoverHTML: String? = definedExternally /* null */): Unit = definedExternally
    open fun hoverHidden(): Unit = definedExternally
    open fun hover(): Boolean = definedExternally
    open fun getHoverHTML(): String = definedExternally
    open fun setClassName(newClass: String): Unit = definedExternally
    open fun setStyleName(newStyle: String): Unit = definedExternally
    open fun showContextMenu(): Boolean = definedExternally
    open fun hideContextMenu(): Unit = definedExternally
    open fun mouseOver(): Boolean = definedExternally
    open fun mouseDown(): Boolean = definedExternally
    open fun rightMouseDown(): Boolean = definedExternally
    open fun mouseStillDown(): Boolean = definedExternally
    open fun mouseMove(): Boolean = definedExternally
    open fun mouseOut(): Boolean = definedExternally
    open fun mouseUp(): Boolean = definedExternally
    open fun click(): Boolean = definedExternally
    open fun doubleClick(): Boolean = definedExternally
    open fun mouseWheel(): Boolean = definedExternally
    open fun dragRepositionStart(): Boolean = definedExternally
    open fun dragRepositionMove(): Boolean = definedExternally
    open fun dragRepositionStop(): Boolean = definedExternally
    open fun dragResizeStart(): Boolean = definedExternally
    open fun dragResizeMove(): Boolean = definedExternally
    open fun dragResizeStop(): Boolean = definedExternally
    open fun dragStart(): Boolean = definedExternally
    open fun dragMove(): Boolean = definedExternally
    open fun dragStop(): Boolean = definedExternally
    open fun dropOver(): Boolean = definedExternally
    open fun dropMove(): Boolean = definedExternally
    open fun dropOut(): Boolean = definedExternally
    open fun drop(): Boolean = definedExternally
    open fun keyDown(): Boolean = definedExternally
    open fun keyUp(): Boolean = definedExternally
    open fun keyPress(): Boolean = definedExternally
    open fun willAcceptDrop(): Boolean = definedExternally
    open fun getHSnapPosition(coordinate: Number, direction: String? = definedExternally /* null */): Number = definedExternally
    open fun getVSnapPosition(coordinate: Number, direction: String? = definedExternally /* null */): Number = definedExternally
    open fun shouldSnapOnDrop(dragTarget: Canvas): Boolean = definedExternally
    open fun setShowSnapGrid(show: Boolean): Unit = definedExternally
    open fun addSnapAlignCandidate(newCandidate: Canvas): Unit = definedExternally
    open fun removeSnapAlignCandidate(candidate: Canvas): Unit = definedExternally
    open fun getImgURL(URL: String, imgDir: String? = definedExternally /* null */): String = definedExternally
    open fun imgHTML(src: String, width: Number? = definedExternally /* null */, height: Number? = definedExternally /* null */, name: String? = definedExternally /* null */, extraStuff: String? = definedExternally /* null */, imgDir: String? = definedExternally /* null */): String = definedExternally
    open fun getImage(identifier: String): DOMElement = definedExternally
    open fun setImage(identifier: String, URL: String, imgDir: String? = definedExternally /* null */): Unit = definedExternally
    open fun linkHTML(href: String, text: String? = definedExternally /* null */, target: String? = definedExternally /* null */, ID: String? = definedExternally /* null */, tabIndex: Number? = definedExternally /* null */, accessKey: String? = definedExternally /* null */): String = definedExternally
    open fun setEdgeOpacity(newOpacity: Number): Unit = definedExternally
    open fun setShowShadow(showShadow: Boolean): Unit = definedExternally
    open fun setGroupLabelBackgroundColor(groupLabelBackgroundColor: String): Unit = definedExternally
    open fun setGroupTitle(newTitle: String): Unit = definedExternally
    open fun getRuleContext(databoundOnly: Boolean? = definedExternally /* null */): Any = definedExternally
    open fun ruleContextChanged(data: Any): Unit = definedExternally
    open fun provideRuleContext(path: String, data: Any, dbc: DataBoundComponent? = definedExternally /* null */): Unit = definedExternally
    open fun parentMoved(parent: Canvas, deltaX: Number, deltaY: Number): Unit = definedExternally
    open fun moved(deltaX: Number, deltaY: Number): Unit = definedExternally
    open fun focusChanged(hasFocus: Boolean): Unit = definedExternally
    open fun scrolled(): Unit = definedExternally
    open fun visibilityChanged(isVisible: Boolean): Unit = definedExternally
    open fun setValuesManager(dataPath: ValuesManager): Unit = definedExternally
    open fun setDataPath(dataPath: String): Unit = definedExternally
    open fun getFullDataPath(): String = definedExternally
    open fun updateEditNode(editContext: EditContext, editNode: EditNode): Unit = definedExternally
    open fun setEditMode(editingOn: Boolean, editContext: EditContext? = definedExternally /* null */, editNode: EditNode? = definedExternally /* null */): Unit = definedExternally
    open fun setAriaState(stateName: String, stateValue: String): Unit = definedExternally
    open fun setAriaState(stateName: String, stateValue: Number): Unit = definedExternally
    open fun setAriaState(stateName: String, stateValue: Boolean): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Canvas = definedExternally
        var AUTO: String = definedExternally
        var ABSOLUTE: String = definedExternally
        var RELATIVE: String = definedExternally
        var INHERIT: String = definedExternally
        var VISIBLE: String = definedExternally
        var HIDDEN: String = definedExternally
        var SCROLL: String = definedExternally
        var CLIP_H: String = definedExternally
        var CLIP_V: String = definedExternally
        var CENTER: String = definedExternally
        var LEFT: String = definedExternally
        var RIGHT: String = definedExternally
        var TOP: String = definedExternally
        var BOTTOM: String = definedExternally
        var UP: String = definedExternally
        var DOWN: String = definedExternally
        var DEFAULT: String = definedExternally
        var WAIT: String = definedExternally
        var HAND: String = definedExternally
        var POINTER: String = definedExternally
        var HELP: String = definedExternally
        var TEXT: String = definedExternally
        var TILE: String = definedExternally
        var STRETCH: String = definedExternally
        var NORMAL: String = definedExternally
        var REPEAT: String = definedExternally
        var NO_REPEAT: String = definedExternally
        var REPEAT_X: String = definedExternally
        var REPEAT_Y: String = definedExternally
        var TAB_INDEX_FLOOR: Number = definedExternally
        var neverUsePNGWorkaround: Boolean = definedExternally
        var neverUseFilters: Boolean = definedExternally
        var allowExternalFilters: Boolean = definedExternally
        var loadingImageSrc: String = definedExternally
        var loadingImageSize: Number = definedExternally
        var defaultPageSpace: Number = definedExternally
        var COPY: String = definedExternally
        var MOVE: String = definedExternally
        fun setNeverUseFilters(neverUseFilters: Boolean): Unit = definedExternally
        fun setAllowExternalFilters(allExternalFilters: Boolean): Unit = definedExternally
        fun setDefaultPageSpace(newDefaultPageSpace: Number): Unit = definedExternally
        fun getEventEdge(edgeMask: Array<dynamic /* String /* "TL" */ | String /* "TR" */ | String /* "BL" */ | String /* "BR" */ | String /* "T" */ | String /* "B" */ | String /* "R" */ | String /* "L" */ | String /* "C" */ */>? = definedExternally /* null */): dynamic /* String /* "TL" */ | String /* "TR" */ | String /* "BL" */ | String /* "BR" */ | String /* "T" */ | String /* "B" */ | String /* "R" */ | String /* "L" */ | String /* "C" */ */ = definedExternally
        fun getById(ID: String): Canvas = definedExternally
        fun resizeFonts(sizeChange: Number, styleSheets: String? = definedExternally /* null */, resizeRelatedControls: Boolean? = definedExternally /* null */): Unit = definedExternally
        fun resizeControls(delta: Number): Unit = definedExternally
        fun setAutoResizeIcons(autoResizeIcons: Boolean): Unit = definedExternally
        fun setAutoResizeAutoChildAttributes(autoResize: Boolean): Unit = definedExternally
        fun resizeIcons(policy: String, delta: Number): Unit = definedExternally
        fun registerIconSizingAttributes(policy: String, attributes: Any): Unit = definedExternally
        fun registerAutoChildSizingAttributes(policy: String, className: String, attributes: Any): Unit = definedExternally
        fun resizeAutoChildAttributes(policy: String, delta: Number): Unit = definedExternally
        fun setShowCustomScrollbars(showCustomScrollbars: Boolean): Unit = definedExternally
        fun getPrintHTML(components: Array<Any?>, printProperties: PrintProperties, callback: Any? = definedExternally /* null */, separator: String? = definedExternally /* null */): String = definedExternally
        fun imgHTML(src: String, width: Number? = definedExternally /* null */, height: Number? = definedExternally /* null */, name: String? = definedExternally /* null */, extraStuff: String? = definedExternally /* null */, imgDir: String? = definedExternally /* null */): String = definedExternally
        fun hiliteCharacter(string: String, character: String, hilitePrefix: String? = definedExternally /* null */, hiliteSuffix: String? = definedExternally /* null */): String = definedExternally
        fun getSnapPosition(target: Array<Number>, snapTo: String, snapper: Array<Number>, snapEdge: String? = definedExternally /* null */): Point = definedExternally
        fun getSnapPosition(target: Array<Number>, snapTo: String, snapper: Canvas, snapEdge: String? = definedExternally /* null */): Point = definedExternally
        fun getSnapPosition(target: Canvas, snapTo: String, snapper: Array<Number>, snapEdge: String? = definedExternally /* null */): Point = definedExternally
        fun getSnapPosition(target: Canvas, snapTo: String, snapper: Canvas, snapEdge: String? = definedExternally /* null */): Point = definedExternally
        fun printComponents(components: Array<Any?>, printProperties: PrintProperties? = definedExternally /* null */): Unit = definedExternally
        fun getPrintPreview(components: Array<Any?>, printProperties: PrintProperties? = definedExternally /* null */, previewProperties: Canvas? = definedExternally /* null */, callback: ((printPreview: PrintCanvas) -> Unit)? = definedExternally /* null */, separator: String? = definedExternally /* null */): Unit = definedExternally
        fun showPrintPreview(components: Array<Any?>, printProperties: PrintProperties? = definedExternally /* null */, printWindowProperties: PrintWindow? = definedExternally /* null */, callback: Any? = definedExternally /* null */, separator: String? = definedExternally /* null */): Unit = definedExternally
    }
    open fun animateMove(left: Number, top: Number): Unit = definedExternally
    open fun animateResize(width: Number, height: Number): Unit = definedExternally
    open fun animateRect(left: Number, top: Number, width: Number, height: Number): Unit = definedExternally
    open fun animateFade(opacity: Number): Unit = definedExternally
    open fun animateScroll(scrollLeft: Number, scrollTop: Number): Unit = definedExternally
    open fun animateShow(): Unit = definedExternally
    open fun animateHide(): Unit = definedExternally
    open fun setRect(): Boolean = definedExternally
    open fun moveTo(): Boolean = definedExternally
}
external open class MiniDateRangeItem : StaticTextItem {
//    override var textBoxStyle: String = definedExternally
//    override var shouldSaveValue: Boolean = definedExternally
    open var rangeDialog: DateRangeDialog = definedExternally
//    override var canFocus: Boolean = definedExternally
//    override var canTabToIcons: Boolean = definedExternally
    open var fromDateOnlyPrefix: String = definedExternally
    open var toDateOnlyPrefix: String = definedExternally
//    override var pickerIconPrompt: String = definedExternally
    open var pickerIcon: FormItemIcon = definedExternally
    open var allowRelativeDates: Boolean = definedExternally
    open var dateDisplayFormat: dynamic /* String /* "toString" */ | String /* "toLocaleString" */ | String /* "toUSShortDate" */ | String /* "toUSShortDatetime" */ | String /* "toEuropeanShortDate" */ | String /* "toEuropeanShortDatetime" */ | String /* "toJapanShortDate" */ | String /* "toJapanShortDatetime" */ | String /* "toSerializeableDate" */ | String /* "toDateStamp" */ */ = definedExternally
    open var fromDate: dynamic /* String | Date */ = definedExternally
    open var toDate: dynamic /* String | Date */ = definedExternally
    open var autoValidate: Boolean = definedExternally
    open fun setAutoValidate(autoValidate: Boolean): Unit = definedExternally
//    override fun hasAdvancedCriteria(): Boolean = definedExternally
//    open fun getCriterion(): Criterion = definedExternally
//    override fun setCriterion(criterion: Criterion): Unit = definedExternally
//    override fun canEditCriterion(criterion: Criterion): Boolean = definedExternally
    open fun setValue(value: DateRange): Unit = definedExternally
//    override fun getValue(): DateRange = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): MiniDateRangeItem = definedExternally
    }
}
external open class AnimateShowEffect {
    open var effect: dynamic /* String /* "slide" */ | String /* "wipe" */ | String /* "fade" */ | String /* "fly" */ */ = definedExternally
    open var startFrom: String = definedExternally
    open var endsAt: String = definedExternally
}
external open class HiddenPalette : Class, Palette {
    open var data: Array<Any?> = definedExternally
//    override var defaultEditContext: dynamic /* EditContext | EditTree | EditPane */ = definedExternally
//    override var generateNames: Boolean = definedExternally
//    override fun setDefaultEditContext(defaultEditContext: EditContext): Unit = definedExternally
//    override fun setDefaultEditContext(defaultEditContext: EditTree): Unit = definedExternally
//    override fun setDefaultEditContext(defaultEditContext: EditPane): Unit = definedExternally
//    override fun makeEditNode(paletteNode: PaletteNode): EditNode = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): HiddenPalette = definedExternally
    }
}
external open class FileLoader {
    companion object {
        var versionParamName: String = definedExternally
        var addVersionToLoadTags: Boolean = definedExternally
        var modulesDir: String = definedExternally
        var defaultModules: String = definedExternally
        var defaultSkin: String = definedExternally
        fun cacheISC(skin: String? = definedExternally /* null */, modules: String? = definedExternally /* null */, onload: String? = definedExternally /* null */): Unit = definedExternally
        fun cacheISC(skin: String? = definedExternally /* null */, modules: String? = definedExternally /* null */, onload: Function<*>? = definedExternally /* null */): Unit = definedExternally
        fun cacheISC(skin: String? = definedExternally /* null */, modules: List? = definedExternally /* null */, onload: String? = definedExternally /* null */): Unit = definedExternally
        fun cacheISC(skin: String? = definedExternally /* null */, modules: List? = definedExternally /* null */, onload: Function<*>? = definedExternally /* null */): Unit = definedExternally
        fun cacheLocale(locale: String? = definedExternally /* null */, onload: String? = definedExternally /* null */): Unit = definedExternally
        fun cacheLocale(locale: String? = definedExternally /* null */, onload: Function<*>? = definedExternally /* null */): Unit = definedExternally
        fun loadISC(skin: String? = definedExternally /* null */, modules: String? = definedExternally /* null */, onload: String? = definedExternally /* null */): Unit = definedExternally
        fun loadISC(skin: String? = definedExternally /* null */, modules: String? = definedExternally /* null */, onload: Function<*>? = definedExternally /* null */): Unit = definedExternally
        fun loadISC(skin: String? = definedExternally /* null */, modules: Array<Any>? = definedExternally /* null */, onload: String? = definedExternally /* null */): Unit = definedExternally
        fun loadISC(skin: String? = definedExternally /* null */, modules: Array<Any>? = definedExternally /* null */, onload: Function<*>? = definedExternally /* null */): Unit = definedExternally
        fun loadLocale(locale: String? = definedExternally /* null */, onload: String? = definedExternally /* null */): Unit = definedExternally
        fun loadLocale(locale: String? = definedExternally /* null */, onload: Function<*>? = definedExternally /* null */): Unit = definedExternally
        fun loadJSFiles(URLs: String, onload: String? = definedExternally /* null */): Unit = definedExternally
        fun loadJSFiles(URLs: String, onload: Function<*>? = definedExternally /* null */): Unit = definedExternally
        fun loadJSFiles(URLs: Array<Any>, onload: String? = definedExternally /* null */): Unit = definedExternally
        fun loadJSFiles(URLs: Array<Any>, onload: Function<*>? = definedExternally /* null */): Unit = definedExternally
        fun loadModules(modules: String, onload: String? = definedExternally /* null */): Unit = definedExternally
        fun loadModules(modules: String, onload: Function<*>? = definedExternally /* null */): Unit = definedExternally
        fun loadModules(modules: Array<Any>, onload: String? = definedExternally /* null */): Unit = definedExternally
        fun loadModules(modules: Array<Any>, onload: Function<*>? = definedExternally /* null */): Unit = definedExternally
        fun cacheFiles(URLs: String, onload: String? = definedExternally /* null */, type: String? = definedExternally /* null */): Unit = definedExternally
        fun cacheFiles(URLs: String, onload: Function<*>? = definedExternally /* null */, type: String? = definedExternally /* null */): Unit = definedExternally
        fun cacheFiles(URLs: Array<Any>, onload: String? = definedExternally /* null */, type: String? = definedExternally /* null */): Unit = definedExternally
        fun cacheFiles(URLs: Array<Any>, onload: Function<*>? = definedExternally /* null */, type: String? = definedExternally /* null */): Unit = definedExternally
        fun cacheModules(modules: String, onload: String? = definedExternally /* null */): Unit = definedExternally
        fun cacheModules(modules: String, onload: Function<*>? = definedExternally /* null */): Unit = definedExternally
        fun cacheModules(modules: Array<Any>, onload: String? = definedExternally /* null */): Unit = definedExternally
        fun cacheModules(modules: Array<Any>, onload: Function<*>? = definedExternally /* null */): Unit = definedExternally
        fun cacheImgStates(baseURLs: String, states: String? = definedExternally /* null */, onload: String? = definedExternally /* null */): Unit = definedExternally
        fun cacheImgStates(baseURLs: String, states: String? = definedExternally /* null */, onload: Function<*>? = definedExternally /* null */): Unit = definedExternally
        fun cacheImgStates(baseURLs: String, states: Array<Any>? = definedExternally /* null */, onload: String? = definedExternally /* null */): Unit = definedExternally
        fun cacheImgStates(baseURLs: String, states: Array<Any>? = definedExternally /* null */, onload: Function<*>? = definedExternally /* null */): Unit = definedExternally
        fun cacheImgStates(baseURLs: Array<Any>, states: String? = definedExternally /* null */, onload: String? = definedExternally /* null */): Unit = definedExternally
        fun cacheImgStates(baseURLs: Array<Any>, states: String? = definedExternally /* null */, onload: Function<*>? = definedExternally /* null */): Unit = definedExternally
        fun cacheImgStates(baseURLs: Array<Any>, states: Array<Any>? = definedExternally /* null */, onload: String? = definedExternally /* null */): Unit = definedExternally
        fun cacheImgStates(baseURLs: Array<Any>, states: Array<Any>? = definedExternally /* null */, onload: Function<*>? = definedExternally /* null */): Unit = definedExternally
        fun cacheStretchImgStates(baseURLs: String, states: String? = definedExternally /* null */, pieces: String? = definedExternally /* null */, onload: dynamic /* String? | Function<*>? */ = definedExternally /* null */): Unit = definedExternally
        fun cacheStretchImgStates(baseURLs: String, states: String? = definedExternally /* null */, pieces: Array<Any>? = definedExternally /* null */, onload: dynamic /* String? | Function<*>? */ = definedExternally /* null */): Unit = definedExternally
        fun cacheStretchImgStates(baseURLs: String, states: Array<Any>? = definedExternally /* null */, pieces: String? = definedExternally /* null */, onload: dynamic /* String? | Function<*>? */ = definedExternally /* null */): Unit = definedExternally
        fun cacheStretchImgStates(baseURLs: String, states: Array<Any>? = definedExternally /* null */, pieces: Array<Any>? = definedExternally /* null */, onload: dynamic /* String? | Function<*>? */ = definedExternally /* null */): Unit = definedExternally
        fun cacheStretchImgStates(baseURLs: Array<Any>, states: String? = definedExternally /* null */, pieces: String? = definedExternally /* null */, onload: dynamic /* String? | Function<*>? */ = definedExternally /* null */): Unit = definedExternally
        fun cacheStretchImgStates(baseURLs: Array<Any>, states: String? = definedExternally /* null */, pieces: Array<Any>? = definedExternally /* null */, onload: dynamic /* String? | Function<*>? */ = definedExternally /* null */): Unit = definedExternally
        fun cacheStretchImgStates(baseURLs: Array<Any>, states: Array<Any>? = definedExternally /* null */, pieces: String? = definedExternally /* null */, onload: dynamic /* String? | Function<*>? */ = definedExternally /* null */): Unit = definedExternally
        fun cacheStretchImgStates(baseURLs: Array<Any>, states: Array<Any>? = definedExternally /* null */, pieces: Array<Any>? = definedExternally /* null */, onload: dynamic /* String? | Function<*>? */ = definedExternally /* null */): Unit = definedExternally
        fun cacheEdgeImages(baseURLs: String, showCenter: Boolean? = definedExternally /* null */, edges: String? = definedExternally /* null */, colors: String? = definedExternally /* null */, onload: dynamic /* String? | Function<*>? */ = definedExternally /* null */): Unit = definedExternally
        fun cacheEdgeImages(baseURLs: String, showCenter: Boolean? = definedExternally /* null */, edges: String? = definedExternally /* null */, colors: Array<Any>? = definedExternally /* null */, onload: dynamic /* String? | Function<*>? */ = definedExternally /* null */): Unit = definedExternally
        fun cacheEdgeImages(baseURLs: String, showCenter: Boolean? = definedExternally /* null */, edges: Array<Any>? = definedExternally /* null */, colors: String? = definedExternally /* null */, onload: dynamic /* String? | Function<*>? */ = definedExternally /* null */): Unit = definedExternally
        fun cacheEdgeImages(baseURLs: String, showCenter: Boolean? = definedExternally /* null */, edges: Array<Any>? = definedExternally /* null */, colors: Array<Any>? = definedExternally /* null */, onload: dynamic /* String? | Function<*>? */ = definedExternally /* null */): Unit = definedExternally
        fun cacheEdgeImages(baseURLs: Array<Any>, showCenter: Boolean? = definedExternally /* null */, edges: String? = definedExternally /* null */, colors: String? = definedExternally /* null */, onload: dynamic /* String? | Function<*>? */ = definedExternally /* null */): Unit = definedExternally
        fun cacheEdgeImages(baseURLs: Array<Any>, showCenter: Boolean? = definedExternally /* null */, edges: String? = definedExternally /* null */, colors: Array<Any>? = definedExternally /* null */, onload: dynamic /* String? | Function<*>? */ = definedExternally /* null */): Unit = definedExternally
        fun cacheEdgeImages(baseURLs: Array<Any>, showCenter: Boolean? = definedExternally /* null */, edges: Array<Any>? = definedExternally /* null */, colors: String? = definedExternally /* null */, onload: dynamic /* String? | Function<*>? */ = definedExternally /* null */): Unit = definedExternally
        fun cacheEdgeImages(baseURLs: Array<Any>, showCenter: Boolean? = definedExternally /* null */, edges: Array<Any>? = definedExternally /* null */, colors: Array<Any>? = definedExternally /* null */, onload: dynamic /* String? | Function<*>? */ = definedExternally /* null */): Unit = definedExternally
        fun cacheShadows(baseDir: String, depths: String, baseShadowImage: String? = definedExternally /* null */, onload: String? = definedExternally /* null */): Unit = definedExternally
        fun cacheShadows(baseDir: String, depths: String, baseShadowImage: String? = definedExternally /* null */, onload: Function<*>? = definedExternally /* null */): Unit = definedExternally
        fun cacheShadows(baseDir: String, depths: Array<Any>, baseShadowImage: String? = definedExternally /* null */, onload: String? = definedExternally /* null */): Unit = definedExternally
        fun cacheShadows(baseDir: String, depths: Array<Any>, baseShadowImage: String? = definedExternally /* null */, onload: Function<*>? = definedExternally /* null */): Unit = definedExternally
        fun ensureLoaded(callback: Any?): Unit = definedExternally
        fun cacheISC(): Unit = definedExternally
        fun cacheLocale(): Unit = definedExternally
        fun loadISC(): Unit = definedExternally
        fun loadLocale(): Unit = definedExternally
        fun loadJSFiles(URLs: String): Unit = definedExternally
        fun loadJSFiles(URLs: Array<Any>): Unit = definedExternally
        fun loadModules(modules: String): Unit = definedExternally
        fun loadModules(modules: Array<Any>): Unit = definedExternally
        fun cacheFiles(URLs: String): Unit = definedExternally
        fun cacheFiles(URLs: Array<Any>): Unit = definedExternally
        fun cacheModules(modules: String): Unit = definedExternally
        fun cacheModules(modules: Array<Any>): Unit = definedExternally
        fun cacheImgStates(baseURLs: String): Unit = definedExternally
        fun cacheImgStates(baseURLs: Array<Any>): Unit = definedExternally
        fun cacheStretchImgStates(baseURLs: String): Unit = definedExternally
        fun cacheStretchImgStates(baseURLs: Array<Any>): Unit = definedExternally
        fun cacheEdgeImages(baseURLs: String): Unit = definedExternally
        fun cacheEdgeImages(baseURLs: Array<Any>): Unit = definedExternally
        fun cacheShadows(baseDir: String, depths: String): Unit = definedExternally
        fun cacheShadows(baseDir: String, depths: Array<Any>): Unit = definedExternally
    }
}
external open class ImgSectionHeader : HLayout {
    open var controls: Array<Any?> = definedExternally
    open var controlsLayout: Layout = definedExternally
    open var title: String = definedExternally
    open var clipTitle: Boolean = definedExternally
    open var showClippedTitleOnHover: Boolean = definedExternally
    open var icon: String = definedExternally
    open var iconAlign: String = definedExternally
    open var iconSize: Number = definedExternally
    open var iconHeight: Number = definedExternally
    open var iconWidth: Number = definedExternally
    open var iconOrientation: String = definedExternally
//    override var prompt: String = definedExternally
//    override var noDoubleClicks: Boolean = definedExternally
    open var background: StretchImg = definedExternally
    open fun getSectionStack(): SectionStack = definedExternally
    open fun setIcon(icon: String): Unit = definedExternally
    open fun setIconOrientation(orientation: String): Unit = definedExternally
//    open fun setAlign(align: String): Unit = definedExternally
    open fun setPrompt(prompt: String): Unit = definedExternally
    open fun titleClipped(): Boolean = definedExternally
    open fun titleHoverHTML(defaultHTML: String): String = definedExternally
    open fun titleHover(): Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ImgSectionHeader = definedExternally
    }
}
external open class NavItem : TreeNode {
//    override var id: String = definedExternally
//    override var title: String = definedExternally
//    override var icon: String = definedExternally
    open var items: Array<Any?> = definedExternally
    open var isHeader: Boolean = definedExternally
    open var customStyle: String = definedExternally
    open var isSeparator: Boolean = definedExternally
    open var pane: dynamic /* String | Canvas */ = definedExternally
}
external open class TextAreaItemEditProxy : TextItemEditProxy {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): TextAreaItemEditProxy = definedExternally
    }
}
external open class ColorPickerItem : ColorItem {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ColorPickerItem = definedExternally
    }
}
external open class CalendarEvent {
    open var startDate: Date = definedExternally
    open var endDate: Date = definedExternally
    open var duration: Number = definedExternally
    open var durationUnit: dynamic /* String /* "millisecond" */ | String /* "second" */ | String /* "minute" */ | String /* "hour" */ | String /* "day" */ | String /* "week" */ | String /* "month" */ | String /* "quarter" */ | String /* "year" */ */ = definedExternally
    open var name: String = definedExternally
    open var description: String = definedExternally
    open var canEdit: Boolean = definedExternally
    open var canDrag: Boolean = definedExternally
    open var canResize: Boolean = definedExternally
    open var canEditLane: Boolean = definedExternally
    open var canEditSublane: Boolean = definedExternally
    open var backgroundColor: String = definedExternally
    open var textColor: String = definedExternally
    open var borderColor: String = definedExternally
    open var headerBackgroundColor: String = definedExternally
    open var headerTextColor: String = definedExternally
    open var headerBorderColor: String = definedExternally
    open var eventWindowStyle: String = definedExternally
    open var styleName: String = definedExternally
    open var lane: String = definedExternally
    open var sublane: String = definedExternally
}
external open class SelectionTreeMenu : Menu {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SelectionTreeMenu = definedExternally
    }
}
external open class RowSpacerItem : SpacerItem {
//    override var showTitle: Boolean = definedExternally
//    override var colSpan: dynamic /* String | Number */ = definedExternally
//    override var startRow: Boolean = definedExternally
//    override var endRow: Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): RowSpacerItem = definedExternally
    }
}
external open class HeaderItem : FormItem {
//    override var defaultValue: String = definedExternally
//    override var showTitle: Boolean = definedExternally
//    override var textBoxStyle: String = definedExternally
//    override var canSelectText: Boolean = definedExternally
//    override var colSpan: dynamic /* String | Number */ = definedExternally
//    override var startRow: Boolean = definedExternally
//    override var endRow: Boolean = definedExternally
//    override var align: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
//    override var applyAlignToText: Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): HeaderItem = definedExternally
    }
}
external open class RadialGradient : Gradient {
    open var cx: String = definedExternally
    open var cy: String = definedExternally
    open var r: String = definedExternally
    open var fx: String = definedExternally
    open var fy: String = definedExternally
}
external open class FiscalCalendar {
    open var defaultMonth: Number = definedExternally
    open var defaultDate: Number = definedExternally
    open var defaultYearMode: dynamic /* String /* "start" */ | String /* "end" */ */ = definedExternally
    open var fiscalYears: Array<Any?> = definedExternally
}
external open class EditNode : PaletteNode {
//    override var defaults: Any? = definedExternally
//    override var editProxyProperties: EditProxy = definedExternally
//    override var type: String = definedExternally
//    override var liveObject: Any = definedExternally
    open var useEditMask: Boolean = definedExternally
//    override var canDuplicate: Boolean = definedExternally
}
external open class SliderItem : CanvasItem {
//    override var width: Number = definedExternally
    open var vertical: Boolean = definedExternally
    open var minValue: Number = definedExternally
    open var maxValue: Number = definedExternally
    open var numValues: Number = definedExternally
    open var roundValues: Boolean = definedExternally
    open var roundPrecision: Number = definedExternally
//    override var defaultValue: Number = definedExternally
    open var slider: Canvas = definedExternally
    open var sliderProperties: Slider = definedExternally
//    override var shouldSaveValue: Boolean = definedExternally
    open var sliderConstructor: Class = definedExternally
    open var changeOnDrag: Boolean = definedExternally
//    override fun pendingStatusChanged(form: DynamicForm, item: FormItem, pendingStatus: Boolean, newValue: Any, value: Any): Boolean = definedExternally
    open fun setMinValue(newValue: Number): Unit = definedExternally
    open fun setMaxValue(newValue: Number): Unit = definedExternally
    open fun setNumValues(newNumValues: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SliderItem = definedExternally
    }
}
external open class Mail : Class {
    open var templateFile: String = definedExternally
    open var messageTemplate: String = definedExternally
    open var to: String = definedExternally
    open var cc: String = definedExternally
    open var bcc: String = definedExternally
    open var from: String = definedExternally
    open var replyTo: String = definedExternally
    open var subject: String = definedExternally
    open var multiple: Boolean = definedExternally
    open var messageData: String = definedExternally
    open var contentType: String = definedExternally
    open var encoding: String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Mail = definedExternally
    }
}
external open class NavigationBar : HLayout {
    open var animateStateChanges: Boolean = definedExternally
    open var leftButtonTitle: String = definedExternally
    open var shortLeftButtonTitle: String = definedExternally
    open var alwaysShowLeftButtonTitle: Boolean = definedExternally
    open var leftButtonIcon: String = definedExternally
    open var showLeftButton: Boolean = definedExternally
    open var leftButton: NavigationButton = definedExternally
    open var title: String = definedExternally
    open var maxCenterOffset: Number = definedExternally
    open var titleLabel: Label = definedExternally
    open var rightButtonTitle: String = definedExternally
    open var rightButtonIcon: String = definedExternally
    open var showRightButton: Boolean = definedExternally
    open var rightButton: NavigationButton = definedExternally
    open var miniNavControl: MiniNavControl = definedExternally
    open var showMiniNavControl: Boolean = definedExternally
    open var miniNavAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var customNavControl: Canvas = definedExternally
    open fun setTitle(newTitle: String): Unit = definedExternally
    open fun setLeftButtonTitle(newTitle: String): Unit = definedExternally
    open fun setShortLeftButtonTitle(newShortLeftButtonTitle: String): Unit = definedExternally
    open fun setAlwaysShowLeftButtonTitle(newAlwaysShowLeftButtonTitle: Boolean): Unit = definedExternally
    open fun setLeftButtonIcon(newIcon: String): Unit = definedExternally
    open fun setShowLeftButton(show: Boolean): Unit = definedExternally
    open fun setRightButtonTitle(newTitle: String): Unit = definedExternally
    open fun setRightButtonIcon(newIcon: String): Unit = definedExternally
    open fun setShowRightButton(show: Boolean): Unit = definedExternally
    open fun setCustomNavControl(controls: Array<String>): Unit = definedExternally
    open fun setCustomNavControl(controls: Array<Any?>): Unit = definedExternally
    open fun setViewState(viewState: NavigationBarViewState, direction: String? /* "none" */ = definedExternally /* null */): Unit = definedExternally
    open fun setViewState(viewState: NavigationBarViewState, direction: String? /* "back" */ = definedExternally /* null */): Unit = definedExternally
    open fun setViewState(viewState: NavigationBarViewState, direction: String? /* "forward" */ = definedExternally /* null */): Unit = definedExternally
    open fun navigationClick(direction: String /* "none" */): Unit = definedExternally
    open fun navigationClick(direction: String /* "back" */): Unit = definedExternally
    open fun navigationClick(direction: String /* "forward" */): Unit = definedExternally
    open fun upClick(): Unit = definedExternally
    open fun downClick(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): NavigationBar = definedExternally
    }
    open fun setViewState(viewState: NavigationBarViewState): Unit = definedExternally
}
external open class LoginDialog : Window {
    open var dismissable: Boolean = definedExternally
//    override var dismissOnEscape: Boolean = definedExternally
//    override var showCloseButton: Boolean = definedExternally
    open var allowBlankPassword: Boolean = definedExternally
    open var showLostPasswordLink: Boolean = definedExternally
    open var showRegistrationLink: Boolean = definedExternally
//    override var title: String = definedExternally
    open var errorStyle: String = definedExternally
    open var usernameItemTitle: String = definedExternally
    open var passwordItemTitle: String = definedExternally
    open var loginButtonTitle: String = definedExternally
    open var lostPasswordItemTitle: String = definedExternally
    open var registrationItemTitle: String = definedExternally
    open var errorMessage: String = definedExternally
//    override var items: dynamic /* String | Canvas | Array<Any?> */ = definedExternally
    open var formFields: Array<Any?> = definedExternally
    open var loginFailureItem: BlurbItem = definedExternally
    open var usernameItem: TextItem = definedExternally
    open var lostPasswordItem: LinkItem = definedExternally
    open var registrationItem: LinkItem = definedExternally
    open var passwordItem: PasswordItem = definedExternally
    open var loginButton: ButtonItem = definedExternally
    open var loginForm: DynamicForm = definedExternally
    open fun register(values: Any, form: DynamicForm): Unit = definedExternally
    open fun lostPassword(values: Any, form: DynamicForm): Unit = definedExternally
    open fun loginFunc(credentials: Any, dialogCallback: Function<*>): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): LoginDialog = definedExternally
        var LOGIN_TITLE: String = definedExternally
        var USERNAME_TITLE: String = definedExternally
        var PASSWORD_TITLE: String = definedExternally
        var LOGIN_BUTTON_TITLE: String = definedExternally
        var LOGIN_ERROR_MESSAGE: String = definedExternally
    }
}
external open class ToolStripSpacer : LayoutSpacer {
    open var space: Number = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ToolStripSpacer = definedExternally
    }
}
external open class IntegerItem : TextItem {
    open fun getValueAsInteger(): Number = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): IntegerItem = definedExternally
    }
}
external open class SelectionOutline : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SelectionOutline = definedExternally
        var border: String = definedExternally
        var labelBackgroundColor: String = definedExternally
        fun setBorder(border: String): Unit = definedExternally
        fun getBorder(): Unit = definedExternally
        fun setLabelBackgroundColor(color: String): Unit = definedExternally
        fun getLabelBackgroundColor(): Unit = definedExternally
    }
}
external open class DateRangeDialog : Window {
    open var headerTitle: String = definedExternally
    open var rangeItem: DateRangeItem = definedExternally
    open var clearButtonTitle: String = definedExternally
    open var clearButton: IButton = definedExternally
    open var okButtonTitle: String = definedExternally
    open var okButton: IButton = definedExternally
    open var cancelButtonTitle: String = definedExternally
    open var cancelButton: IButton = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DateRangeDialog = definedExternally
        fun askForRange(allowRelativeDates: Boolean, rangeItemProperties: DateRangeItem, windowProperties: DateRangeDialog, callback: Any?): Unit = definedExternally
    }
}
external open class ImgProperties {
    open var src: String = definedExternally
    open var width: Number = definedExternally
    open var height: Number = definedExternally
    open var name: String = definedExternally
    open var extraStuff: String = definedExternally
    open var imgDir: String = definedExternally
}
external open class RichTextCanvas : Canvas {
    open var moveFocusOnTab: Boolean = definedExternally
    open fun indentSelection(): Unit = definedExternally
    open fun outdentSelection(): Unit = definedExternally
    open fun convertSelectionToOrderedList(): Unit = definedExternally
    open fun convertSelectionToUnorderedList(): Unit = definedExternally
    open fun applyListProperties(listProperties: ListProperties): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): RichTextCanvas = definedExternally
    }
}
external open class SplitPane : Layout {
    open var addHistoryEntries: Boolean = definedExternally
    open var deviceMode: dynamic /* String /* "handset" */ | String /* "tablet" */ | String /* "desktop" */ */ = definedExternally
    open var pageOrientation: dynamic /* String /* "landscape" */ | String /* "portrait" */ */ = definedExternally
    open var navigationPaneWidth: Number = definedExternally
    open var showResizeBars: Boolean = definedExternally
    open var navigationBar: NavigationBar = definedExternally
    open var showNavigationBar: Boolean = definedExternally
    open var animateNavigationBarStateChanges: Boolean = definedExternally
    open var backButton: NavigationButton = definedExternally
    open var leftButton: NavigationButton = definedExternally
    open var currentPane: dynamic /* String /* "navigation" */ | String /* "list" */ | String /* "detail" */ */ = definedExternally
    open var navigationTitle: String = definedExternally
    open var navigationPane: Canvas = definedExternally
    open var listTitle: String = definedExternally
    open var listPane: Canvas = definedExternally
    open var listToolStrip: NavigationBar = definedExternally
    open var showListToolStrip: Boolean = definedExternally
    open var detailTitle: String = definedExternally
    open var detailPane: Canvas = definedExternally
    open var detailToolStrip: NavigationBar = definedExternally
    open var showDetailToolStrip: Boolean = definedExternally
    open var detailToolButtons: Array<Any?> = definedExternally
    open var showMiniNav: Boolean = definedExternally
    open var showLeftButton: Boolean = definedExternally
    open var showRightButton: Boolean = definedExternally
    open var detailNavigationControl: Canvas = definedExternally
    open var listPaneTitleTemplate: String = definedExternally
    open var detailPaneTitleTemplate: String = definedExternally
    open var autoNavigate: Boolean = definedExternally
//    override var editProxyConstructor: String = definedExternally
    open fun setAddHistoryEntries(addHistoryEntries: Boolean): Unit = definedExternally
    open fun setCurrentPane(newPane: String /* "navigation" */): Unit = definedExternally
    open fun setCurrentPane(newPane: String /* "list" */): Unit = definedExternally
    open fun setCurrentPane(newPane: String /* "detail" */): Unit = definedExternally
    open fun setDetailToolButtons(buttons: Array<Any?>): Unit = definedExternally
    open fun setPageOrientation(newOrientation: String /* "landscape" */): Unit = definedExternally
    open fun setPageOrientation(newOrientation: String /* "portrait" */): Unit = definedExternally
    open fun setShowLeftButton(show: Boolean): Unit = definedExternally
    open fun setLeftButtonTitle(newTitle: String): Unit = definedExternally
    open fun setShowRightButton(visible: Boolean): Unit = definedExternally
    open fun setRightButtonTitle(newTitle: String): Unit = definedExternally
    open fun setNavigationPane(pane: Canvas): Unit = definedExternally
    open fun setNavigationTitle(title: String): Unit = definedExternally
    open fun showNavigationPane(direction: String? /* "none" */ = definedExternally /* null */): Unit = definedExternally
    open fun showNavigationPane(direction: String? /* "back" */ = definedExternally /* null */): Unit = definedExternally
    open fun showNavigationPane(direction: String? /* "forward" */ = definedExternally /* null */): Unit = definedExternally
    open fun setListPane(pane: Canvas): Unit = definedExternally
    open fun showListPane(listPaneTitle: String? = definedExternally /* null */, backButtonTitle: String? = definedExternally /* null */, direction: String? /* "none" */ = definedExternally /* null */): Unit = definedExternally
    open fun showListPane(listPaneTitle: String? = definedExternally /* null */, backButtonTitle: String? = definedExternally /* null */, direction: String? /* "back" */ = definedExternally /* null */): Unit = definedExternally
    open fun showListPane(listPaneTitle: String? = definedExternally /* null */, backButtonTitle: String? = definedExternally /* null */, direction: String? /* "forward" */ = definedExternally /* null */): Unit = definedExternally
    open fun setListTitle(title: String): Unit = definedExternally
    open fun setDetailPane(pane: Canvas): Unit = definedExternally
    open fun showDetailPane(detailPaneTitle: String? = definedExternally /* null */, backButtonTitle: String? = definedExternally /* null */, direction: String? /* "none" */ = definedExternally /* null */): Unit = definedExternally
    open fun showDetailPane(detailPaneTitle: String? = definedExternally /* null */, backButtonTitle: String? = definedExternally /* null */, direction: String? /* "back" */ = definedExternally /* null */): Unit = definedExternally
    open fun showDetailPane(detailPaneTitle: String? = definedExternally /* null */, backButtonTitle: String? = definedExternally /* null */, direction: String? /* "forward" */ = definedExternally /* null */): Unit = definedExternally
    open fun setDetailTitle(title: String): Unit = definedExternally
    open fun setDetailNavigationControl(control: Canvas): Unit = definedExternally
    open fun setListPaneTitleTemplate(template: String): Unit = definedExternally
    open fun setDetailPaneTitleTemplate(template: String): Unit = definedExternally
    open fun navigatePane(target: String? /* "navigation" */ = definedExternally /* null */, title: String? = definedExternally /* null */, source: String? /* "navigation" */ = definedExternally /* null */): Unit = definedExternally
    open fun navigatePane(target: String? /* "navigation" */ = definedExternally /* null */, title: String? = definedExternally /* null */, source: String? /* "list" */ = definedExternally /* null */): Unit = definedExternally
    open fun navigatePane(target: String? /* "navigation" */ = definedExternally /* null */, title: String? = definedExternally /* null */, source: String? /* "detail" */ = definedExternally /* null */): Unit = definedExternally
    open fun navigatePane(target: String? /* "list" */ = definedExternally /* null */, title: String? = definedExternally /* null */, source: String? /* "navigation" */ = definedExternally /* null */): Unit = definedExternally
    open fun navigatePane(target: String? /* "list" */ = definedExternally /* null */, title: String? = definedExternally /* null */, source: String? /* "list" */ = definedExternally /* null */): Unit = definedExternally
    open fun navigatePane(target: String? /* "list" */ = definedExternally /* null */, title: String? = definedExternally /* null */, source: String? /* "detail" */ = definedExternally /* null */): Unit = definedExternally
    open fun navigatePane(target: String? /* "detail" */ = definedExternally /* null */, title: String? = definedExternally /* null */, source: String? /* "navigation" */ = definedExternally /* null */): Unit = definedExternally
    open fun navigatePane(target: String? /* "detail" */ = definedExternally /* null */, title: String? = definedExternally /* null */, source: String? /* "list" */ = definedExternally /* null */): Unit = definedExternally
    open fun navigatePane(target: String? /* "detail" */ = definedExternally /* null */, title: String? = definedExternally /* null */, source: String? /* "detail" */ = definedExternally /* null */): Unit = definedExternally
    open fun navigateListPane(title: String? = definedExternally /* null */): Unit = definedExternally
    open fun navigateDetailPane(title: String? = definedExternally /* null */): Unit = definedExternally
    open fun navigationClick(direction: String /* "none" */): Unit = definedExternally
    open fun navigationClick(direction: String /* "back" */): Unit = definedExternally
    open fun navigationClick(direction: String /* "forward" */): Unit = definedExternally
    open fun paneChanged(pane: String /* "navigation" */): Unit = definedExternally
    open fun paneChanged(pane: String /* "list" */): Unit = definedExternally
    open fun paneChanged(pane: String /* "detail" */): Unit = definedExternally
    open fun upClick(): Unit = definedExternally
    open fun downClick(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SplitPane = definedExternally
    }
    open fun showNavigationPane(): Unit = definedExternally
    open fun showListPane(): Unit = definedExternally
    open fun showDetailPane(): Unit = definedExternally
    open fun navigatePane(): Unit = definedExternally
}
external open class IconButton : Button {
    open var orientation: String = definedExternally
    open var rowSpan: Number = definedExternally
//    override var baseStyle: String = definedExternally
    open var showMenuIcon: Boolean = definedExternally
    open var menuIconSrc: String = definedExternally
    open var menuIconWidth: Number = definedExternally
    open var menuIconHeight: Number = definedExternally
//    override var iconOrientation: String = definedExternally
//    override var iconAlign: String = definedExternally
//    override var align: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
//    override var valign: dynamic /* String /* "top" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
    open var showTitle: Boolean = definedExternally
    open var showButtonTitle: Boolean = definedExternally
    open var showIcon: Boolean = definedExternally
//    override var icon: String = definedExternally
//    override var iconSize: Number = definedExternally
    open var largeIcon: String = definedExternally
    open var largeIconSize: Number = definedExternally
    open var showMenuOnClick: Boolean = definedExternally
    open var showMenuIconOver: Boolean = definedExternally
    open var showMenuIconDisabled: Boolean = definedExternally
    open fun setIcon(): Unit = definedExternally
    open fun setLargeIcon(): Unit = definedExternally
    open fun menuIconClick(): Boolean = definedExternally
//    override fun iconClick(): Boolean = definedExternally
//    override fun click(): Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): IconButton = definedExternally
    }
}
external open class DataSource : Class {
    open var ID: String = definedExternally
    open var addGlobalId: Boolean = definedExternally
    open var dataFormat: dynamic /* String /* "custom" */ | String /* "xml" */ | String /* "json" */ | String /* "iscServer" */ */ = definedExternally
    open var useStrictJSON: Boolean = definedExternally
    open var dataProtocol: dynamic /* String /* "getParams" */ | String /* "postParams" */ | String /* "postXML" */ | String /* "soap" */ | String /* "postMessage" */ | String /* "clientCustom" */ */ = definedExternally
    open var useHttpProxy: Boolean = definedExternally
    open var callbackParam: String = definedExternally
    open var requestProperties: DSRequest = definedExternally
    open var dataTransport: dynamic /* String /* "xmlHttpRequest" */ | String /* "scriptInclude" */ | String /* "hiddenFrame" */ */ = definedExternally
    open var preventHTTPCaching: Boolean = definedExternally
    open var serverType: dynamic /* String /* "sql" */ | String /* "hibernate" */ | String /* "jpa" */ | String /* "jpa1" */ | String /* "generic" */ | String /* "projectFile" */ */ = definedExternally
    open var tableName: String = definedExternally
    open var schema: String = definedExternally
    open var quoteTableName: Boolean = definedExternally
    open var dbName: String = definedExternally
    open var configBean: String = definedExternally
    open var quoteColumnNames: Boolean = definedExternally
    open var jsonPrefix: String = definedExternally
    open var jsonSuffix: String = definedExternally
    open var fields: Array<Any?> = definedExternally
    open var inheritsFrom: String = definedExternally
    open var inheritanceMode: dynamic /* String /* "none" */ | String /* "full" */ */ = definedExternally
    open var sequenceMode: dynamic /* String /* "none" */ | String /* "native" */ | String /* "jdbcDriver" */ */ = definedExternally
    open var useFlatFields: Boolean = definedExternally
    open var showLocalFieldsOnly: Boolean = definedExternally
    open var useParentFieldOrder: Boolean = definedExternally
    open var dropExtraFields: Boolean = definedExternally
    open var sendExtraFields: Boolean = definedExternally
    open var autoDeriveSchema: Boolean = definedExternally
    open var schemaBean: String = definedExternally
    open var idClassName: String = definedExternally
    open var patternSingleWildcard: dynamic /* String | Array<String> */ = definedExternally
    open var patternMultiWildcard: dynamic /* String | Array<String> */ = definedExternally
    open var patternEscapeChar: String = definedExternally
    open var translatePatternOperators: Boolean = definedExternally
    open var xmlNamespaces: Any = definedExternally
    open var serviceNamespace: String = definedExternally
    open var schemaNamespace: String = definedExternally
    open var recordXPath: String = definedExternally
    open var dataURL: String = definedExternally
    open var tagName: String = definedExternally
    open var useOfflineStorage: Boolean = definedExternally
    open var clientOnly: Boolean = definedExternally
    open var mockMode: Boolean = definedExternally
    open var mockDataRows: Number = definedExternally
    open var mockDataCriteria: Any? = definedExternally
    open var criteriaPolicy: dynamic /* String /* "dropOnChange" */ | String /* "dropOnShortening" */ */ = definedExternally
    open var defaultTextMatchStyle: dynamic /* String /* "startsWith" */ | String /* "exact" */ | String /* "exactCase" */ | String /* "substring" */ */ = definedExternally
    open var ignoreTextMatchStyleCaseSensitive: Boolean = definedExternally
    open var resultTreeClass: String = definedExternally
    open var resultSetClass: String = definedExternally
    open var useLocalValidators: Boolean = definedExternally
    open var requiredMessage: String = definedExternally
    open var showPrompt: Boolean = definedExternally
    open var enumTranslateStrategy: dynamic /* String /* "string" */ | String /* "name" */ | String /* "ordinal" */ | String /* "bean" */ */ = definedExternally
    open var enumConstantProperty: String = definedExternally
    open var enumOrdinalProperty: String = definedExternally
    open var autoDeriveTitles: Boolean = definedExternally
    open var canMultiSort: Boolean = definedExternally
    open var sparseUpdates: Boolean = definedExternally
    open var noNullUpdates: Boolean = definedExternally
    open var omitNullDefaultsOnAdd: Boolean = definedExternally
    open var nullStringValue: String = definedExternally
    open var nullIntegerValue: Number = definedExternally
    open var nullFloatValue: Number = definedExternally
    open var nullBooleanValue: Boolean = definedExternally
    open var nullDateValue: Date = definedExternally
    open var requiresAuthentication: Boolean = definedExternally
    open var requiresRole: String = definedExternally
    open var requires: String = definedExternally
    open var creatorOverrides: Boolean = definedExternally
    open var ownerIdField: String = definedExternally
    open var guestUserId: String = definedExternally
    open var serverOnly: String = definedExternally
    open var autoJoinTransactions: Boolean = definedExternally
    open var useSpringTransaction: Boolean = definedExternally
    open var sqlPaging: dynamic /* String /* "none" */ | String /* "sqlLimit" */ | String /* "jdbcScroll" */ | String /* "dropAtServer" */ */ = definedExternally
    open var sqlUsePagingHint: Boolean = definedExternally
    open var useSubselectForRowCount: Boolean = definedExternally
    open var tableCode: String = definedExternally
    open var progressiveLoading: Boolean = definedExternally
    open var progressiveLoadingThreshold: Number = definedExternally
    open var lookAhead: Number = definedExternally
    open var defaultBooleanStorageStrategy: String = definedExternally
    open var endGap: Number = definedExternally
    open var cacheAllData: Boolean = definedExternally
    open var cacheAllOperationId: String = definedExternally
    open var cacheAcrossOperationIds: Boolean = definedExternally
    open var cacheMaxAge: Number = definedExternally
    open var cacheData: Array<Any?> = definedExternally
    open var testData: Array<Any?> = definedExternally
    open var sendParentNode: Boolean = definedExternally
    open var autoCacheAllData: Boolean = definedExternally
    open var useTestDataFetch: Boolean = definedExternally
    open var autoConvertRelativeDates: Boolean = definedExternally
    open var autoDiscoverTree: Boolean = definedExternally
    open var discoverTreeSettings: DiscoverTreeSettings = definedExternally
    open var useAnsiJoins: Boolean = definedExternally
    open var trimMilliseconds: Boolean = definedExternally
    open var transformMultipleFields: Boolean = definedExternally
    open var audit: Boolean = definedExternally
    open var auditDataSourceID: String = definedExternally
    open var auditUserFieldName: String = definedExternally
    open var auditTimeStampFieldName: String = definedExternally
    open var auditRevisionFieldName: String = definedExternally
    open var auditTypeFieldName: String = definedExternally
    open var auditDSConstructor: String = definedExternally
    open var autoCreateAuditTable: Boolean = definedExternally
    open var title: String = definedExternally
    open var pluralTitle: String = definedExternally
    open var titleField: String = definedExternally
    open var iconField: String = definedExternally
    open var infoField: String = definedExternally
    open var dataField: String = definedExternally
    open var descriptionField: String = definedExternally
    open var childrenField: String = definedExternally
    open var serverConstructor: String = definedExternally
    open var qualifyColumnNames: Boolean = definedExternally
    open var validateRelatedRecords: Boolean = definedExternally
    open var beanClassName: String = definedExternally
    open var implicitCriteria: Any? = definedExternally
    open var skipJSONValidation: dynamic /* String /* "none" */ | String /* "full" */ | String /* "partial" */ */ = definedExternally
    open var globalNamespaces: Any = definedExternally
    open var resultBatchSize: Number = definedExternally
    open var fileNameField: String = definedExternally
    open var fileTypeField: String = definedExternally
    open var fileFormatField: String = definedExternally
    open var fileContentsField: String = definedExternally
    open var fileLastModifiedField: String = definedExternally
    open var fileVersionField: String = definedExternally
    open var maxFileVersions: Number = definedExternally
    open var projectFileKey: String = definedExternally
    open var projectFileLocations: Array<String> = definedExternally
    open var deepCloneOnEdit: Boolean = definedExternally
    open var deepCloneNonFieldValuesOnEdit: Boolean = definedExternally
    open var script: String = definedExternally
    open var serverObject: ServerObject = definedExternally
    open var operationBindings: Array<Any?> = definedExternally
    open var allowClientRequestedSummaries: Boolean = definedExternally
    open var recordName: String = definedExternally
    open var defaultMultiUpdatePolicy: dynamic /* String /* "never" */ | String /* "always" */ | String /* "clientRequest" */ | String /* "rpcManager" */ */ = definedExternally
    open var dropUnknownCriteria: Boolean = definedExternally
    open var strictSQLFiltering: Boolean = definedExternally
    open var allowAdvancedCriteria: Boolean = definedExternally
    open fun setCacheAllData(shouldCache: Boolean): Unit = definedExternally
    open fun setCacheData(data: Array<Any?>): Unit = definedExternally
    open fun setTestData(data: Array<Any?>): Unit = definedExternally
    open fun invalidateCache(): Unit = definedExternally
    open fun setClientOnly(): Unit = definedExternally
    open fun hasAllData(): Boolean = definedExternally
    open fun convertRelativeDates(criteria: Any?, timezoneOffset: String? = definedExternally /* null */, firstDayOfWeek: Number? = definedExternally /* null */, baseDate: Date? = definedExternally /* null */): Any? = definedExternally
    open fun updateCaches(dsResponse: DSResponse, dsRequest: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun getLegalChildTags(): Unit = definedExternally
    open fun copyRecord(record: Record): Record = definedExternally
    open fun copyRecords(records: Array<Any?>): Array<Any?> = definedExternally
    open fun cloneDSRequest(dsRequest: DSRequest): DSRequest = definedExternally
    open fun cloneDSResponse(dsResponse: DSResponse): DSResponse = definedExternally
    open fun transformRequest(dsRequest: DSRequest): Any = definedExternally
    open fun getUpdatedData(dsRequest: DSRequest, dsResponse: DSResponse, useDataFromRequest: Boolean): dynamic /* Any | Array<Any?> */ = definedExternally
    open fun getDataProtocol(dsRequest: DSRequest): dynamic /* String /* "getParams" */ | String /* "postParams" */ | String /* "postXML" */ | String /* "soap" */ | String /* "postMessage" */ | String /* "clientCustom" */ */ = definedExternally
    open fun processResponse(requestId: String, dsResponse: DSResponse): Unit = definedExternally
    open fun getXMLRequestBody(dsRequest: DSRequest): String = definedExternally
    open fun xmlSerialize(data: Any, flags: SerializationContext): String = definedExternally
    open fun recordsFromXML(elements: Array<Any?>, callback: Any?): List = definedExternally
    open fun transformResponse(dsResponse: DSResponse, dsRequest: DSRequest, data: Any?): DSResponse = definedExternally
    open fun transformResponse(dsResponse: DSResponse, dsRequest: DSRequest, data: JSON): DSResponse = definedExternally
    open fun fetchRecord(pkValue: Any, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun fetchData(criteria: Any? = definedExternally /* null */, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun filterData(criteria: Any? = definedExternally /* null */, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun exportClientData(data: Array<Any?>, requestProperties: DSRequest, callback: Any?): Unit = definedExternally
    open fun exportData(criteria: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */, callback: Any? = definedExternally /* null */): Unit = definedExternally
    open fun getClientOnlyDataSource(criteria: Any?, callback: (clientOnly: DataSource) -> Unit, requestProperties: DSRequest? = definedExternally /* null */, dataSourceProperties: DataSource? = definedExternally /* null */): Unit = definedExternally
    open fun addData(newRecord: Record, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun updateData(updatedRecord: Record, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun removeData(data: Record, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun removeData(data: Any, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun validateData(values: Record, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun performCustomOperation(operationId: String, data: Record? = definedExternally /* null */, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun downloadFile(data: Record, fieldName: String? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun viewFile(data: Record, fieldName: String? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun getFileURL(data: Record, fieldName: String? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): String = definedExternally
    open fun getFileURL(data: Any, fieldName: String? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): String = definedExternally
    open fun getFetchDataURL(criteria: Any?, requestProperties: DSRequest? = definedExternally /* null */): String = definedExternally
    open fun getFile(fileSpec: String, callback: (dsResponse: DSResponse, data: String, dsRequest: DSRequest) -> Unit): Unit = definedExternally
    open fun getFile(fileSpec: FileSpec, callback: (dsResponse: DSResponse, data: String, dsRequest: DSRequest) -> Unit): Unit = definedExternally
    open fun hasFile(fileSpec: String, callback: (dsResponse: DSResponse, data: Boolean, dsRequest: DSRequest) -> Unit): Unit = definedExternally
    open fun hasFile(fileSpec: FileSpec, callback: (dsResponse: DSResponse, data: Boolean, dsRequest: DSRequest) -> Unit): Unit = definedExternally
    open fun listFiles(criteria: Any?, callback: Any?): Unit = definedExternally
    open fun saveFile(fileSpec: String, contents: String, callback: Any? = definedExternally /* null */): Unit = definedExternally
    open fun saveFile(fileSpec: FileSpec, contents: String, callback: Any? = definedExternally /* null */): Unit = definedExternally
    open fun renameFile(oldFileSpec: String, newFileSpec: String, callback: Any? = definedExternally /* null */): Unit = definedExternally
    open fun renameFile(oldFileSpec: String, newFileSpec: FileSpec, callback: Any? = definedExternally /* null */): Unit = definedExternally
    open fun renameFile(oldFileSpec: FileSpec, newFileSpec: String, callback: Any? = definedExternally /* null */): Unit = definedExternally
    open fun renameFile(oldFileSpec: FileSpec, newFileSpec: FileSpec, callback: Any? = definedExternally /* null */): Unit = definedExternally
    open fun removeFile(fileSpec: String, callback: Any? = definedExternally /* null */): Unit = definedExternally
    open fun removeFile(fileSpec: FileSpec, callback: Any? = definedExternally /* null */): Unit = definedExternally
    open fun listFileVersions(fileSpec: String, callback: Any?): Unit = definedExternally
    open fun listFileVersions(fileSpec: FileSpec, callback: Any?): Unit = definedExternally
    open fun getFileVersion(fileSpec: String, version: Date, callback: (dsResponse: DSResponse, data: String, dsRequest: DSRequest) -> Unit): Unit = definedExternally
    open fun getFileVersion(fileSpec: FileSpec, version: Date, callback: (dsResponse: DSResponse, data: String, dsRequest: DSRequest) -> Unit): Unit = definedExternally
    open fun hasFileVersion(fileSpec: String, version: Date, callback: (dsResponse: DSResponse, data: Boolean, dsRequest: DSRequest) -> Unit): Unit = definedExternally
    open fun hasFileVersion(fileSpec: FileSpec, version: Date, callback: (dsResponse: DSResponse, data: Boolean, dsRequest: DSRequest) -> Unit): Unit = definedExternally
    open fun removeFileVersion(fileSpec: String, version: Date, callback: Any? = definedExternally /* null */): Unit = definedExternally
    open fun removeFileVersion(fileSpec: FileSpec, version: Date, callback: Any? = definedExternally /* null */): Unit = definedExternally
    open fun execute(dsRequest: DSRequest): Unit = definedExternally
    open fun useOfflineResponse(dsRequest: DSRequest, dsResponse: DSResponse): Boolean = definedExternally
    open fun handleError(response: DSResponse, request: DSRequest): Boolean = definedExternally
    open fun getField(fieldName: String): DataSourceField = definedExternally
    open fun getFieldForDataPath(dataPath: String): DataSourceField = definedExternally
    open fun getDisplayValue(fieldName: String, value: Any): Any = definedExternally
    open fun getFieldNames(excludeHidden: Boolean): Array<String> = definedExternally
    open fun getPrimaryKeyFields(): Record = definedExternally
    open fun getPrimaryKeyFieldNames(): Array<String> = definedExternally
    open fun getPrimaryKeyField(): DataSourceField = definedExternally
    open fun getPrimaryKeyFieldName(): String = definedExternally
    open fun getAutoTitle(identifier: String): String = definedExternally
    open fun getCacheData(): Array<Any?> = definedExternally
    open fun getClientOnlyResponse(request: DSRequest, serverData: Array<Any?>): DSResponse = definedExternally
    open fun applyFilter(data: Array<Any?>, criteria: Any?, requestProperties: DSRequest? = definedExternally /* null */, startPos: Number? = definedExternally /* null */, endPos: Number? = definedExternally /* null */): Array<Any> = definedExternally
    open fun fieldMatchesFilter(fieldValue: Any, filterValue: Any, requestProperties: DSRequest? = definedExternally /* null */): Boolean = definedExternally
    open fun supportsTextMatchStyle(textMatchStyle: String /* "startsWith" */): Unit = definedExternally
    open fun supportsTextMatchStyle(textMatchStyle: String /* "exact" */): Unit = definedExternally
    open fun supportsTextMatchStyle(textMatchStyle: String /* "exactCase" */): Unit = definedExternally
    open fun supportsTextMatchStyle(textMatchStyle: String /* "substring" */): Unit = definedExternally
    open fun compareCriteria(newCriteria: Any?, oldCriteria: Any?, requestProperties: DSRequest? = definedExternally /* null */, policy: String? = definedExternally /* null */): Number = definedExternally
    open fun getFieldCriterion(criterion: Any?, fieldName: String): Any? = definedExternally
    open fun compareDates(date1: Date, date2: Date, fieldName: String): Number = definedExternally
    open fun recordsAreEqual(record1: Any, record2: Any): Boolean = definedExternally
    open fun convertDataSourceCriteria(criteria: Any?, textMatchStyle: String? /* "startsWith" */ = definedExternally /* null */): AdvancedCriteria = definedExternally
    open fun convertDataSourceCriteria(criteria: Any?, textMatchStyle: String? /* "exact" */ = definedExternally /* null */): AdvancedCriteria = definedExternally
    open fun convertDataSourceCriteria(criteria: Any?, textMatchStyle: String? /* "exactCase" */ = definedExternally /* null */): AdvancedCriteria = definedExternally
    open fun convertDataSourceCriteria(criteria: Any?, textMatchStyle: String? /* "substring" */ = definedExternally /* null */): AdvancedCriteria = definedExternally
    open fun supportsAdvancedCriteria(): Boolean = definedExternally
    open fun addSearchOperator(operator: Operator, types: Array<dynamic /* String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "datetime" */ | String /* "enum" */ | String /* "intEnum" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ | String /* "any" */ | String /* "custom" */ | String /* "modifier" */ | String /* "modifierTimestamp" */ | String /* "creator" */ | String /* "creatorTimestamp" */ | String /* "password" */ | String /* "ntext" */ | String /* "localeInt" */ | String /* "localeFloat" */ | String /* "localeCurrency" */ | String /* "phoneNumber" */ */>? = definedExternally /* null */): Unit = definedExternally
    open fun getSearchOperator(operatorId: dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */): Operator = definedExternally
    open fun getTypeOperators(typeName: dynamic /* String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "datetime" */ | String /* "enum" */ | String /* "intEnum" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ | String /* "any" */ | String /* "custom" */ | String /* "modifier" */ | String /* "modifierTimestamp" */ | String /* "creator" */ | String /* "creatorTimestamp" */ | String /* "password" */ | String /* "ntext" */ | String /* "localeInt" */ | String /* "localeFloat" */ | String /* "localeCurrency" */ | String /* "phoneNumber" */ | String */ = definedExternally /* null */): Array<dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */> = definedExternally
    open fun setTypeOperators(typeName: dynamic /* String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "datetime" */ | String /* "enum" */ | String /* "intEnum" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ | String /* "any" */ | String /* "custom" */ | String /* "modifier" */ | String /* "modifierTimestamp" */ | String /* "creator" */ | String /* "creatorTimestamp" */ | String /* "password" */ | String /* "ntext" */ | String /* "localeInt" */ | String /* "localeFloat" */ | String /* "localeCurrency" */ | String /* "phoneNumber" */ | String */, operators: Array<dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */>): Unit = definedExternally
    open fun getFieldOperators(field: String): Array<dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */> = definedExternally
    open fun getFieldOperators(field: DataSourceField): Array<dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */> = definedExternally
    open fun getFieldOperatorMap(field: String, includeHidden: Boolean? = definedExternally /* null */, valueType: dynamic /* String? /* "none" */ | String? /* "custom" */ | String? /* "fieldType" */ | String? /* "fieldName" */ | String? /* "criteria" */ | String? /* "valueRange" */ | String? /* "valueSet" */ */ = definedExternally /* null */, omitValueType: Boolean? = definedExternally /* null */): Any? = definedExternally
    open fun getFieldOperatorMap(field: DataSourceField, includeHidden: Boolean? = definedExternally /* null */, valueType: dynamic /* String? /* "none" */ | String? /* "custom" */ | String? /* "fieldType" */ | String? /* "fieldName" */ | String? /* "criteria" */ | String? /* "valueRange" */ | String? /* "valueSet" */ */ = definedExternally /* null */, omitValueType: Boolean? = definedExternally /* null */): Any? = definedExternally
    open fun getTypeOperatorMap(type: dynamic /* String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "datetime" */ | String /* "enum" */ | String /* "intEnum" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ | String /* "any" */ | String /* "custom" */ | String /* "modifier" */ | String /* "modifierTimestamp" */ | String /* "creator" */ | String /* "creatorTimestamp" */ | String /* "password" */ | String /* "ntext" */ | String /* "localeInt" */ | String /* "localeFloat" */ | String /* "localeCurrency" */ | String /* "phoneNumber" */ */ = definedExternally /* null */, includeHidden: Boolean? = definedExternally /* null */, valueType: String? /* "none" */ = definedExternally /* null */, omitValueType: Boolean? = definedExternally /* null */): Any? = definedExternally
    open fun getTypeOperatorMap(type: dynamic /* String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "datetime" */ | String /* "enum" */ | String /* "intEnum" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ | String /* "any" */ | String /* "custom" */ | String /* "modifier" */ | String /* "modifierTimestamp" */ | String /* "creator" */ | String /* "creatorTimestamp" */ | String /* "password" */ | String /* "ntext" */ | String /* "localeInt" */ | String /* "localeFloat" */ | String /* "localeCurrency" */ | String /* "phoneNumber" */ */ = definedExternally /* null */, includeHidden: Boolean? = definedExternally /* null */, valueType: String? /* "custom" */ = definedExternally /* null */, omitValueType: Boolean? = definedExternally /* null */): Any? = definedExternally
    open fun getTypeOperatorMap(type: dynamic /* String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "datetime" */ | String /* "enum" */ | String /* "intEnum" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ | String /* "any" */ | String /* "custom" */ | String /* "modifier" */ | String /* "modifierTimestamp" */ | String /* "creator" */ | String /* "creatorTimestamp" */ | String /* "password" */ | String /* "ntext" */ | String /* "localeInt" */ | String /* "localeFloat" */ | String /* "localeCurrency" */ | String /* "phoneNumber" */ */ = definedExternally /* null */, includeHidden: Boolean? = definedExternally /* null */, valueType: String? /* "fieldType" */ = definedExternally /* null */, omitValueType: Boolean? = definedExternally /* null */): Any? = definedExternally
    open fun getTypeOperatorMap(type: dynamic /* String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "datetime" */ | String /* "enum" */ | String /* "intEnum" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ | String /* "any" */ | String /* "custom" */ | String /* "modifier" */ | String /* "modifierTimestamp" */ | String /* "creator" */ | String /* "creatorTimestamp" */ | String /* "password" */ | String /* "ntext" */ | String /* "localeInt" */ | String /* "localeFloat" */ | String /* "localeCurrency" */ | String /* "phoneNumber" */ */ = definedExternally /* null */, includeHidden: Boolean? = definedExternally /* null */, valueType: String? /* "fieldName" */ = definedExternally /* null */, omitValueType: Boolean? = definedExternally /* null */): Any? = definedExternally
    open fun getTypeOperatorMap(type: dynamic /* String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "datetime" */ | String /* "enum" */ | String /* "intEnum" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ | String /* "any" */ | String /* "custom" */ | String /* "modifier" */ | String /* "modifierTimestamp" */ | String /* "creator" */ | String /* "creatorTimestamp" */ | String /* "password" */ | String /* "ntext" */ | String /* "localeInt" */ | String /* "localeFloat" */ | String /* "localeCurrency" */ | String /* "phoneNumber" */ */ = definedExternally /* null */, includeHidden: Boolean? = definedExternally /* null */, valueType: String? /* "criteria" */ = definedExternally /* null */, omitValueType: Boolean? = definedExternally /* null */): Any? = definedExternally
    open fun getTypeOperatorMap(type: dynamic /* String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "datetime" */ | String /* "enum" */ | String /* "intEnum" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ | String /* "any" */ | String /* "custom" */ | String /* "modifier" */ | String /* "modifierTimestamp" */ | String /* "creator" */ | String /* "creatorTimestamp" */ | String /* "password" */ | String /* "ntext" */ | String /* "localeInt" */ | String /* "localeFloat" */ | String /* "localeCurrency" */ | String /* "phoneNumber" */ */ = definedExternally /* null */, includeHidden: Boolean? = definedExternally /* null */, valueType: String? /* "valueRange" */ = definedExternally /* null */, omitValueType: Boolean? = definedExternally /* null */): Any? = definedExternally
    open fun getTypeOperatorMap(type: dynamic /* String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "datetime" */ | String /* "enum" */ | String /* "intEnum" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ | String /* "any" */ | String /* "custom" */ | String /* "modifier" */ | String /* "modifierTimestamp" */ | String /* "creator" */ | String /* "creatorTimestamp" */ | String /* "password" */ | String /* "ntext" */ | String /* "localeInt" */ | String /* "localeFloat" */ | String /* "localeCurrency" */ | String /* "phoneNumber" */ */ = definedExternally /* null */, includeHidden: Boolean? = definedExternally /* null */, valueType: String? /* "valueSet" */ = definedExternally /* null */, omitValueType: Boolean? = definedExternally /* null */): Any? = definedExternally
    open fun recordsAsText(records: Array<Any?>, settings: TextExportSettings? = definedExternally /* null */): String = definedExternally
    open fun recordsFromText(text: String, settings: TextImportSettings? = definedExternally /* null */): Array<Any?> = definedExternally
    open fun evaluateCriterion(record: Record, criterion: Criterion): Boolean = definedExternally
    open fun splitCriteria(criteria: Any?, fields: Array<String>): Any? = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DataSource = definedExternally
        var loaderURL: String = definedExternally
        var defaultStringInBrowser: Boolean = definedExternally
        var serializeTimeAsDatetime: Boolean = definedExternally
        var offlineMessage: String = definedExternally
        var maxFileSizeExceededMessage: String = definedExternally
        var requiredFileMessage: String = definedExternally
        var deepCloneOnEdit: Boolean = definedExternally
        var deepCloneNonFieldValuesOnEdit: Boolean = definedExternally
        fun getDataSource(ID: String): DataSource = definedExternally
        fun get(ID: String): DataSource = definedExternally
        fun getFieldValue(field: FormItem, record: Record, dataPath: String, component: Canvas, reason: String): Any = definedExternally
        fun getFieldValue(field: DataSourceField, record: Record, dataPath: String, component: Canvas, reason: String): Any = definedExternally
        fun getFieldValue(field: ListGridField, record: Record, dataPath: String, component: Canvas, reason: String): Any = definedExternally
        fun getFieldValue(field: DetailViewerField, record: Record, dataPath: String, component: Canvas, reason: String): Any = definedExternally
        fun saveValueViaDataPath(field: FormItem, dataPath: String, value: Any, values: Record, reason: String): Unit = definedExternally
        fun saveValueViaDataPath(field: DataSourceField, dataPath: String, value: Any, values: Record, reason: String): Unit = definedExternally
        fun saveValueViaDataPath(field: ListGridField, dataPath: String, value: Any, values: Record, reason: String): Unit = definedExternally
        fun saveValueViaDataPath(field: DetailViewerField, dataPath: String, value: Any, values: Record, reason: String): Unit = definedExternally
        fun clearValueAtDataPath(field: FormItem, dataPath: String, values: Record): Unit = definedExternally
        fun clearValueAtDataPath(field: DataSourceField, dataPath: String, values: Record): Unit = definedExternally
        fun clearValueAtDataPath(field: ListGridField, dataPath: String, values: Record): Unit = definedExternally
        fun clearValueAtDataPath(field: DetailViewerField, dataPath: String, values: Record): Unit = definedExternally
        fun makeFileSpec(path: String): FileSpec = definedExternally
        fun load(dsID: String, callback: Function<*>, forceReload: Boolean? = definedExternally /* null */): Unit = definedExternally
        fun load(dsID: String, callback: Function<*>, forceReload: DSLoadSettings? = definedExternally /* null */): Unit = definedExternally
        fun load(dsID: Array<String>, callback: Function<*>, forceReload: Boolean? = definedExternally /* null */): Unit = definedExternally
        fun load(dsID: Array<String>, callback: Function<*>, forceReload: DSLoadSettings? = definedExternally /* null */): Unit = definedExternally
        fun loadWithParents(dsID: String, callback: Function<*>, forceReload: Boolean? = definedExternally /* null */): Unit = definedExternally
        fun loadWithParents(dsID: String, callback: Function<*>, forceReload: DSLoadSettings? = definedExternally /* null */): Unit = definedExternally
        fun loadWithParents(dsID: Array<String>, callback: Function<*>, forceReload: Boolean? = definedExternally /* null */): Unit = definedExternally
        fun loadWithParents(dsID: Array<String>, callback: Function<*>, forceReload: DSLoadSettings? = definedExternally /* null */): Unit = definedExternally
        fun getSortBy(sortSpecifiers: Array<Any?>): Array<String> = definedExternally
        fun getSortSpecifiers(sortBy: Array<String>): Array<String> = definedExternally
        fun copyCriteria(criteria: Any?): Any? = definedExternally
        fun isFlatCriteria(criteria: AdvancedCriteria): Boolean = definedExternally
        fun flattenCriteria(criteria: AdvancedCriteria): AdvancedCriteria = definedExternally
        fun canFlattenCriteria(criteria: AdvancedCriteria): Boolean = definedExternally
        fun getAdvancedCriteriaDescription(criteria: AdvancedCriteria, dataSource: DataSource): String = definedExternally
        fun getAdvancedCriteriaDescription(criteria: Criterion, dataSource: DataSource): String = definedExternally
        fun getLoaderURL(): String = definedExternally
        fun setLoaderURL(url: String): Unit = definedExternally
        fun addSearchOperator(operator: Operator): Unit = definedExternally
        fun setTypeOperators(typeName: dynamic /* String | String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "datetime" */ | String /* "enum" */ | String /* "intEnum" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ | String /* "any" */ | String /* "custom" */ | String /* "modifier" */ | String /* "modifierTimestamp" */ | String /* "creator" */ | String /* "creatorTimestamp" */ | String /* "password" */ | String /* "ntext" */ | String /* "localeInt" */ | String /* "localeFloat" */ | String /* "localeCurrency" */ | String /* "phoneNumber" */ */, operators: Array<dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */>): Unit = definedExternally
        fun getAutoTitle(identifier: String): String = definedExternally
        fun convertCriteria(criteria: Any?, textMatchStyle: String? /* "startsWith" */ = definedExternally /* null */): AdvancedCriteria = definedExternally
        fun convertCriteria(criteria: Any?, textMatchStyle: String? /* "exact" */ = definedExternally /* null */): AdvancedCriteria = definedExternally
        fun convertCriteria(criteria: Any?, textMatchStyle: String? /* "exactCase" */ = definedExternally /* null */): AdvancedCriteria = definedExternally
        fun convertCriteria(criteria: Any?, textMatchStyle: String? /* "substring" */ = definedExternally /* null */): AdvancedCriteria = definedExternally
        fun combineCriteria(criteria1: Any?, criteria2: Any?, outerOperator: String? /* "and" */ = definedExternally /* null */, textMatchStyle: String? /* "startsWith" */ = definedExternally /* null */): Any? = definedExternally
        fun combineCriteria(criteria1: Any?, criteria2: Any?, outerOperator: String? /* "and" */ = definedExternally /* null */, textMatchStyle: String? /* "exact" */ = definedExternally /* null */): Any? = definedExternally
        fun combineCriteria(criteria1: Any?, criteria2: Any?, outerOperator: String? /* "and" */ = definedExternally /* null */, textMatchStyle: String? /* "exactCase" */ = definedExternally /* null */): Any? = definedExternally
        fun combineCriteria(criteria1: Any?, criteria2: Any?, outerOperator: String? /* "and" */ = definedExternally /* null */, textMatchStyle: String? /* "substring" */ = definedExternally /* null */): Any? = definedExternally
        fun combineCriteria(criteria1: Any?, criteria2: Any?, outerOperator: String? /* "or" */ = definedExternally /* null */, textMatchStyle: String? /* "startsWith" */ = definedExternally /* null */): Any? = definedExternally
        fun combineCriteria(criteria1: Any?, criteria2: Any?, outerOperator: String? /* "or" */ = definedExternally /* null */, textMatchStyle: String? /* "exact" */ = definedExternally /* null */): Any? = definedExternally
        fun combineCriteria(criteria1: Any?, criteria2: Any?, outerOperator: String? /* "or" */ = definedExternally /* null */, textMatchStyle: String? /* "exactCase" */ = definedExternally /* null */): Any? = definedExternally
        fun combineCriteria(criteria1: Any?, criteria2: Any?, outerOperator: String? /* "or" */ = definedExternally /* null */, textMatchStyle: String? /* "substring" */ = definedExternally /* null */): Any? = definedExternally
        fun applyRecordSummaryFunction(summaryFunction: String /* "title" */, record: Any, fields: Array<Any?>, summaryField: DataSourceField): Any = definedExternally
        fun applyRecordSummaryFunction(summaryFunction: String /* "sum" */, record: Any, fields: Array<Any?>, summaryField: DataSourceField): Any = definedExternally
        fun applyRecordSummaryFunction(summaryFunction: String /* "avg" */, record: Any, fields: Array<Any?>, summaryField: DataSourceField): Any = definedExternally
        fun applyRecordSummaryFunction(summaryFunction: String /* "max" */, record: Any, fields: Array<Any?>, summaryField: DataSourceField): Any = definedExternally
        fun applyRecordSummaryFunction(summaryFunction: String /* "min" */, record: Any, fields: Array<Any?>, summaryField: DataSourceField): Any = definedExternally
        fun applyRecordSummaryFunction(summaryFunction: String /* "multiplier" */, record: Any, fields: Array<Any?>, summaryField: DataSourceField): Any = definedExternally
        fun applyRecordSummaryFunction(summaryFunction: String /* "count" */, record: Any, fields: Array<Any?>, summaryField: DataSourceField): Any = definedExternally
        fun applyRecordSummaryFunction(summaryFunction: String /* "first" */, record: Any, fields: Array<Any?>, summaryField: DataSourceField): Any = definedExternally
        fun applyRecordSummaryFunction(summaryFunction: String /* "concat" */, record: Any, fields: Array<Any?>, summaryField: DataSourceField): Any = definedExternally
        fun registerRecordSummaryFunction(methodName: String, summaryFunction: String): Unit = definedExternally
        fun registerRecordSummaryFunction(methodName: String, summaryFunction: Function<*>): Unit = definedExternally
        fun exportClientData(data: Array<Any?>, requestProperties: DSRequest, callback: Any?): Unit = definedExternally
        fun getSimpleErrors(dsResponse: DSResponse): Any = definedExternally
        fun load(dsID: String, callback: Function<*>): Unit = definedExternally
        fun load(dsID: Array<String>, callback: Function<*>): Unit = definedExternally
        fun loadWithParents(dsID: String, callback: Function<*>): Unit = definedExternally
        fun loadWithParents(dsID: Array<String>, callback: Function<*>): Unit = definedExternally
        fun convertCriteria(criteria: Any?): AdvancedCriteria = definedExternally
        fun combineCriteria(criteria1: Any?, criteria2: Any?): Any? = definedExternally
    }
    open fun convertDataSourceCriteria(criteria: Any?): AdvancedCriteria = definedExternally
    open fun getTypeOperatorMap(): Any? = definedExternally
}
external open class HiliteEditor : VLayout {
    open var fieldList: ListGrid = definedExternally
    open var availableFieldsColumnTitle: String = definedExternally
    open var hiliteIcons: Array<String> = definedExternally
    open var hiliteRule: HiliteRule = definedExternally
    open var addAdvancedRuleButton: StatefulCanvas = definedExternally
    open var addAdvancedRuleButtonTitle: String = definedExternally
    open var saveButton: StatefulCanvas = definedExternally
    open var saveButtonTitle: String = definedExternally
    open var cancelButton: StatefulCanvas = definedExternally
    open var cancelButtonTitle: String = definedExternally
    open var callback: Any? = definedExternally
    open fun removeRule(hiliteRule: HiliteRule): Unit = definedExternally
    open fun clearHilites(): Unit = definedExternally
    open fun setHilites(hilites: Array<Any?>): Unit = definedExternally
    open fun saveHilites(callback: Any?): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): HiliteEditor = definedExternally
    }
}
external open class DataSourceField {
    open var fkTableCode: String = definedExternally
    open var fkColumnCode: String = definedExternally
    open var columnCode: String = definedExternally
    open var name: String = definedExternally
    open var type: dynamic /* String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "datetime" */ | String /* "enum" */ | String /* "intEnum" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ | String /* "any" */ | String /* "custom" */ | String /* "modifier" */ | String /* "modifierTimestamp" */ | String /* "creator" */ | String /* "creatorTimestamp" */ | String /* "password" */ | String /* "ntext" */ | String /* "localeInt" */ | String /* "localeFloat" */ | String /* "localeCurrency" */ | String /* "phoneNumber" */ */ = definedExternally
    open var mimeType: String = definedExternally
    open var required: Boolean = definedExternally
    open var requiredMessage: String = definedExternally
    open var autoGenerated: Boolean = definedExternally
    open var nillable: Boolean = definedExternally
    open var valueMap: Any? = definedExternally
    open var valueMapEnum: String = definedExternally
    open var validators: Array<Any?> = definedExternally
    open var length: Number = definedExternally
    open var valueXPath: String = definedExternally
    open var valueWriteXPath: String = definedExternally
    open var getFieldValue: dynamic /* GetFieldValueCallback */ = definedExternally
    open var lenientXPath: Boolean = definedExternally
    open var title: String = definedExternally
    open var escapeHTML: Boolean = definedExternally
    open var canView: Boolean = definedExternally
    open var canEdit: Boolean = definedExternally
    open var canSave: Boolean = definedExternally
    open var canFilter: Boolean = definedExternally
    open var editorType: String = definedExternally
    open var readOnlyEditorType: String = definedExternally
    open var filterEditorType: String = definedExternally
    open var displayFormat: dynamic /* String /* "toString" */ | String /* "toLocaleString" */ | String /* "toUSShortDate" */ | String /* "toUSShortDatetime" */ | String /* "toEuropeanShortDate" */ | String /* "toEuropeanShortDatetime" */ | String /* "toJapanShortDate" */ | String /* "toJapanShortDatetime" */ | String /* "toSerializeableDate" */ | String /* "toDateStamp" */ */ = definedExternally
    open var dateFormatter: dynamic /* String /* "toString" */ | String /* "toLocaleString" */ | String /* "toUSShortDate" */ | String /* "toUSShortDatetime" */ | String /* "toEuropeanShortDate" */ | String /* "toEuropeanShortDatetime" */ | String /* "toJapanShortDate" */ | String /* "toJapanShortDatetime" */ | String /* "toSerializeableDate" */ | String /* "toDateStamp" */ */ = definedExternally
    open var timeFormatter: dynamic /* String /* "toTime" */ | String /* "to24HourTime" */ | String /* "toPaddedTime" */ | String /* "toPadded24HourTime" */ | String /* "toShortTime" */ | String /* "toShort24HourTime" */ | String /* "toShortPaddedTime" */ | String /* "toShortPadded24HourTime" */ */ = definedExternally
    open var decimalPrecision: Number = definedExternally
    open var decimalPad: Number = definedExternally
    open var precision: Number = definedExternally
    open var hidden: Boolean = definedExternally
    open var ignore: Boolean = definedExternally
    open var detail: Boolean = definedExternally
    open var excludeFromState: Boolean = definedExternally
    open var emptyDisplayValue: String = definedExternally
    open var primaryKey: Boolean = definedExternally
    open var foreignKey: String = definedExternally
    open var childrenProperty: Boolean = definedExternally
    open var rootValue: Any = definedExternally
    open var sequenceName: String = definedExternally
    open var implicitSequence: Boolean = definedExternally
    open var includeFrom: String = definedExternally
    open var includeVia: String = definedExternally
    open var relatedTableAlias: String = definedExternally
    open var displayField: String = definedExternally
    open var useLocalDisplayFieldValue: Boolean = definedExternally
    open var foreignDisplayField: String = definedExternally
    open var joinType: dynamic /* String /* "inner" */ | String /* "outer" */ */ = definedExternally
    open var summaryFunction: dynamic /* String /* "title" */ | String /* "sum" */ | String /* "avg" */ | String /* "max" */ | String /* "min" */ | String /* "multiplier" */ | String /* "count" */ | String /* "first" */ | String /* "concat" */ */ = definedExternally
    open var summaryValueTitle: String = definedExternally
    open var xmlAttribute: Boolean = definedExternally
    open var childTagName: String = definedExternally
    open var propertiesOnly: Boolean = definedExternally
    open var inapplicable: Boolean = definedExternally
    open var group: String = definedExternally
    open var multiple: Boolean = definedExternally
    open var multipleValueSeparator: String = definedExternally
    open var multipleStorage: dynamic /* String /* "none" */ | String /* "json" */ | String /* "simpleString" */ */ = definedExternally
    open var multipleStorageSeparator: String = definedExternally
    open var javaClass: String = definedExternally
    open var javaCollectionClass: String = definedExternally
    open var javaKeyClass: String = definedExternally
    open var exportTitle: String = definedExternally
    open var canExport: Boolean = definedExternally
    open var uploadFieldName: String = definedExternally
    open var showFileInline: Boolean = definedExternally
    open var imageWidth: dynamic /* String | Number */ = definedExternally
    open var imageHeight: dynamic /* String | Number */ = definedExternally
    open var imageSize: dynamic /* String | Number */ = definedExternally
    open var viewRequiresAuthentication: Boolean = definedExternally
    open var editRequiresAuthentication: Boolean = definedExternally
    open var initRequiresAuthentication: Boolean = definedExternally
    open var updateRequiresAuthentication: Boolean = definedExternally
    open var viewRequiresRole: String = definedExternally
    open var editRequiresRole: String = definedExternally
    open var initRequiresRole: String = definedExternally
    open var updateRequiresRole: String = definedExternally
    open var viewRequires: String = definedExternally
    open var editRequires: String = definedExternally
    open var initRequires: String = definedExternally
    open var updateRequires: String = definedExternally
    open var creatorOverrides: Boolean = definedExternally
    open var audit: Boolean = definedExternally
    open var customSQL: Boolean = definedExternally
    open var customSelectExpression: String = definedExternally
    open var customUpdateExpression: String = definedExternally
    open var customInsertExpression: String = definedExternally
    open var customCriteriaExpression: String = definedExternally
    open var autoQuoteCustomExpressions: Boolean = definedExternally
    open var nativeName: String = definedExternally
    open var tableName: String = definedExternally
    open var exportForceText: Boolean = definedExternally
    open var importStrategy: dynamic /* String /* "auto" */ | String /* "key" */ | String /* "display" */ */ = definedExternally
    open var sqlStorageStrategy: String = definedExternally
    open var sqlDateFormat: String = definedExternally
    open var storeMilliseconds: Boolean = definedExternally
    open var sqlTrueValue: String = definedExternally
    open var sqlFalseValue: String = definedExternally
    open var nullReplacementValue: Any = definedExternally
    open var stringInBrowser: Boolean = definedExternally
    open var sortByField: String = definedExternally
    open var ignoreTextMatchStyle: Boolean = definedExternally
    open var canSortClientOnly: Boolean = definedExternally
    open var storeWithHash: dynamic /* String /* "MD5" */ | String /* "SHA" */ | String /* "bcrypt" */ */ = definedExternally
    open var maxFileSize: Number = definedExternally
    open var encodeInResponse: Boolean = definedExternally
    open var format: String = definedExternally
    open var exportFormat: String = definedExternally
    open var includeSummaryFunction: dynamic /* String /* "title" */ | String /* "sum" */ | String /* "avg" */ | String /* "max" */ | String /* "min" */ | String /* "multiplier" */ | String /* "count" */ | String /* "first" */ | String /* "concat" */ */ = definedExternally
    open var joinPrefix: String = definedExternally
    open var joinString: String = definedExternally
    open var joinSuffix: String = definedExternally
    open var allowClientRequestedSummaries: Boolean = definedExternally
    open var deepCloneOnEdit: Boolean = definedExternally
    open var validOperators: Array<dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */> = definedExternally
}
external open class XMLSyntaxHiliter : SyntaxHiliter {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): XMLSyntaxHiliter = definedExternally
    }
}
external open class SummaryConfiguration {
    open var badFormulaResultValue: String = definedExternally
    open var invalidSummaryValue: String = definedExternally
}
external open class ButtonItemEditProxy : FormItemEditProxy {
//    override fun getInlineEditText(): Unit = definedExternally
//    override fun setInlineEditText(newValue: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ButtonItemEditProxy = definedExternally
    }
}
external open class Progressbar : StretchImg {
    open var percentDone: Number = definedExternally
    open var length: dynamic /* String | Number */ = definedExternally
    open var breadth: Number = definedExternally
//    override var vertical: Boolean = definedExternally
//    override var src: String = definedExternally
//    override var editProxyConstructor: String = definedExternally
    open fun setPercentDone(newPercent: Number): Unit = definedExternally
    open fun percentChanged(): Unit = definedExternally
    open fun getLength(): Number = definedExternally
    open fun getBreadth(): Number = definedExternally
    open fun setLength(newLength: Number): Unit = definedExternally
    open fun setBreadth(newBreadth: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Progressbar = definedExternally
    }
}
external open class MultiFilePicker : VStack {
    open var showInWindow: Boolean = definedExternally
    open var minUploadFields: Number = definedExternally
    open var maxUploadFields: Number = definedExternally
    open var title: String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): MultiFilePicker = definedExternally
    }
}
external open class StatefulCanvas : Canvas {
    open var title: String = definedExternally
    open var ignoreRTL: Boolean = definedExternally
    open var redrawOnStateChange: Boolean = definedExternally
    open var selected: Boolean = definedExternally
    open var state: dynamic /* String /* "" */ | String /* "Down" */ | String /* "Over" */ | String /* "Disabled" */ */ = definedExternally
    open var showRollOver: Boolean = definedExternally
    open var showFocus: Boolean = definedExternally
    open var showFocused: Boolean = definedExternally
    open var showFocusedAsOver: Boolean = definedExternally
    open var showDown: Boolean = definedExternally
    open var showDisabled: Boolean = definedExternally
    open var actionType: dynamic /* String /* "radio" */ | String /* "button" */ | String /* "checkbox" */ */ = definedExternally
    open var radioGroup: String = definedExternally
    open var baseStyle: String = definedExternally
    open var align: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var valign: dynamic /* String /* "top" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
    open var autoFit: Boolean = definedExternally
    open var icon: String = definedExternally
    open var iconSize: Number = definedExternally
    open var iconWidth: Number = definedExternally
    open var iconHeight: Number = definedExternally
    open var iconStyle: String = definedExternally
    open var iconOrientation: String = definedExternally
    open var iconSpacing: Number = definedExternally
    open var showDisabledIcon: Boolean = definedExternally
    open var showRollOverIcon: Boolean = definedExternally
    open var showDownIcon: Boolean = definedExternally
    open var showSelectedIcon: Boolean = definedExternally
    open var showFocusedIcon: Boolean = definedExternally
    open var showRTLIcon: Boolean = definedExternally
    open var showOverCanvas: Boolean = definedExternally
    open var overCanvas: Canvas = definedExternally
    open var overCanvasConstructor: String = definedExternally
    open var overCanvasDefaults: Canvas = definedExternally
//    override var editProxyConstructor: String = definedExternally
    open fun setIgnoreRTL(ignoreRTL: Boolean): Unit = definedExternally
    open fun setBaseStyle(style: String): Unit = definedExternally
    open fun setState(newState: String /* "" */): Unit = definedExternally
    open fun setState(newState: String /* "Down" */): Unit = definedExternally
    open fun setState(newState: String /* "Over" */): Unit = definedExternally
    open fun setState(newState: String /* "Disabled" */): Unit = definedExternally
    open fun getState(): dynamic /* String /* "" */ | String /* "Down" */ | String /* "Over" */ | String /* "Disabled" */ */ = definedExternally
    open fun setSelected(newIsSelected: Boolean): Unit = definedExternally
    open fun select(): Unit = definedExternally
    open fun deselect(): Unit = definedExternally
    open fun isSelected(): Boolean = definedExternally
    open fun getActionType(): Unit = definedExternally
    open fun setActionType(): Unit = definedExternally
    open fun addToRadioGroup(groupID: String): Unit = definedExternally
    open fun removeFromRadioGroup(groupID: String? = definedExternally /* null */): Unit = definedExternally
//    override fun setDisabled(disabled: Boolean): Unit = definedExternally
    open fun getStateSuffix(): String = definedExternally
    open fun setIconOrientation(orientation: String): Unit = definedExternally
    open fun setAutoFit(autoFit: Boolean): Unit = definedExternally
    open fun getTitle(): String = definedExternally
    open fun setTitle(newTitle: String): Unit = definedExternally
    open fun setIcon(icon: String): Unit = definedExternally
    open fun setIconStyle(iconStyle: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): StatefulCanvas = definedExternally
        var STATE_UP: String = definedExternally
        var STATE_DOWN: String = definedExternally
        var STATE_OVER: String = definedExternally
        var STATE_DISABLED: String = definedExternally
        var BUTTON: String = definedExternally
        var CHECKBOX: String = definedExternally
        var RADIO: String = definedExternally
        var FOCUSED: String = definedExternally
        var SELECTED: String = definedExternally
        var UNSELECTED: String = definedExternally
    }
}
external open class RangeSlider : Canvas {
    open var startThumb: Snapbar = definedExternally
    open var endThumb: Snapbar = definedExternally
    open var track: Canvas = definedExternally
    open var scrollbar: Scrollbar = definedExternally
    open var vertical: Boolean = definedExternally
    open var minValue: Number = definedExternally
    open var maxValue: Number = definedExternally
    open var startValue: Number = definedExternally
    open var endValue: Number = definedExternally
    open var baseStyle: String = definedExternally
    open fun changed(startValue: Number, endValue: Number, isDragging: Boolean): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): RangeSlider = definedExternally
    }
}
external open class SpacerItem : FormItem {
//    override var showTitle: Boolean = definedExternally
//    override var width: Number = definedExternally
//    override var height: Number = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SpacerItem = definedExternally
    }
}
external open class CheckboxItemEditProxy : FormItemEditProxy {
//    override fun getInlineEditText(): Unit = definedExternally
//    override fun setInlineEditText(newValue: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): CheckboxItemEditProxy = definedExternally
    }
}
external open class RPCManager : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): RPCManager = definedExternally
        var defaultTimeout: Number = definedExternally
        var defaultPrompt: String = definedExternally
        var timeoutErrorMessage: String = definedExternally
        var removeDataPrompt: String = definedExternally
        var saveDataPrompt: String = definedExternally
        var validateDataPrompt: String = definedExternally
        var promptStyle: dynamic /* String /* "dialog" */ | String /* "cursor" */ */ = definedExternally
        var useCursorTracker: Boolean = definedExternally
        var promptCursor: String = definedExternally
        var fetchDataPrompt: String = definedExternally
        var showPrompt: Boolean = definedExternally
        var promptDelay: Number = definedExternally
        var actionURL: String = definedExternally
        var screenLoaderURL: String = definedExternally
        var ALL_GLOBALS: String = definedExternally
        var useXmlHttpRequest: Boolean = definedExternally
        var defaultTransport: dynamic /* String /* "xmlHttpRequest" */ | String /* "scriptInclude" */ | String /* "hiddenFrame" */ */ = definedExternally
        var useHttpProxy: Boolean = definedExternally
        var httpProxyURL: String = definedExternally
        var credentialsURL: String = definedExternally
        var allowCrossDomainCalls: Boolean = definedExternally
        var loginStatusCodeMarker: String = definedExternally
        var loginRequiredMarker: String = definedExternally
        var loginSuccessMarker: String = definedExternally
        var maxLoginAttemptsExceededMarker: String = definedExternally
        var allowIE9Leak: Boolean = definedExternally
        fun setActionURL(actionURL: String): Unit = definedExternally
        fun queueSent(requests: Array<Any?>): Unit = definedExternally
        fun xmlHttpRequestAvailable(): Boolean = definedExternally
        fun send(data: Any, callback: ((response: RPCResponse, rawData: Any, request: RPCRequest) -> Unit)? = definedExternally /* null */, requestParams: Any? = definedExternally /* null */): Unit = definedExternally
        fun sendProxied(request: RPCRequest): Unit = definedExternally
        fun sendRequest(rpcRequest: RPCRequest): Unit = definedExternally
        fun startQueue(shouldQueue: Boolean? = definedExternally /* null */): Boolean = definedExternally
        fun hasCurrentTransactionQueued(): Boolean = definedExternally
        fun getCurrentTransactionId(): Number = definedExternally
        fun getQueueTransactionId(): Number = definedExternally
        fun cancelQueue(transactionNum: Number? = definedExternally /* null */): Unit = definedExternally
        fun clearTransaction(transactionNum: Number): Unit = definedExternally
        fun suspendTransaction(transaction: Any? = definedExternally /* null */): Unit = definedExternally
        fun suspendTransaction(transaction: String? = definedExternally /* null */): Unit = definedExternally
        fun resendTransaction(transactionNum: Number? = definedExternally /* null */): Unit = definedExternally
        fun sendQueue(callback: ((response: Array<Any?>) -> Unit)? = definedExternally /* null */): Unit = definedExternally
        fun handleError(response: Any, request: Any): Unit = definedExternally
        fun runDefaultErrorHandling(response: DSResponse, request: DSRequest): Unit = definedExternally
        fun handleTransportError(transactionNum: Number, status: Number, httpResponseCode: Number, httpResponseText: Text): Boolean = definedExternally
        fun loginRequired(transactionNum: Number, rpcRequest: RPCRequest, rpcResponse: RPCResponse): Unit = definedExternally
        fun exportContent(canvas: String, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
        fun exportContent(canvas: Canvas, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
        fun exportContent(canvas: Array<Any?>, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
        fun exportImage(svgString: String, requestProperties: DSRequest? = definedExternally /* null */, callback: ((imageData: String) -> Unit)? = definedExternally /* null */): Unit = definedExternally
        fun loadScreen(screenName: String, callback: (screen: Canvas? /*= null*/, rpcResponse: RPCResponse? /*= null*/, suppressedGlobals: Map<Any>? /*= null*/) -> Unit, globals: Array<String>? = definedExternally /* null */, locale: String? = definedExternally /* null */, requestProperties: RPCRequest? = definedExternally /* null */): Unit = definedExternally
        fun createScreen(screenName: String, globals: Array<String>? = definedExternally /* null */): Canvas = definedExternally
        fun cacheScreens(screenName: Array<String>, callback: Function<*>, locale: String? = definedExternally /* null */, requestProperties: RPCRequest? = definedExternally /* null */): Unit = definedExternally
        fun requestsArePending(): Boolean = definedExternally
        fun suspendTransaction(): Unit = definedExternally
    }
}
external open class FloatItem : TextItem {
    open fun getValueAsFloat(): Number = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): FloatItem = definedExternally
    }
}
external open class GridEditProxy : LayoutEditProxy {
    open var saveFieldOrder: Boolean = definedExternally
    open var saveFieldVisibility: Boolean = definedExternally
    open var saveFieldFrozenState: Boolean = definedExternally
    open var saveSort: Boolean = definedExternally
    open var saveGroupBy: Boolean = definedExternally
    open var saveFilterCriteria: Boolean = definedExternally
    open var canEditHilites: Boolean = definedExternally
    open var canAddFormulaFields: Boolean = definedExternally
    open var canAddSummaryFields: Boolean = definedExternally
    open var canGroupBy: Boolean = definedExternally
    open var canReorderFields: Boolean = definedExternally
    open var canResizeFields: Boolean = definedExternally
    open var generateEditableHilites: Boolean = definedExternally
    open var generateEditableFormulas: Boolean = definedExternally
    open var generateEditableSummaries: Boolean = definedExternally
//    override fun getInlineEditText(): Unit = definedExternally
//    override fun setInlineEditText(newValue: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): GridEditProxy = definedExternally
    }
}
external open class FieldPickerField : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): FieldPickerField = definedExternally
        var frozenTitle: String = definedExternally
        var precisionTitle: String = definedExternally
        var decimalPrecisionTitle: String = definedExternally
        var decimalPadTitle: String = definedExternally
        var alignTitle: String = definedExternally
        var cellAlignTitle: String = definedExternally
    }
}
external open class IconMenuButton : IconButton {
    open var menu: Menu = definedExternally
    open var menuAnimationEffect: String = definedExternally
    open fun showMenu(): Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): IconMenuButton = definedExternally
    }
}
external open class StateTask : Task {
    open var value: Any = definedExternally
    open var type: dynamic /* String /* "string" */ | String /* "boolean" */ | String /* "integer" */ | String /* "decimal" */ | String /* "array" */ | String /* "record" */ */ = definedExternally
    open var failureElement: String = definedExternally
//    override var outputExpression: String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): StateTask = definedExternally
    }
}
external open class CellRecord {
    open var enabled: Boolean = definedExternally
}
external open class DrawPane : Canvas {
    open var drawingType: dynamic /* String /* "svg" */ | String /* "bitmap" */ | String /* "vml" */ */ = definedExternally
    open var drawingWidth: Number = definedExternally
    open var drawingHeight: Number = definedExternally
//    override var canDragScroll: Boolean = definedExternally
    open var rotation: Number = definedExternally
    open var zoomLevel: Number = definedExternally
    open var translate: Array<Number> = definedExternally
    open var gradients: Array<Any?> = definedExternally
    open var drawItems: Array<Any?> = definedExternally
//    override var editProxyConstructor: String = definedExternally
    open fun getDrawingX(): Number = definedExternally
    open fun getDrawingY(): Number = definedExternally
    open fun getDrawingPoint(): Point = definedExternally
    open fun erase(): Unit = definedExternally
    open fun destroyItems(): Unit = definedExternally
    open fun addDrawItem(item: DrawItem, autoDraw: Boolean): Unit = definedExternally
    open fun getDataURL(callback: ((dataURL: String) -> Unit)? = definedExternally /* null */, format: String? /* "any" */ = definedExternally /* null */): String = definedExternally
    open fun getDataURL(callback: ((dataURL: String) -> Unit)? = definedExternally /* null */, format: String? /* "png" */ = definedExternally /* null */): String = definedExternally
    open fun getSvgString(): String = definedExternally
//    override fun getPrintHTML(printProperties: PrintProperties?, callback: Any?): String = definedExternally
    open fun refreshNow(): Unit = definedExternally
    open fun getBitmap(): DOMElement = definedExternally
    open fun drawStart(): Unit = definedExternally
    open fun drawEnd(): Unit = definedExternally
    open fun setZoomLevel(zoomLevel: Number): Unit = definedExternally
    open fun zoom(zoomLevel: Number): Unit = definedExternally
    open fun setRotation(degrees: Number): Unit = definedExternally
    open fun rotate(degrees: Number): Unit = definedExternally
    open fun addGradient(gradient: Gradient): String = definedExternally
    open fun getGradient(gradientID: String): Gradient = definedExternally
    open fun removeGradient(gradientID: String): Unit = definedExternally
    open fun createSimpleGradient(id: String, simple: SimpleGradient): String = definedExternally
    open fun createLinearGradient(id: String, linearGradient: LinearGradient): String = definedExternally
    open fun createRadialGradient(id: String, radialGradient: RadialGradient): String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DrawPane = definedExternally
        fun scaleAndCenter(width: Number, height: Number, xc: Number, yc: Number, points: Array<Any?>): Unit = definedExternally
        fun bezier(p1: Number, cp1: Number, cp2: Number, p2: Number, t: Number): Number = definedExternally
        fun bezierExtrema(p1: Number, cp1: Number, cp2: Number, p2: Number): Array<Number> = definedExternally
        fun getBezierBoundingBox(p1: Point, cp1: Point, cp2: Point, p2: Point): Array<Number> = definedExternally
        fun scaleAndCenterBezier(width: Number, height: Number, xc: Number, yc: Number, startPoint: Point, endPoint: Point, controlPoint1: Point, controlPoint2: Point): Unit = definedExternally
        fun getRegularPolygonPoints(n: Number, width: Number, height: Number, xc: Number, yc: Number, startAngle: Number): Array<Any?> = definedExternally
        fun getPolygonPoints(width: Number, height: Number, xc: Number, yc: Number, angles: Array<Number>): Array<Any?> = definedExternally
    }
    open fun getDataURL(): String = definedExternally
}
external open class StretchItem {
    open var width: dynamic /* String | Number */ = definedExternally
    open var height: dynamic /* String | Number */ = definedExternally
    open var name: String = definedExternally
    open var src: String = definedExternally
}
external open class UserSummary {
    open var text: String = definedExternally
    open var summaryVars: Map<Any> = definedExternally
}
external open class PasswordItem : TextItem {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): PasswordItem = definedExternally
    }
}
external open class RPCRequest {
    open var data: dynamic /* String | Any? | Record */ = definedExternally
    open var actionURL: String = definedExternally
    open var useHttpProxy: Boolean = definedExternally
    open var httpProxyURL: String = definedExternally
    open var withCredentials: Boolean = definedExternally
    open var promptStyle: dynamic /* String /* "dialog" */ | String /* "cursor" */ */ = definedExternally
    open var useCursorTracker: Boolean = definedExternally
    open var promptCursor: String = definedExternally
    open var prompt: String = definedExternally
    open var showPrompt: Boolean = definedExternally
    open var promptDelay: Number = definedExternally
    open var callback: dynamic /*RPCCallback*/ = definedExternally
    open var clientContext: Any = definedExternally
    open var willHandleError: Boolean = definedExternally
    open var timeout: Number = definedExternally
    open var params: Any = definedExternally
    open var evalResult: Boolean = definedExternally
    open var evalVars: Any = definedExternally
    open var callbackParam: String = definedExternally
    open var suppressAutoDraw: Boolean = definedExternally
    open var serverOutputAsString: Boolean = definedExternally
    open var allowIE9Leak: Boolean = definedExternally
    open var transport: dynamic /* String /* "xmlHttpRequest" */ | String /* "scriptInclude" */ | String /* "hiddenFrame" */ */ = definedExternally
    open var useXmlHttpRequest: Boolean = definedExternally
    open var httpMethod: String = definedExternally
    open var contentType: String = definedExternally
    open var httpHeaders: Any = definedExternally
    open var containsCredentials: Boolean = definedExternally
    open var ignoreTimeout: Boolean = definedExternally
    open var sendNoQueue: Boolean = definedExternally
    open var paramsOnly: Boolean = definedExternally
    open var useSimpleHttp: Boolean = definedExternally
    open var bypassCache: Boolean = definedExternally
    open var omitNullMapValuesInResponse: Boolean = definedExternally
    open var downloadResult: Boolean = definedExternally
    open var downloadToNewWindow: Boolean = definedExternally
    open var mockMode: Boolean = definedExternally
}
external open class ListGridField : DBCField {
    open var exportFieldWidth: Boolean = definedExternally
    open var groupingModes: Any? = definedExternally
    open var groupingMode: String = definedExternally
    open var defaultGroupingMode: String = definedExternally
    open var groupPrecision: Number = definedExternally
    open var groupGranularity: Number = definedExternally
    open var canHilite: Boolean = definedExternally
    open var showHilitesInGroupSummary: Boolean = definedExternally
    open var canGroupBy: Boolean = definedExternally
    open var canSortClientOnly: Boolean = definedExternally
    open var showDefaultContextMenu: Boolean = definedExternally
    open var canExport: Boolean = definedExternally
    open var exportRawValues: Boolean = definedExternally
    open var summaryValue: String = definedExternally
    open var valueIcons: Map<String> = definedExternally
    open var valueIconSize: Number = definedExternally
    open var valueIconWidth: Number = definedExternally
    open var valueIconHeight: Number = definedExternally
    open var valueIconLeftPadding: Number = definedExternally
    open var valueIconRightPadding: Number = definedExternally
    open var editorValueIcons: Map<String> = definedExternally
    open var editorValueIconWidth: Number = definedExternally
    open var editorValueIconHeight: Number = definedExternally
    open var showValueIconOnly: Boolean = definedExternally
    open var suppressValueIcon: Boolean = definedExternally
    open var valueIconOrientation: String = definedExternally
    open var hiliteIconPosition: dynamic /* String /* "before" */ | String /* "after" */ | String /* "replace" */ */ = definedExternally
    open var hiliteIconSize: Number = definedExternally
    open var hiliteIconWidth: Number = definedExternally
    open var hiliteIconHeight: Number = definedExternally
    open var hiliteIconLeftPadding: Number = definedExternally
    open var hiliteIconRightPadding: Number = definedExternally
    open var imageURLPrefix: String = definedExternally
    open var imageURLSuffix: String = definedExternally
    open var editorImageURLPrefix: String = definedExternally
    open var editorImageURLSuffix: String = definedExternally
    open var imageSize: Number = definedExternally
    open var imageWidth: Number = definedExternally
    open var imageHeight: Number = definedExternally
    open var type: dynamic /* String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "datetime" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ | String /* "any" */ | String /* "localeInt" */ | String /* "localeFloat" */ | String /* "localeCurrency" */ | String /* "phoneNumber" */ | String /* "icon" */ | String /* "summary" */ */ = definedExternally
    open var name: String = definedExternally
    open var dataPath: String = definedExternally
    open var title: String = definedExternally
    open var showTitle: Boolean = definedExternally
    open var wrap: Boolean = definedExternally
    open var hoverWrap: Boolean = definedExternally
    open var hoverWidth: Number = definedExternally
    open var target: String = definedExternally
    open var hidden: Boolean = definedExternally
    open var frozen: Boolean = definedExternally
    open var canFreeze: Boolean = definedExternally
    open var autoFreeze: Boolean = definedExternally
    open var canHide: Boolean = definedExternally
    open var canDragResize: Boolean = definedExternally
    open var canReorder: Boolean = definedExternally
    open var ignoreKeyboardClicks: Boolean = definedExternally
    open var excludeFromState: Boolean = definedExternally
    open var showGridSummary: Boolean = definedExternally
    open var showGroupSummary: Boolean = definedExternally
    open var summaryFunction: dynamic /* String /* "title" */ | String /* "sum" */ | String /* "avg" */ | String /* "max" */ | String /* "min" */ | String /* "multiplier" */ | String /* "count" */ | String /* "first" */ | String /* "concat" */ | Array<dynamic /* String /* "title" */ | String /* "sum" */ | String /* "avg" */ | String /* "max" */ | String /* "min" */ | String /* "multiplier" */ | String /* "count" */ | String /* "first" */ | String /* "concat" */ */> */ = definedExternally
    open var summaryValueTitle: String = definedExternally
    open var formatGridSummary: String = definedExternally
    open var formatGroupSummary: String = definedExternally
    open var recordSummaryFunction: dynamic /* String /* "sum" */ | String /* "avg" */ | String /* "max" */ | String /* "min" */ | String /* "multiplier" */ */ = definedExternally
    open var partialSummary: Boolean = definedExternally
    open var includeInRecordSummary: Boolean = definedExternally
    open var includeInRecordSummaryFields: Array<String> = definedExternally
    open var applyAfterSummary: Boolean = definedExternally
    open var icon: String = definedExternally
    open var iconSize: Number = definedExternally
    open var iconWidth: Number = definedExternally
    open var iconHeight: Number = definedExternally
    open var iconOrientation: String = definedExternally
    open var iconSpacing: Number = definedExternally
    open var showDisabledIcon: Boolean = definedExternally
    open var showRollOverIcon: Boolean = definedExternally
    open var showFocusedIcon: Boolean = definedExternally
    open var showDownIcon: Boolean = definedExternally
    open var showSelectedIcon: Boolean = definedExternally
    open var cellIcon: String = definedExternally
    open var showFileInline: Boolean = definedExternally
    open var format: String = definedExternally
    open var exportFormat: String = definedExternally
    open var icons: Array<Any?> = definedExternally
    open var editorIconWidth: Number = definedExternally
    open var editorIconHeight: Number = definedExternally
    open var defaultIconSrc: String = definedExternally
    open var iconVAlign: String = definedExternally
    open var summaryTitle: String = definedExternally
    open var width: dynamic /* String | Number */ = definedExternally
    open var minWidth: Number = definedExternally
    open var maxWidth: Number = definedExternally
    open var align: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var headerBaseStyle: String = definedExternally
    open var spannedHeaderBaseStyle: String = definedExternally
    open var headerTitleStyle: String = definedExternally
    open var headerTitle: String = definedExternally
    open var cellAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var baseStyle: String = definedExternally
    open var canSort: Boolean = definedExternally
    open var sortDirection: dynamic /* String /* "ascending" */ | String /* "descending" */ */ = definedExternally
    open var selectCellTextOnClick: Boolean = definedExternally
    open var canEdit: Boolean = definedExternally
    open var defaultValue: Any = definedExternally
    open var enterKeyEditAction: dynamic /* String /* "done" */ | String /* "nextCell" */ | String /* "nextRow" */ | String /* "nextRowStart" */ */ = definedExternally
    open var escapeKeyEditAction: dynamic /* String /* "done" */ | String /* "cancel" */ | String /* "exit" */ | String /* "ignore" */ */ = definedExternally
    open var editorType: String = definedExternally
    open var editorProperties: FormItem = definedExternally
    open var initialValue: Any = definedExternally
    open var validators: Array<Any?> = definedExternally
    open var validateOnChange: Boolean = definedExternally
    open var required: Boolean = definedExternally
    open var displayFormat: Any = definedExternally
    open var dateFormatter: dynamic /* String /* "toString" */ | String /* "toLocaleString" */ | String /* "toUSShortDate" */ | String /* "toUSShortDatetime" */ | String /* "toEuropeanShortDate" */ | String /* "toEuropeanShortDatetime" */ | String /* "toJapanShortDate" */ | String /* "toJapanShortDatetime" */ | String /* "toSerializeableDate" */ | String /* "toDateStamp" */ */ = definedExternally
    open var timeFormatter: dynamic /* String /* "toTime" */ | String /* "to24HourTime" */ | String /* "toPaddedTime" */ | String /* "toPadded24HourTime" */ | String /* "toShortTime" */ | String /* "toShort24HourTime" */ | String /* "toShortPaddedTime" */ | String /* "toShortPadded24HourTime" */ */ = definedExternally
    open var decimalPrecision: Number = definedExternally
    open var decimalPad: Number = definedExternally
    open var inputFormat: String = definedExternally
    open var isRemoveField: Boolean = definedExternally
    open var canFilter: Boolean = definedExternally
    open var filterEditorValueMap: Any = definedExternally
    open var filterEditorType: String = definedExternally
    open var defaultFilterValue: Any = definedExternally
    open var filterEditorProperties: FormItem = definedExternally
    open var operator: String = definedExternally
    open var filterOnKeypress: Boolean = definedExternally
    open var shouldPrint: Boolean = definedExternally
    open var autoComplete: dynamic /* String /* "none" */ | String /* "native" */ */ = definedExternally
    open var escapeHTML: Boolean = definedExternally
    open var linkText: String = definedExternally
    open var linkTextProperty: String = definedExternally
    open var linkURLPrefix: String = definedExternally
    open var linkURLSuffix: String = definedExternally
    open var valueMap: dynamic /* Any? | Array<String> */ = definedExternally
    open var sortByMappedValue: Boolean = definedExternally
    open var multiple: Boolean = definedExternally
    open var editorValueMap: Any? = definedExternally
    open var emptyCellValue: String = definedExternally
    open var autoFetchDisplayMap: Boolean = definedExternally
    open var displayValueFromRecord: Boolean = definedExternally
    open var optionTextMatchStyle: dynamic /* String /* "startsWith" */ | String /* "exact" */ | String /* "exactCase" */ | String /* "substring" */ */ = definedExternally
    open var optionFilterContext: DSRequest = definedExternally
    open var optionOperationId: String = definedExternally
    open var optionDataSource: String = definedExternally
    open var valueField: String = definedExternally
    open var displayField: String = definedExternally
    open var sortByDisplayField: Boolean = definedExternally
    open var optionCriteria: Any? = definedExternally
    open var includeFrom: String = definedExternally
    open var canAutoFitWidth: Boolean = definedExternally
    open var autoFitWidth: Boolean = definedExternally
    open var defaultWidth: Number = definedExternally
    open var autoFitWidthApproach: dynamic /* String /* "value" */ | String /* "title" */ | String /* "both" */ */ = definedExternally
    open var hiliteHTMLAfterFormat: Boolean = definedExternally
    open var showHover: Boolean = definedExternally
    open var showHoverComponents: Boolean = definedExternally
    open var prompt: String = definedExternally
    open var allowFilterOperators: Boolean = definedExternally
    open var allowFilterExpressions: Boolean = definedExternally
    open var alwaysShowOperatorIcon: Boolean = definedExternally
    open var filterOperator: dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */ = definedExternally
    open var canToggle: Boolean = definedExternally
    open var leaveHeaderMenuButtonSpace: Boolean = definedExternally
    open var hoverDelay: Number = definedExternally
    open var headerHoverDelay: Number = definedExternally
    open var showAlternateStyle: Boolean = definedExternally
    open var userFormula: UserFormula = definedExternally
    open var canEditFormula: Boolean = definedExternally
    open var editorFormula: UserFormula = definedExternally
    open var editorTextFormula: UserSummary = definedExternally
    open var userSummary: UserSummary = definedExternally
    open var canEditSummary: Boolean = definedExternally
    open fun getGroupValue(value: Any, record: ListGridRecord, field: Any, fieldName: String, grid: ListGrid): Any = definedExternally
    open fun getGroupTitle(groupValue: Any, groupNode: GroupNode, field: Any, fieldName: String, grid: ListGrid): Any = definedExternally
    open fun valueIconClick(viewer: ListGrid, record: ListGridRecord, recordNum: Number, field: ListGridField, rawValue: Any, editor: FormItem): Boolean = definedExternally
    open fun getFieldTitle(viewer: ListGrid, fieldNum: Number): String = definedExternally
    open fun showIf(list: ListGrid, field: ListGridField, fieldNum: Number): Boolean = definedExternally
    open fun getAutoFreezePosition(): Number = definedExternally
    open fun getGridSummary(records: Array<Any?>, field: ListGridField, groupSummaries: Array<Any?>? = definedExternally /* null */): Any = definedExternally
    open fun getGroupSummary(records: Array<Any?>, field: ListGridField, groupNode: Any? = definedExternally /* null */): Any = definedExternally
    open fun getRecordSummary(record: ListGridRecord, field: ListGridField, grid: ListGrid): Any = definedExternally
    open fun getSummaryTitle(viewer: ListGrid, field: ListGridField): Unit = definedExternally
    open fun sortNormalizer(recordObject: Any, fieldName: String, context: ListGrid): Any = definedExternally
    open fun defaultDynamicValue(item: FormItem, form: DynamicForm, values: Any): Unit = definedExternally
    open fun editorEnter(record: ListGridRecord, value: Any, rowNum: Number, colNum: Number, grid: ListGrid): Unit = definedExternally
    open fun editorExit(editCompletionEvent: dynamic /* String /* "click" */ | String /* "doubleClick" */ | String /* "click_outside" */ | String /* "enter" */ | String /* "escape" */ | String /* "arrow_up" */ | String /* "arrow_down" */ | String /* "tab" */ | String /* "shift_tab" */ | String /* "field_change" */ | String /* "programmatic" */ */, record: ListGridRecord, newValue: Any, rowNum: Number, colNum: Number, grid: ListGrid): Boolean = definedExternally
    open fun cellChanged(record: ListGridRecord, newValue: Any, oldValue: Any, rowNum: Number, colNum: Number, grid: ListGrid): Unit = definedExternally
    open fun recordClick(viewer: ListGrid, record: ListGridRecord, recordNum: Number, field: ListGridField, fieldNum: Number, value: Any, rawValue: Any): Boolean = definedExternally
    open fun recordDoubleClick(viewer: ListGrid, record: ListGridRecord, recordNum: Number, field: ListGridField, fieldNum: Number, value: Any, rawValue: Any): Boolean = definedExternally
    open fun getCellValue(viewer: ListGrid, record: Any, recordNum: Number, field: ListGridField, fieldNum: Number, value: Any): Any = definedExternally
    open fun formatCellValue(value: Any, record: ListGridRecord, rowNum: Number, colNum: Number, grid: ListGrid): String = definedExternally
    open fun formatInactiveCellValue(value: Any, record: ListGridRecord, rowNum: Number, colNum: Number, grid: ListGrid): String = definedExternally
    open fun formatEditorValue(value: Any, record: ListGridRecord, rowNum: Number, colNum: Number, grid: ListGrid): Any = definedExternally
    open fun parseEditorValue(value: Any, record: Any, rowNum: Number, colNum: Number, grid: ListGrid): Any = definedExternally
    open fun change(form: DynamicForm, item: FormItem, value: Any, oldValue: Any): Boolean = definedExternally
    open fun changed(form: DynamicForm, item: FormItem, value: Any): Unit = definedExternally
    open fun hoverHTML(record: ListGridRecord, value: Any, rowNum: Number, colNum: Number, grid: ListGrid): String = definedExternally
    open fun getEditorValueMap(values: Any, field: ListGridField, grid: ListGrid): Any? = definedExternally
}
external open class DrawPath : DrawItem {
//    override var knobs: Array<dynamic /* String /* "resize" */ | String /* "move" */ | String /* "startPoint" */ | String /* "endPoint" */ | String /* "controlPoint1" */ | String /* "controlPoint2" */ | String /* "rotate" */ */> = definedExternally
//    override var showTitleLabelBackground: Boolean = definedExternally
    open var points: Array<Any?> = definedExternally
//    override fun getBoundingBox(): Array<Number> = definedExternally
//    override fun getCenter(): Point = definedExternally
    open fun moveFirstPointTo(left: Number, top: Number): Unit = definedExternally
//    override fun moveBy(dX: Number, dY: Number): Unit = definedExternally
//    override fun resizeTo(width: Number, height: Number): Unit = definedExternally
//    override fun resizeBy(dX: Number, dY: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DrawPath = definedExternally
    }
}
external open class MultiSortPanel : Layout {
    open var fields: Array<Any?> = definedExternally
    open var addLevelButtonTitle: String = definedExternally
    open var deleteLevelButtonTitle: String = definedExternally
    open var copyLevelButtonTitle: String = definedExternally
    open var invalidListPrompt: String = definedExternally
    open var propertyFieldTitle: String = definedExternally
    open var directionFieldTitle: String = definedExternally
    open var ascendingTitle: String = definedExternally
    open var descendingTitle: String = definedExternally
    open var firstSortLevelTitle: String = definedExternally
    open var otherSortLevelTitle: String = definedExternally
    open var addLevelButton: IButton = definedExternally
    open var deleteLevelButton: IButton = definedExternally
    open var copyLevelButton: IButton = definedExternally
    open var levelUpButtonTitle: String = definedExternally
    open var levelUpButton: ImgButton = definedExternally
    open var levelDownButtonTitle: String = definedExternally
    open var levelDownButton: ImgButton = definedExternally
    open var optionsGrid: ListGrid = definedExternally
    open var initialSort: Array<Any?> = definedExternally
    open var maxLevels: Number = definedExternally
    open fun getNumLevels(): Number = definedExternally
    open fun getSortLevel(levelNum: Number): SortSpecifier = definedExternally
    open fun getSort(): Array<Any?> = definedExternally
    open fun validate(): Boolean = definedExternally
    open fun sortChanged(sortLevels: Array<Any?>): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): MultiSortPanel = definedExternally
    }
}
external open class ScriptTask : Task {
    open var isAsync: Boolean = definedExternally
    open fun getInputData(): Any = definedExternally
    open fun setOutputData(taskOutput: Any): Unit = definedExternally
    open fun getInputRecord(): Record = definedExternally
    open fun setOutputRecord(outputRecord: Record): Unit = definedExternally
    open fun execute(input: Any, inputRecord: Record): Any = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ScriptTask = definedExternally
    }
}
external open class DrawShapeCommand {
    open var type: dynamic /* String /* "close" */ | String /* "moveto" */ | String /* "lineto" */ | String /* "circleto" */ */ = definedExternally
    open var args: Array<Any> = definedExternally
}
external open class NumberUtil : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): NumberUtil = definedExternally
        var decimalSymbol: String = definedExternally
        var groupingSymbol: String = definedExternally
        var negativeSymbol: String = definedExternally
        var currencySymbol: String = definedExternally
        var negativeFormat: Number = definedExternally
        var groupingFormat: Number = definedExternally
        fun stringify(number: Number, digits: Number? = definedExternally /* null */): String = definedExternally
        fun isBetween(number: Number, first: Number? = definedExternally /* null */, second: Number? = definedExternally /* null */, inclusive: Number? = definedExternally /* null */): Boolean = definedExternally
        fun clamp(number: Number, min: Number, max: Number): Number = definedExternally
        fun toCurrencyString(number: Number, currencyChar: String? = definedExternally /* null */, decimalChar: String? = definedExternally /* null */, padDecimal: Boolean? = definedExternally /* null */, currencyCharLast: Boolean? = definedExternally /* null */): String = definedExternally
        fun toLocalizedString(number: Number, decimalPrecision: Number? = definedExternally /* null */, decimalSymbol: String? = definedExternally /* null */, groupingSymbol: String? = definedExternally /* null */, negativeSymbol: String? = definedExternally /* null */): String = definedExternally
        fun toUSString(number: Number, decimalPrecision: Number? = definedExternally /* null */): String = definedExternally
        fun toUSCurrencyString(number: Number, decimalPrecision: Number? = definedExternally /* null */): String = definedExternally
        fun parseInt(string: String): Number = definedExternally
        fun parseFloat(string: String): Number = definedExternally
        fun parseIfNumeric(numberOrString: Any): Any = definedExternally
        fun format(number: Number, format: String): String = definedExternally
    }
}
external open class DateGrid : ListGrid {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DateGrid = definedExternally
    }
}
external open class SummaryBuilder : FormulaBuilder {
//    override var builderTypeText: String = definedExternally
//    override var dataSource: dynamic /* String | DataSource */ = definedExternally
//    override var fields: Array<String> = definedExternally
//    override var editMode: Boolean = definedExternally
//    override var field: String = definedExternally
//    override var formulaField: TextItem = definedExternally
//    override var titleField: TextItem = definedExternally
//    override var showHelpIcon: Boolean = definedExternally
//    override var helpIcon: FormItemIcon = definedExternally
//    override var showAutoHideCheckBox: Boolean = definedExternally
//    override var autoHideCheckBox: TextItem = definedExternally
//    override var testRecord: Record = definedExternally
//    override var autoHideCheckBoxLabel: String = definedExternally
    open var helpTextIntro: String = definedExternally
    open fun setSummary(newValue: String): Unit = definedExternally
//    override fun getHelpText(): String = definedExternally
//    override fun fireOnClose(): Unit = definedExternally
//    override fun save(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SummaryBuilder = definedExternally
    }
}
external open class MultiComboBoxItem : CanvasItem {
//    override var shouldSaveValue: Boolean = definedExternally
//    override var optionDataSource: dynamic /* String | DataSource */ = definedExternally
    open var addUnknownValues: Boolean = definedExternally
    open var alwaysExitOnTab: Boolean = definedExternally
    open var autoFetchData: Boolean = definedExternally
//    override var valueMap: dynamic /* Any? | Array<Any> */ = definedExternally
    open var comboBox: ComboBoxItem = definedExternally
    open var comboForm: DynamicForm = definedExternally
//    override var optionOperationId: String = definedExternally
//    override var displayField: String = definedExternally
//    override var valueField: String = definedExternally
    open var valueLayout: Layout = definedExternally
    open var button: IButton = definedExternally
    open var pendingButtonStyle: String = definedExternally
    open var deselectedButtonStyle: String = definedExternally
    open var layoutStyle: dynamic /* String /* "vertical" */ | String /* "horizontal" */ | String /* "flow" */ | String /* "flowReverse" */ | String /* "horizontalReverse" */ | String /* "verticalReverse" */ */ = definedExternally
    open var autoFitButtons: Boolean = definedExternally
    open var comboBoxWidth: Number = definedExternally
    open var useInsertionOrder: Boolean = definedExternally
//    override fun showValue(displayValue: Any, dataValue: Any, form: DynamicForm, item: CanvasItem): Unit = definedExternally
    open fun setLayoutStyle(layoutStyle: String /* "vertical" */): Unit = definedExternally
    open fun setLayoutStyle(layoutStyle: String /* "horizontal" */): Unit = definedExternally
    open fun setLayoutStyle(layoutStyle: String /* "flow" */): Unit = definedExternally
    open fun setLayoutStyle(layoutStyle: String /* "flowReverse" */): Unit = definedExternally
    open fun setLayoutStyle(layoutStyle: String /* "horizontalReverse" */): Unit = definedExternally
    open fun setLayoutStyle(layoutStyle: String /* "verticalReverse" */): Unit = definedExternally
    open fun setAutoFitButtons(autoFitButtons: Boolean): Unit = definedExternally
//    override fun pendingStatusChanged(form: DynamicForm, item: FormItem, pendingStatus: Boolean, newValue: Any, value: Any): Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): MultiComboBoxItem = definedExternally
        var defaultHint: String = definedExternally
    }
}
external open class StretchImg : StatefulCanvas {
    open var vertical: Boolean = definedExternally
    open var capSize: Number = definedExternally
    open var src: String = definedExternally
    open var hSrc: String = definedExternally
    open var vSrc: String = definedExternally
    open var imageType: dynamic /* String /* "center" */ | String /* "tile" */ | String /* "stretch" */ | String /* "normal" */ */ = definedExternally
    open var items: Array<Any?> = definedExternally
//    override var ignoreRTL: Boolean = definedExternally
    open var showGrip: Boolean = definedExternally
    open var gripImgSuffix: String = definedExternally
    open var showDownGrip: Boolean = definedExternally
    open var showRollOverGrip: Boolean = definedExternally
    open var showTitle: Boolean = definedExternally
    open var itemBaseStyle: String = definedExternally
    open fun setState(newState: String, whichPart: String? = definedExternally /* null */): Unit = definedExternally
    open fun setSrc(src: String): Unit = definedExternally
    open fun setItems(items: Array<Any?>): Unit = definedExternally
//    override fun setIgnoreRTL(ignoreRTL: Boolean): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): StretchImg = definedExternally
    }
}
external open class ColorStop {
    open var offset: Number = definedExternally
    open var opacity: Number = definedExternally
    open var color: String = definedExternally
}
external open class ListPropertiesDialog : Window {
//    override var title: String = definedExternally
    open var listPropertiesPane: ListPropertiesPane = definedExternally
    open var applyButtonTitle: String = definedExternally
    open var applyButton: IButton = definedExternally
    open var cancelButtonTitle: String = definedExternally
    open var cancelButton: IButton = definedExternally
    open fun applyClick(listProperties: ListProperties): Unit = definedExternally
    open fun cancelClick(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ListPropertiesDialog = definedExternally
    }
}
external open class Deck : Layout {
    open var panes: Array<Any?> = definedExternally
    open var currentPane: Canvas = definedExternally
    open fun setCurrentPane(pane: String): Unit = definedExternally
    open fun setCurrentPane(pane: Canvas): Unit = definedExternally
    open fun hideCurrentPane(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Deck = definedExternally
    }
}
external open class TileLayout : Canvas {
    open var tiles: Array<Any?> = definedExternally
    open var layoutPolicy: dynamic /* String /* "flow" */ | String /* "fit" */ */ = definedExternally
    open var tileSize: Number = definedExternally
    open var tileWidth: Number = definedExternally
    open var tileHeight: Number = definedExternally
    open var tileMargin: Number = definedExternally
    open var tileHMargin: Number = definedExternally
    open var tileVMargin: Number = definedExternally
    open var layoutMargin: Number = definedExternally
    open var paddingAsLayoutMargin: Boolean = definedExternally
    open var animateTileChange: Boolean = definedExternally
    open var orientation: dynamic /* String /* "vertical" */ | String /* "horizontal" */ */ = definedExternally
    open var tilesPerLine: Number = definedExternally
//    override var overflow: dynamic /* String /* "auto" */ | String /* "visible" */ | String /* "hidden" */ | String /* "scroll" */ | String /* "clip-h" */ | String /* "clip-v" */ */ = definedExternally
    open var expandMargins: Boolean = definedExternally
    open var autoWrapLines: Boolean = definedExternally
    open var dragLine: Canvas = definedExternally
    open var dragDataAction: dynamic /* String /* "none" */ | String /* "move" */ | String /* "copy" */ */ = definedExternally
    open fun getTile(index: Number): Canvas = definedExternally
    open fun addTile(tile: Canvas, index: Number? = definedExternally /* null */): Unit = definedExternally
    open fun removeTile(tileID: String): Boolean = definedExternally
    open fun removeTile(tileID: Number): Boolean = definedExternally
    open fun removeTile(tileID: Canvas): Boolean = definedExternally
    open fun transferDragData(): Array<Any> = definedExternally
    open fun getDragData(source: DataBoundComponent): Array<Any?> = definedExternally
    open fun setTileSize(size: Number): Unit = definedExternally
    open fun setTileWidth(width: Number): Unit = definedExternally
    open fun setTileHeight(height: Number): Unit = definedExternally
    open fun setTilesPerLine(tilesPerLine: Number): Unit = definedExternally
    open fun setTileMargin(margin: Number): Unit = definedExternally
    open fun setTileHMargin(margin: Number): Unit = definedExternally
    open fun setTileVMargin(margin: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): TileLayout = definedExternally
    }
}
external open class DrawPaneEditProxy : CanvasEditProxy {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DrawPaneEditProxy = definedExternally
    }
}
external open class RichTextItem : CanvasItem {
    open var moveFocusOnTab: Boolean = definedExternally
//    override var shouldSaveValue: Boolean = definedExternally
//    override var showTitle: Boolean = definedExternally
//    override var startRow: Boolean = definedExternally
//    override var endRow: Boolean = definedExternally
//    override var colSpan: dynamic /* String | Number */ = definedExternally
    open var controlGroups: Array<String> = definedExternally
    open fun setMoveFocusOnTab(moveFocusOnTab: Boolean): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): RichTextItem = definedExternally
    }
}
external open class AutoFitButton : Button {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): AutoFitButton = definedExternally
    }
}
external open class BooleanItem : FormItem {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): BooleanItem = definedExternally
    }
}
external open class ListGridRecord : Record {
    open var enabled: Boolean = definedExternally
    open var canExpand: Boolean = definedExternally
    open var _canRemove: Boolean = definedExternally
    open var isSeparator: Boolean = definedExternally
    open var customStyle: String = definedExternally
    open var _baseStyle: String = definedExternally
    open var singleCellValue: String = definedExternally
    open var canDrag: Boolean = definedExternally
    open var canAcceptDrop: Boolean = definedExternally
    open var linkText: String = definedExternally
    open var showRollOver: Boolean = definedExternally
    open var embeddedComponent: Canvas = definedExternally
    open var embeddedComponentPosition: dynamic /* String /* "expand" */ | String /* "within" */ */ = definedExternally
    open var embeddedComponentFields: Array<String> = definedExternally
    open var canSelect: Boolean = definedExternally
    open var _canEdit: Boolean = definedExternally
    open var backgroundComponent: Canvas = definedExternally
    open var detailDS: DataSource = definedExternally
    open var includeInSummary: Boolean = definedExternally
    open var isGridSummary: Boolean = definedExternally
    open var isGroupSummary: Boolean = definedExternally
}
external open class ToolStrip : Layout {
//    override var members: Array<Any?> = definedExternally
//    override var height: Number = definedExternally
    open var verticalStyleName: String = definedExternally
//    override var vertical: Boolean = definedExternally
//    override var resizeBarClass: String = definedExternally
//    override var resizeBarSize: Number = definedExternally
    open var separatorClass: String = definedExternally
    open var separatorSize: Number = definedExternally
    open var showGroupTitle: Boolean = definedExternally
    open var groupTitleAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var groupTitleOrientation: dynamic /* String /* "top" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
    open var formWrapper: DynamicForm = definedExternally
    open var formWrapperConstructor: String = definedExternally
    open var formWrapperDefaults: Any = definedExternally
    open var formWrapperProperties: Any = definedExternally
    open fun addFormItem(formItem: FormItem, formProperties: DynamicForm? = definedExternally /* null */, position: Number? = definedExternally /* null */): DynamicForm = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ToolStrip = definedExternally
    }
}
external open class DynamicForm : Canvas, DataBoundComponent {
    open var items: Array<Any?> = definedExternally
//    override var fields: Array<Any?> = definedExternally
    open var values: Any = definedExternally
    open var itemLayout: String = definedExternally
    open var numCols: Number = definedExternally
    open var fixedColWidths: Boolean = definedExternally
    open var colWidths: Array<Any> = definedExternally
    open var minColWidth: Number = definedExternally
    open var cellPadding: Number = definedExternally
    open var cellBorder: Number = definedExternally
    open var sectionVisibilityMode: dynamic /* String /* "multiple" */ | String /* "mutex" */ */ = definedExternally
//    override var showDetailFields: Boolean = definedExternally
    open var longTextEditorThreshold: Number = definedExternally
    open var longTextEditorType: String = definedExternally
    open var dateFormatter: dynamic /* String /* "toString" */ | String /* "toLocaleString" */ | String /* "toUSShortDate" */ | String /* "toUSShortDatetime" */ | String /* "toEuropeanShortDate" */ | String /* "toEuropeanShortDatetime" */ | String /* "toJapanShortDate" */ | String /* "toJapanShortDatetime" */ | String /* "toSerializeableDate" */ | String /* "toDateStamp" */ */ = definedExternally
    open var timeFormatter: dynamic /* String /* "toTime" */ | String /* "to24HourTime" */ | String /* "toPaddedTime" */ | String /* "toPadded24HourTime" */ | String /* "toShortTime" */ | String /* "toShort24HourTime" */ | String /* "toShortPaddedTime" */ | String /* "toShortPadded24HourTime" */ */ = definedExternally
    open var datetimeFormatter: dynamic /* String /* "toString" */ | String /* "toLocaleString" */ | String /* "toUSShortDate" */ | String /* "toUSShortDatetime" */ | String /* "toEuropeanShortDate" */ | String /* "toEuropeanShortDatetime" */ | String /* "toJapanShortDate" */ | String /* "toJapanShortDatetime" */ | String /* "toSerializeableDate" */ | String /* "toDateStamp" */ */ = definedExternally
//    override var valuesManager: dynamic /* String | ValuesManager */ = definedExternally
    open var titleOrientation: dynamic /* String /* "left" */ | String /* "top" */ | String /* "right" */ */ = definedExternally
    open var titlePrefix: String = definedExternally
    open var rightTitlePrefix: String = definedExternally
    open var titleSuffix: String = definedExternally
    open var rightTitleSuffix: String = definedExternally
    open var titleWidth: dynamic /* Number | String /* "*" */ */ = definedExternally
    open var clipItemTitles: Boolean = definedExternally
    open var wrapItemTitles: Boolean = definedExternally
    open var showInlineErrors: Boolean = definedExternally
    open var showErrorIcons: Boolean = definedExternally
    open var showErrorText: Boolean = definedExternally
    open var showErrorStyle: Boolean = definedExternally
    open var errorOrientation: String = definedExternally
    open var errorItemProperties: Any = definedExternally
    open var errorItemCellStyle: String = definedExternally
    open var errorsPreamble: String = definedExternally
    open var showTitlesWithErrorMessages: Boolean = definedExternally
    open var hiliteRequiredFields: Boolean = definedExternally
    open var requiredTitlePrefix: String = definedExternally
    open var requiredRightTitlePrefix: String = definedExternally
    open var requiredTitleSuffix: String = definedExternally
    open var requiredRightTitleSuffix: String = definedExternally
    open var requiredMessage: String = definedExternally
    open var canEdit: Boolean = definedExternally
    open var readOnlyDisplay: dynamic /* String /* "static" */ | String /* "readOnly" */ | String /* "disabled" */ */ = definedExternally
    open var readOnlyTextBoxStyle: String = definedExternally
    open var clipStaticValue: Boolean = definedExternally
    open var showDeletions: Boolean = definedExternally
    open var wrapHintText: Boolean = definedExternally
    open var minHintWidth: Number = definedExternally
    open var itemHoverDelay: Number = definedExternally
    open var itemHoverWidth: Any = definedExternally
    open var itemHoverHeight: Any = definedExternally
    open var itemHoverAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var itemHoverVAlign: Any = definedExternally
    open var itemHoverStyle: String = definedExternally
    open var itemHoverOpacity: Number = definedExternally
    open var showOldValueInHover: Boolean = definedExternally
    open var originalValueMessage: String = definedExternally
    open var errors: Any = definedExternally
    open var validateOnChange: Boolean = definedExternally
    open var rejectInvalidValueOnChange: Boolean = definedExternally
//    override var unknownErrorMessage: String = definedExternally
//    override var noErrorDetailsMessage: String = definedExternally
    open var validateOnExit: Boolean = definedExternally
    open var implicitSave: Boolean = definedExternally
    open var implicitSaveOnBlur: Boolean = definedExternally
    open var implicitSaveDelay: Number = definedExternally
    open var stopOnError: Boolean = definedExternally
    open var synchronousValidation: Boolean = definedExternally
    open var autoFocus: Boolean = definedExternally
    open var autoFocusOnError: Boolean = definedExternally
    open var selectOnFocus: Boolean = definedExternally
    open var selectOnClick: Boolean = definedExternally
//    override var canFocus: Boolean = definedExternally
    open var autoComplete: dynamic /* String /* "none" */ | String /* "native" */ */ = definedExternally
    open var browserSpellCheck: Boolean = definedExternally
    open var validationURL: String = definedExternally
    open var disableValidation: Boolean = definedExternally
    open var cancelParamName: String = definedExternally
    open var cancelParamValue: String = definedExternally
    open var action: String = definedExternally
    open var target: String = definedExternally
    open var method: dynamic /* String /* "GET" */ | String /* "POST" */ */ = definedExternally
    open var encoding: dynamic /* String /* "normal" */ | String /* "multipart" */ */ = definedExternally
    open var canSubmit: Boolean = definedExternally
    open var saveOnEnter: Boolean = definedExternally
    open var revertValueKey: KeyIdentifier = definedExternally
    open var operator: dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */ = definedExternally
    open var showComplexFieldsRecursively: Boolean = definedExternally
    open var nestedEditorType: String = definedExternally
    open var nestedListEditorType: String = definedExternally
    open var showPending: Boolean = definedExternally
//    override var dataFetchMode: dynamic /* String /* "basic" */ | String /* "paged" */ | String /* "local" */ */ = definedExternally
//    override var dataSource: dynamic /* String | DataSource */ = definedExternally
    open var defaultSearchOperator: dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */ = definedExternally
    open var canTabToIcons: Boolean = definedExternally
    open var storeDisplayValues: Boolean = definedExternally
    open var canTabToSectionHeaders: Boolean = definedExternally
    open var titleAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var formSubmitFailedWarning: String = definedExternally
//    override var canEditFieldAttribute: String = definedExternally
    open var allowExpressions: Boolean = definedExternally
    open var suppressBrowserClearIcons: Boolean = definedExternally
//    override var autoFetchData: Boolean = definedExternally
    open var autoFetchTextMatchStyle: dynamic /* String /* "startsWith" */ | String /* "exact" */ | String /* "exactCase" */ | String /* "substring" */ */ = definedExternally
//    override var initialCriteria: Any? = definedExternally
    open var userTask: UserTask = definedExternally
    open var suppressValidationErrorCallback: Boolean = definedExternally
    open var saveOperationType: dynamic /* String /* "custom" */ | String /* "fetch" */ | String /* "add" */ | String /* "update" */ | String /* "remove" */ | String /* "validate" */ | String /* "viewFile" */ | String /* "downloadFile" */ | String /* "storeTestData" */ | String /* "clientExport" */ | String /* "getFile" */ | String /* "hasFile" */ | String /* "listFiles" */ | String /* "removeFile" */ | String /* "saveFile" */ | String /* "renameFile" */ | String /* "getFileVersion" */ | String /* "hasFileVersion" */ | String /* "listFileVersions" */ | String /* "removeFileVersion" */ */ = definedExternally
//    override var editProxyConstructor: String = definedExternally
    open fun setValuesManager(valuesManager: String): Unit = definedExternally
//    open fun setValuesManager(valuesManager: ValuesManager): Unit = definedExternally
    open fun getEditorType(field: Any, values: Any? = definedExternally /* null */): String = definedExternally
    open fun setItems(itemList: Array<Any?>): Unit = definedExternally
    open fun setFields(itemList: Array<Any?>): Unit = definedExternally
    open fun getFields(): Array<Any?> = definedExternally
    open fun getItems(): Array<Any?> = definedExternally
    open fun assignItemsTabPositions(): Unit = definedExternally
    open fun sortItemsIntoTabOrder(): Array<Any?> = definedExternally
    open fun setTitleOrientation(orientation: String /* "left" */): Unit = definedExternally
    open fun setTitleOrientation(orientation: String /* "top" */): Unit = definedExternally
    open fun setTitleOrientation(orientation: String /* "right" */): Unit = definedExternally
    open fun setValues(newData: Any? = definedExternally /* null */): Unit = definedExternally
    open fun rememberValues(): Any = definedExternally
    open fun resetValues(): Unit = definedExternally
    open fun clearValues(): Unit = definedExternally
    open fun valuesHaveChanged(): Boolean = definedExternally
    open fun getOldValues(): Any = definedExternally
    open fun getChangedValues(): Any = definedExternally
    open fun getValues(): Any = definedExternally
    open fun fetchRelatedData(record: ListGridRecord, schema: String, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun fetchRelatedData(record: ListGridRecord, schema: Canvas, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun fetchRelatedData(record: ListGridRecord, schema: DataSource, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun getValuesAsCriteria(advanced: Boolean, textMatchStyle: String? /* "startsWith" */ = definedExternally /* null */): dynamic /* Any? | AdvancedCriteria */ = definedExternally
    open fun getValuesAsCriteria(advanced: Boolean, textMatchStyle: String? /* "exact" */ = definedExternally /* null */): dynamic /* Any? | AdvancedCriteria */ = definedExternally
    open fun getValuesAsCriteria(advanced: Boolean, textMatchStyle: String? /* "exactCase" */ = definedExternally /* null */): dynamic /* Any? | AdvancedCriteria */ = definedExternally
    open fun getValuesAsCriteria(advanced: Boolean, textMatchStyle: String? /* "substring" */ = definedExternally /* null */): dynamic /* Any? | AdvancedCriteria */ = definedExternally
    open fun setValuesAsCriteria(criteria: Criterion): Unit = definedExternally
    open fun getValuesAsAdvancedCriteria(textMatchStyle: String? /* "startsWith" */ = definedExternally /* null */): AdvancedCriteria = definedExternally
    open fun getValuesAsAdvancedCriteria(textMatchStyle: String? /* "exact" */ = definedExternally /* null */): AdvancedCriteria = definedExternally
    open fun getValuesAsAdvancedCriteria(textMatchStyle: String? /* "exactCase" */ = definedExternally /* null */): AdvancedCriteria = definedExternally
    open fun getValuesAsAdvancedCriteria(textMatchStyle: String? /* "substring" */ = definedExternally /* null */): AdvancedCriteria = definedExternally
    open fun getItem(itemName: String): FormItem = definedExternally
    open fun getItem(itemName: Number): FormItem = definedExternally
    open fun getField(itemName: String): FormItem = definedExternally
    open fun getValue(fieldName: String): Any = definedExternally
    open fun setValue(fieldName: String, value: String): Unit = definedExternally
    open fun clearValue(fieldName: String): Unit = definedExternally
    open fun showItem(itemName: String): Unit = definedExternally
    open fun hideItem(itemName: String): Unit = definedExternally
    open fun setValueMap(itemName: String, valueMap: Any?): Unit = definedExternally
    open fun getErrors(): Any = definedExternally
    open fun getFieldErrors(fieldName: String): dynamic /* String | Array<String> */ = definedExternally
    open fun setErrors(errors: Any, showErrors: Boolean): Unit = definedExternally
    open fun setError(itemName: String, errorMessage: String): Unit = definedExternally
    open fun setError(itemName: String, errorMessage: Array<Any>): Unit = definedExternally
    open fun addFieldErrors(fieldName: String, errors: String, show: Boolean): Unit = definedExternally
    open fun addFieldErrors(fieldName: String, errors: Array<String>, show: Boolean): Unit = definedExternally
    open fun setFieldErrors(fieldName: String, errors: String, show: Boolean): Unit = definedExternally
    open fun setFieldErrors(fieldName: String, errors: Array<String>, show: Boolean): Unit = definedExternally
    open fun clearFieldErrors(fieldName: String, show: Boolean): Unit = definedExternally
    open fun clearErrors(show: Boolean): Unit = definedExternally
    open fun hasErrors(): Boolean = definedExternally
    open fun hasFieldErrors(fieldName: String): Boolean = definedExternally
    open fun getErrorsHTML(errors: Any): String = definedExternally
    open fun getItemErrorHTML(item: FormItem, error: String): Unit = definedExternally
    open fun getItemErrorHTML(item: FormItem, error: Array<Any>): Unit = definedExternally
    open fun getTitleOrientation(item: FormItem? = definedExternally /* null */): dynamic /* String /* "left" */ | String /* "top" */ | String /* "right" */ */ = definedExternally
    open fun getTitleAlign(item: FormItem): dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open fun titleClipped(item: FormItem): Boolean = definedExternally
    open fun submitForm(): Unit = definedExternally
    open fun formSubmitFailed(): Unit = definedExternally
    open fun setAction(action: String): Unit = definedExternally
    open fun setTarget(target: String): Unit = definedExternally
    open fun setMethod(method: String /* "GET" */): Unit = definedExternally
    open fun setMethod(method: String /* "POST" */): Unit = definedExternally
    open fun validate(validateHiddenFields: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun valuesAreValid(validateHiddenFields: Boolean, returnErrors: Boolean? = definedExternally /* null */): dynamic /* Boolean | Map<Any> */ = definedExternally
    open fun checkForValidationErrors(callback: (errorMap: Map<Any>) -> Unit, validateHiddenFields: Boolean? = definedExternally /* null */, skipServerValidation: Boolean? = definedExternally /* null */): Map<Any> = definedExternally
    open fun getValidatedValues(): Any = definedExternally
    open fun showErrors(): Unit = definedExternally
    open fun showFieldErrors(fieldName: String): Unit = definedExternally
//    override fun isFocused(): Boolean = definedExternally
    open fun getFocusItem(): FormItem = definedExternally
//    override fun focus(): Unit = definedExternally
    open fun focusInItem(itemName: String): Unit = definedExternally
    open fun focusInItem(itemName: Number): Unit = definedExternally
    open fun focusInItem(itemName: FormItem): Unit = definedExternally
    open fun getEventItem(): FormItem = definedExternally
    open fun getEventItemInfo(): FormItemEventInfo = definedExternally
    open fun itemHoverHTML(item: FormItem): Unit = definedExternally
    open fun titleHoverHTML(item: FormItem): String = definedExternally
    open fun valueHoverHTML(item: FormItem): Unit = definedExternally
    open fun setCanEdit(canEdit: Boolean): Unit = definedExternally
    open fun fieldIsEditable(field: String): Boolean = definedExternally
    open fun fieldIsEditable(field: Number): Boolean = definedExternally
    open fun fieldIsEditable(field: FormItem): Boolean = definedExternally
    open fun setReadOnlyDisplay(appearance: String /* "static" */): Unit = definedExternally
    open fun setReadOnlyDisplay(appearance: String /* "readOnly" */): Unit = definedExternally
    open fun setReadOnlyDisplay(appearance: String /* "disabled" */): Unit = definedExternally
    open fun valuesChanged(): Unit = definedExternally
    open fun itemChanged(item: FormItem, newValue: Any): Unit = definedExternally
    open fun itemChange(item: FormItem, newValue: Any, oldValue: Any): Boolean = definedExternally
    open fun itemKeyPress(item: FormItem, keyName: String, characterValue: Number): Boolean = definedExternally
    open fun showItemContextMenu(item: FormItem): Boolean = definedExternally
    open fun submitValues(values: Any, form: DynamicForm): Unit = definedExternally
    open fun handleHiddenValidationErrors(errors: Any): Boolean = definedExternally
    open fun handleAsyncValidationReply(success: Boolean, errors: Any): Unit = definedExternally
    open fun isPendingAsyncValidation(): Boolean = definedExternally
    open fun editNewRecord(initialValues: Any? = definedExternally /* null */): Unit = definedExternally
    open fun editNewRecord(initialValues: Record? = definedExternally /* null */): Unit = definedExternally
    open fun editRecord(record: Record): Unit = definedExternally
    open fun editSelectedData(selectionComponent: String): Unit = definedExternally
    open fun editSelectedData(selectionComponent: ListGrid): Unit = definedExternally
    open fun validateData(callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Boolean = definedExternally
    open fun reset(): Unit = definedExternally
    open fun cancel(requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun cancelEditing(): Unit = definedExternally
    open fun completeEditing(): Unit = definedExternally
    open fun submit(callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun saveData(callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun isNewRecord(): Boolean = definedExternally
    open fun setSaveOperationType(operationType: dynamic /* String /* "custom" */ | String /* "fetch" */ | String /* "add" */ | String /* "update" */ | String /* "remove" */ | String /* "validate" */ | String /* "viewFile" */ | String /* "downloadFile" */ | String /* "storeTestData" */ | String /* "clientExport" */ | String /* "getFile" */ | String /* "hasFile" */ | String /* "listFiles" */ | String /* "removeFile" */ | String /* "saveFile" */ | String /* "renameFile" */ | String /* "getFileVersion" */ | String /* "hasFileVersion" */ | String /* "listFileVersions" */ | String /* "removeFileVersion" */ */): Unit = definedExternally
    open fun getSaveOperationType(requestProperties: DSRequest? = definedExternally /* null */): dynamic /* String /* "custom" */ | String /* "fetch" */ | String /* "add" */ | String /* "update" */ | String /* "remove" */ | String /* "validate" */ | String /* "viewFile" */ | String /* "downloadFile" */ | String /* "storeTestData" */ | String /* "clientExport" */ | String /* "getFile" */ | String /* "hasFile" */ | String /* "listFiles" */ | String /* "removeFile" */ | String /* "saveFile" */ | String /* "renameFile" */ | String /* "getFileVersion" */ | String /* "hasFileVersion" */ | String /* "listFileVersions" */ | String /* "removeFileVersion" */ */ = definedExternally
    open fun fetchData(criteria: Any? = definedExternally /* null */, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun filterData(criteria: Any? = definedExternally /* null */, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
//    override var deepCloneOnEdit: Boolean = definedExternally
//    override var deepCloneNonFieldValuesOnEdit: Boolean = definedExternally
//    override var dataPageSize: Number = definedExternally
//    override var dataFetchDelay: Number = definedExternally
//    override var useAllDataSourceFields: Boolean = definedExternally
//    override var showHiddenFields: Boolean = definedExternally
//    override var showComplexFields: Boolean = definedExternally
//    override var fetchOperation: String = definedExternally
//    override var updateOperation: String = definedExternally
//    override var addOperation: String = definedExternally
//    override var removeOperation: String = definedExternally
//    override var exportFields: Array<String> = definedExternally
//    override var exportAll: Boolean = definedExternally
//    override var exportIncludeSummaries: Boolean = definedExternally
//    override var dragRecategorize: dynamic /* String /* "never" */ | String /* "always" */ | String /* "checked" */ */ = definedExternally
//    override var preventDuplicates: Boolean = definedExternally
//    override var duplicateDragMessage: String = definedExternally
//    override var showOfflineMessage: Boolean = definedExternally
//    override var offlineMessage: String = definedExternally
//    override var offlineSaveMessage: String = definedExternally
//    override var addDropValues: Boolean = definedExternally
//    override var dropValues: Any = definedExternally
//    override var dataArity: String = definedExternally
//    override var progressiveLoading: Boolean = definedExternally
//    override var useFlatFields: Boolean = definedExternally
//    override var canChangeNonFieldValues: Boolean = definedExternally
//    override var implicitCriteria: Any? = definedExternally
//    override var canEditHilites: Boolean = definedExternally
//    override var hilites: Array<Any?> = definedExternally
//    override var hiliteIcons: Array<String> = definedExternally
//    override var hiliteIconPosition: dynamic /* String /* "before" */ | String /* "after" */ | String /* "replace" */ */ = definedExternally
//    override var hiliteIconSize: Number = definedExternally
//    override var hiliteIconWidth: Number = definedExternally
//    override var hiliteIconHeight: Number = definedExternally
//    override var hiliteIconLeftPadding: Number = definedExternally
//    override var hiliteIconRightPadding: Number = definedExternally
//    override var hiliteProperty: String = definedExternally
//    override var hiliteState: String = definedExternally
//    override var fieldNamingStrategy: dynamic /* String /* "simple" */ | String /* "uuid" */ */ = definedExternally
//    override var editHilitesText: String = definedExternally
//    override var editHilitesDialogTitle: String = definedExternally
//    override var fieldEditorWindowTitle: String = definedExternally
//    override var fieldEditorWindow: Window = definedExternally
//    override var hiliteEditor: HiliteEditor = definedExternally
//    override var dragDataAction: dynamic /* String /* "none" */ | String /* "move" */ | String /* "copy" */ */ = definedExternally
//    override var dragTrackerStyle: String = definedExternally
//    override var badFormulaResultValue: String = definedExternally
//    override var missingSummaryFieldValue: String = definedExternally
//    override var canAddFormulaFields: Boolean = definedExternally
//    override var addFormulaFieldText: String = definedExternally
//    override var editFormulaFieldText: String = definedExternally
//    override var removeFormulaFieldText: String = definedExternally
//    override var canAddSummaryFields: Boolean = definedExternally
//    override var addSummaryFieldText: String = definedExternally
//    override var editSummaryFieldText: String = definedExternally
//    override var removeSummaryFieldText: String = definedExternally
//    override var includeHilitesInSummaryFields: Boolean = definedExternally
//    override var titleField: String = definedExternally
//    override var iconField: String = definedExternally
//    override var infoField: String = definedExternally
//    override var dataField: String = definedExternally
//    override var descriptionField: String = definedExternally
//    override var emptyExportMessage: String = definedExternally
//    override var multiSortDialogProperties: MultiSortDialog = definedExternally
//    override var multiSortDialogDefaults: MultiSortDialog = definedExternally
//    override fun dragComplete(): Unit = definedExternally
//    override fun dropComplete(transferredRecords: Array<Any?>): Unit = definedExternally
//    override fun getDataPathField(dataPath: String): Unit = definedExternally
//    override fun getFieldNum(fieldName: String): Number = definedExternally
//    override fun find(advancedCriteria: AdvancedCriteria): Any = definedExternally
//    override fun findAll(advancedCriteria: AdvancedCriteria): Array<Any> = definedExternally
//    override fun findIndex(advancedCriteria: AdvancedCriteria): Number = definedExternally
//    override fun findNextIndex(startIndex: Number, advancedCriteria: AdvancedCriteria, endIndex: Number?): Number = definedExternally
//    override fun setDataSource(dataSource: String, fields: Array<Any?>?): Unit = definedExternally
//    override fun setDataSource(dataSource: DataSource, fields: Array<Any?>?): Unit = definedExternally
//    override fun exportData(requestProperties: DSRequest?, callback: Any?): Unit = definedExternally
//    override fun getFieldAlignments(): Array<dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */> = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "startsWith" */): Boolean = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "exact" */): Boolean = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "exactCase" */): Boolean = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "substring" */): Boolean = definedExternally
//    override fun findByKey(keyValue: Any): Record = definedExternally
//    override fun selectRecord(record: Number, newState: Boolean?): Unit = definedExternally
//    override fun selectRecord(record: Record, newState: Boolean?): Unit = definedExternally
//    override fun selectSingleRecord(record: Number): Unit = definedExternally
//    override fun selectSingleRecord(record: Record): Unit = definedExternally
//    override fun deselectRecord(record: Number): Unit = definedExternally
//    override fun deselectRecord(record: Record): Unit = definedExternally
//    override fun selectRecords(records: Number, newState: Boolean?): Unit = definedExternally
//    override fun selectRecords(records: Array<Any?>, newState: Boolean?): Unit = definedExternally
//    override fun deselectRecords(records: Number): Unit = definedExternally
//    override fun deselectRecords(records: Array<Any?>): Unit = definedExternally
//    override fun selectAllRecords(): Unit = definedExternally
//    override fun deselectAllRecords(): Unit = definedExternally
//    override fun selectRange(startRow: Number, endRow: Number, newState: Boolean?): Unit = definedExternally
//    override fun deselectRange(startRow: Number, endRow: Number): Unit = definedExternally
//    override fun anySelected(): Boolean = definedExternally
//    override fun getSelectionLength(): Number = definedExternally
//    override fun getHilites(): Array<Any?> = definedExternally
//    override fun setHilites(hilites: Array<Any?>): Unit = definedExternally
//    override fun getHiliteState(): String = definedExternally
//    override fun setHiliteState(hiliteState: String): Unit = definedExternally
//    override fun enableHilite(hiliteID: String, enable: Boolean?): Unit = definedExternally
//    override fun disableHilite(hiliteID: String): Unit = definedExternally
//    override fun enableHiliting(enable: Boolean?): Unit = definedExternally
//    override fun disableHiliting(): Unit = definedExternally
//    override fun editHilites(): Unit = definedExternally
//    override fun transferRecords(dropRecords: Array<Any?>, targetRecord: Record, index: Number, sourceWidget: Canvas, callback: Any?): Unit = definedExternally
//    override fun getDropValues(record: Record, sourceDS: DataSource, targetRecord: Record, index: Number, sourceWidget: Canvas): Any = definedExternally
//    override fun transferDragData(): Array<Any> = definedExternally
//    override fun getDragData(source: DataBoundComponent): Array<Any?> = definedExternally
//    override fun transferSelectedData(source: DataBoundComponent, index: Number?, callback: Any?): Unit = definedExternally
//    override fun setDragTracker(): Boolean = definedExternally
//    override fun addFormulaField(): Unit = definedExternally
//    override fun editFormulaField(field: String): Unit = definedExternally
//    override fun getFormulaFieldValue(field: String, record: Record): dynamic /* String | Number */ = definedExternally
//    override fun addSummaryField(): Unit = definedExternally
//    override fun editSummaryField(field: String): Unit = definedExternally
//    override fun getSummaryFieldValue(field: String, record: Record): String = definedExternally
//    override fun shouldIncludeHiliteInSummaryField(summaryFieldName: String, usedFieldName: String): Boolean = definedExternally
//    override fun getRecordIndex(record: Record): Number = definedExternally
//    override fun getTitleFieldValue(record: Record): String = definedExternally
//    override fun getTitleField(): String = definedExternally
//    override fun getRecordHiliteCSSText(record: Record, cssText: String, field: String): String = definedExternally
//    override fun getSort(): Array<Any?> = definedExternally
//    override fun setSort(sortSpecifiers: Array<Any?>): Unit = definedExternally
//    override fun askForSort(): Unit = definedExternally
//    override fun isOffline(): Boolean = definedExternally
//    override fun editFields(): Unit = definedExternally
//    override fun userAddedField(field: ListGridField): Boolean = definedExternally
//    override fun selectionUpdated(record: Any, recordList: Array<Any?>): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DynamicForm = definedExternally
        var GET: String = definedExternally
        var POST: String = definedExternally
        var NORMAL: String = definedExternally
        var MULTIPART: String = definedExternally
        fun requestsArePending(): Boolean = definedExternally
    }
    open fun getValuesAsCriteria(advanced: Boolean): dynamic /* Any? | AdvancedCriteria */ = definedExternally
    open fun getValuesAsAdvancedCriteria(): AdvancedCriteria = definedExternally
    open fun editNewRecord(): Unit = definedExternally
//    override fun willFetchData(newCriteria: Any?): Boolean = definedExternally
}
external open class FormEditProxy : CanvasEditProxy {
    open var selectItemsMode: dynamic /* String /* "never" */ | String /* "item" */ | String /* "itemOrTitle" */ */ = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): FormEditProxy = definedExternally
    }
}
external open class Browser : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Browser = definedExternally
        var supportsDualInput: Boolean = definedExternally
        var isTouch: Boolean = definedExternally
        var isTablet: Boolean = definedExternally
        var isHandset: Boolean = definedExternally
        var isDesktop: Boolean = definedExternally
        var isSupported: Boolean = definedExternally
        var useCSS3: Boolean = definedExternally
        var useHighPerformanceGridTimings: Boolean = definedExternally
        fun setIsTouch(isTouch: Boolean): Unit = definedExternally
        fun setIsTablet(isTablet: Boolean): Unit = definedExternally
        fun setIsHandset(isHandset: Boolean): Unit = definedExternally
        fun setIsDesktop(isDesktop: Boolean): Unit = definedExternally
    }
}
external open class HiliteRule : HLayout {
    open var clause: FilterClause = definedExternally
    open var hiliteForm: DynamicForm = definedExternally
    open var colorFieldTitle: String = definedExternally
    open var advancedClauseLabel: Label = definedExternally
    open var advancedClauseEditButton: ImgButton = definedExternally
    open var showRemoveButton: Boolean = definedExternally
    open var removeButtonPrompt: String = definedExternally
    open var removeButton: ImgButton = definedExternally
    open var foregroundColorTitle: String = definedExternally
    open var backgroundColorTitle: String = definedExternally
    open var iconFieldTitle: String = definedExternally
    open fun remove(): Unit = definedExternally
    open fun getHilite(): Hilite = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): HiliteRule = definedExternally
    }
}
external open class ComboBoxItem : TextItem, PickList {
//    override var defaultValue: Boolean = definedExternally
    open var defaultToFirstOption: Boolean = definedExternally
//    override var showHintInField: Boolean = definedExternally
//    override var mask: String = definedExternally
//    override var maskSaveLiterals: Boolean = definedExternally
//    override var maskPadChar: String = definedExternally
//    override var maskPromptChar: String = definedExternally
//    override var maskOverwriteMode: Boolean = definedExternally
    open var pickListPlacement: dynamic /* String | Canvas */ = definedExternally
//    override var iconPlacement: dynamic /* String /* "pickerNavigationBar" */ | String /* "formItem" */ | String /* "both" */ */ = definedExternally
    open var pickerSearchField: TextItem = definedExternally
    open var pickerSearchFieldHint: String = definedExternally
    open var pickerSearchOrNewValueFieldHint: String = definedExternally
    open var pickerSearchForm: DynamicForm = definedExternally
    open var pickerExitButton: NavigationButton = definedExternally
    open var pickerExitButtonTitle: String = definedExternally
    open var pickerSaveButton: NavigationButton = definedExternally
    open var pickerSaveButtonTitle: String = definedExternally
//    override var emptyPickListMessage: String = definedExternally
    open var pickerNavigationBar: NavigationBar = definedExternally
    open var progressiveLoading: Boolean = definedExternally
//    override var showPickerIcon: Boolean = definedExternally
//    override var pickerIconWidth: Number = definedExternally
//    override var pickerIconHeight: Number = definedExternally
//    override var pickerIconSrc: String = definedExternally
    open var showPickListOnKeypress: Boolean = definedExternally
//    override var saveOnEnter: Boolean = definedExternally
    open var completeOnTab: Boolean = definedExternally
//    override var formatOnBlur: Boolean = definedExternally
//    override var specialValues: Any? = definedExternally
    open var separateSpecialValues: Boolean = definedExternally
    open var separateValuesList: ListGrid = definedExternally
    open var addUnknownValues: Boolean = definedExternally
    open var allowEmptyValue: Boolean = definedExternally
    open var pendingTextBoxStyle: String = definedExternally
//    override var pickListConstructor: String = definedExternally
//    override var pickTreeConstructor: String = definedExternally
//    override var dataSetType: String = definedExternally
    override var optionDataSource: dynamic /* String | DataSource */ = definedExternally
//    override var pickListFields: Array<Any?> = definedExternally
//    override var cachePickListResults: Boolean = definedExternally
//    override var fetchDisplayedFieldsOnly: Boolean = definedExternally
    override var optionFilterContext: DSRequest? get() = definedExternally; set(value) = definedExternally
//    override var optionOperationId: String = definedExternally
    override var displayField: String? get() = definedExternally; set(value) = definedExternally
    override var valueField: String get() = definedExternally; set(value) = definedExternally
    override var filterLocally: Boolean? get() = definedExternally; set(value) = definedExternally
//    override var pickListCriteria: Any? = definedExternally
//    override var showOptionsFromDataSource: Boolean = definedExternally
//    override var pickListProperties: ListGrid = definedExternally
//    override var sortField: dynamic /* String | Number | Array<String> */ = definedExternally
//    override var initialSort: Array<Any?> = definedExternally
//    override var rootNodeId: dynamic /* String | Number */ = definedExternally
//    override var autoOpenTree: String = definedExternally
    open var autoFetchData: Boolean = definedExternally
    open var filterWithValue: Boolean = definedExternally
    open var filterFields: Array<String> = definedExternally
//    override var useClientFiltering: Boolean = definedExternally
    open var minimumSearchLength: Number = definedExternally
    open var searchStringTooShortMessage: String = definedExternally
//    override var textMatchStyle: dynamic /* String /* "startsWith" */ | String /* "exact" */ | String /* "exactCase" */ | String /* "substring" */ */ = definedExternally
//    override var showAllOptions: Boolean = definedExternally
//    override var separatorRows: Array<Any?> = definedExternally
    open var generateExactMatchCriteria: Boolean = definedExternally
//    override var allowExpressions: Boolean = definedExternally
//    override var editProxyConstructor: String = definedExternally
    open fun defaultDynamicValue(): Unit = definedExternally
//    override fun getEnteredValue(): String = definedExternally
//    override fun fetchData(callback: Any?, requestProperties: DSRequest?): Unit = definedExternally
//    override fun getDisplayFieldName(): String = definedExternally
//    override fun getValueFieldName(): String = definedExternally
//    override fun getSelectedRecord(): ListGridRecord = definedExternally
//    override fun getPickListFilterCriteria(): Any? = definedExternally
//    override fun getClientPickListData(): Array<Any?> = definedExternally
//    override fun filterClientPickListData(): Array<Any?> = definedExternally
//    override fun dataArrived(startRow: Number, endRow: Number, data: ResultSet): Unit = definedExternally
    open fun shouldGenerateExactMatchCriteria(): Boolean = definedExternally
//    override fun hasAdvancedCriteria(): Boolean = definedExternally
//    open fun getCriterion(): Criterion = definedExternally
    open fun canEditCriterion(): Unit = definedExternally
    open fun setCriterion(): Unit = definedExternally
//    override var pickListHeight: Number = definedExternally
//    override var emptyPickListHeight: Number = definedExternally
//    override var hideEmptyPickList: Boolean = definedExternally
//    override var pickListWidth: Number = definedExternally
//    override var pickListMaxWidth: Number = definedExternally
//    override var pickListBaseStyle: String = definedExternally
//    override var pickListTallBaseStyle: String = definedExternally
//    override var pickListApplyRowNumberStyle: Boolean = definedExternally
//    override var animatePickList: Boolean = definedExternally
//    override var pickListAnimationTime: Number = definedExternally
//    override var fetchDelay: Number = definedExternally
//    override var pickListCellHeight: Number = definedExternally
//    override var pickListHeaderHeight: Number = definedExternally
    override var useLocalDisplayFieldValue: Boolean? get() = definedExternally; set(value) = definedExternally
//    override var valueIconField: String = definedExternally
//    override fun getOptionDataSource(): DataSource = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ComboBoxItem = definedExternally
        var selectAllStoredValue: String = definedExternally
        var emptyStoredValue: String = definedExternally
    }
}
external open class DMI : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DMI = definedExternally
        fun call(appID: String, className: String, methodName: String, args: Any, callback: (response: RPCResponse, rawData: Any, request: RPCRequest) -> Unit): RPCRequest = definedExternally
        fun call(appID: Any?, className: String, methodName: String, args: Any, callback: (response: RPCResponse, rawData: Any, request: RPCRequest) -> Unit): RPCRequest = definedExternally
        fun getURL(appID: String, className: String, methodName: String, args: Any? = definedExternally /* null */): String = definedExternally
        fun getURL(appID: Any?, className: String, methodName: String, args: Any? = definedExternally /* null */): String = definedExternally
    }
}
external open class DetailViewer : Canvas, DataBoundComponent {
//    override var initialCriteria: Any? = definedExternally
//    override var autoFetchData: Boolean = definedExternally
//    override var editProxyConstructor: String = definedExternally
    open var data: dynamic /* Array<Any?> | Any */ = definedExternally
//    override var dataFetchMode: dynamic /* String /* "basic" */ | String /* "paged" */ | String /* "local" */ */ = definedExternally
//    override var dataSource: dynamic /* String | DataSource */ = definedExternally
    open var rowHeight: Number = definedExternally
//    override var fields: Array<Any?> = definedExternally
//    override var hiliteIcons: Array<String> = definedExternally
//    override var hiliteIconPosition: dynamic /* String /* "before" */ | String /* "after" */ | String /* "replace" */ */ = definedExternally
//    override var hiliteIconSize: Number = definedExternally
//    override var hiliteIconWidth: Number = definedExternally
//    override var hiliteIconHeight: Number = definedExternally
//    override var hiliteIconLeftPadding: Number = definedExternally
//    override var hiliteIconRightPadding: Number = definedExternally
    open var fieldIdProperty: String = definedExternally
    open var recordsPerBlock: Number = definedExternally
    open var blockSeparator: String = definedExternally
    open var showEmptyField: Boolean = definedExternally
    open var emptyCellValue: String = definedExternally
    open var labelPrefix: String = definedExternally
    open var labelSuffix: String = definedExternally
    open var labelAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var valueAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var wrapLabel: Boolean = definedExternally
    open var wrapValues: Boolean = definedExternally
//    override var styleName: String = definedExternally
    open var blockStyle: String = definedExternally
    open var labelStyle: String = definedExternally
    open var cellStyle: String = definedExternally
    open var headerStyle: String = definedExternally
    open var printCellStyle: String = definedExternally
    open var printLabelStyle: String = definedExternally
    open var printHeaderStyle: String = definedExternally
    open var separatorStyle: String = definedExternally
    open var dateFormatter: dynamic /* String /* "toString" */ | String /* "toLocaleString" */ | String /* "toUSShortDate" */ | String /* "toUSShortDatetime" */ | String /* "toEuropeanShortDate" */ | String /* "toEuropeanShortDatetime" */ | String /* "toJapanShortDate" */ | String /* "toJapanShortDatetime" */ | String /* "toSerializeableDate" */ | String /* "toDateStamp" */ */ = definedExternally
    open var datetimeFormatter: dynamic /* String /* "toString" */ | String /* "toLocaleString" */ | String /* "toUSShortDate" */ | String /* "toUSShortDatetime" */ | String /* "toEuropeanShortDate" */ | String /* "toEuropeanShortDatetime" */ | String /* "toJapanShortDate" */ | String /* "toJapanShortDatetime" */ | String /* "toSerializeableDate" */ | String /* "toDateStamp" */ */ = definedExternally
    open var timeFormatter: dynamic /* String /* "toTime" */ | String /* "to24HourTime" */ | String /* "toPaddedTime" */ | String /* "toPadded24HourTime" */ | String /* "toShortTime" */ | String /* "toShort24HourTime" */ | String /* "toShortPaddedTime" */ | String /* "toShortPadded24HourTime" */ */ = definedExternally
    open var linkTextProperty: String = definedExternally
    open var showEmptyMessage: Boolean = definedExternally
    open var emptyMessage: String = definedExternally
    open var emptyMessageStyle: String = definedExternally
    open var loadingMessage: String = definedExternally
    open var loadingMessageStyle: String = definedExternally
//    override var showDetailFields: Boolean = definedExternally
    open var fieldPickerWindow: FieldPickerWindow = definedExternally
    open var canPickFields: Boolean = definedExternally
    open var configureFieldsText: String = definedExternally
    open var fieldPickerFieldProperties: Array<String> = definedExternally
//    override fun exportData(requestProperties: DSRequest?, callback: Any?): Unit = definedExternally
    open fun exportClientData(requestProperties: DSRequest? = definedExternally /* null */, callback: ((response: RPCResponse, rawData: Any, request: RPCRequest) -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun isExportingClientData(): Boolean = definedExternally
    open fun viewSelectedData(selectionComponent: String): Unit = definedExternally
    open fun viewSelectedData(selectionComponent: ListGrid): Unit = definedExternally
    open fun setData(newData: Array<Any?>): Unit = definedExternally
    open fun setData(newData: Any): Unit = definedExternally
    open fun fetchRelatedData(record: ListGridRecord, schema: String, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun fetchRelatedData(record: ListGridRecord, schema: Canvas, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun fetchRelatedData(record: ListGridRecord, schema: DataSource, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun fieldIsVisible(field: String): Boolean = definedExternally
    open fun fieldIsVisible(field: DetailViewerField): Boolean = definedExternally
    open fun getCellCSSText(value: Any, field: DetailViewerField, record: Record, viewer: DetailViewer): String = definedExternally
    open fun getCellStyle(value: Any, field: DetailViewerField, record: Record, viewer: DetailViewer): String = definedExternally
    open fun formatCellValue(value: String, record: DetailViewerRecord, field: DetailViewerField): Unit = definedExternally
//    override fun getRecordIndex(record: Record): Number = definedExternally
    open fun emptyMessageHTML(): String = definedExternally
    open fun getViewState(): String = definedExternally
    open fun setViewState(viewState: String): Unit = definedExternally
//    override var deepCloneOnEdit: Boolean = definedExternally
//    override var deepCloneNonFieldValuesOnEdit: Boolean = definedExternally
//    override var dataPageSize: Number = definedExternally
//    override var dataFetchDelay: Number = definedExternally
//    override var useAllDataSourceFields: Boolean = definedExternally
//    override var showHiddenFields: Boolean = definedExternally
//    override var showComplexFields: Boolean = definedExternally
//    override var fetchOperation: String = definedExternally
//    override var updateOperation: String = definedExternally
//    override var addOperation: String = definedExternally
//    override var removeOperation: String = definedExternally
//    override var exportFields: Array<String> = definedExternally
//    override var exportAll: Boolean = definedExternally
//    override var exportIncludeSummaries: Boolean = definedExternally
//    override var dragRecategorize: dynamic /* String /* "never" */ | String /* "always" */ | String /* "checked" */ */ = definedExternally
//    override var preventDuplicates: Boolean = definedExternally
//    override var duplicateDragMessage: String = definedExternally
//    override var showOfflineMessage: Boolean = definedExternally
//    override var offlineMessage: String = definedExternally
//    override var offlineSaveMessage: String = definedExternally
//    override var addDropValues: Boolean = definedExternally
//    override var dropValues: Any = definedExternally
//    override var dataArity: String = definedExternally
//    override var progressiveLoading: Boolean = definedExternally
//    override var canEditFieldAttribute: String = definedExternally
//    override var useFlatFields: Boolean = definedExternally
//    override var canChangeNonFieldValues: Boolean = definedExternally
//    override var implicitCriteria: Any? = definedExternally
//    override var canEditHilites: Boolean = definedExternally
//    override var hilites: Array<Any?> = definedExternally
//    override var hiliteProperty: String = definedExternally
//    override var hiliteState: String = definedExternally
//    override var fieldNamingStrategy: dynamic /* String /* "simple" */ | String /* "uuid" */ */ = definedExternally
//    override var editHilitesText: String = definedExternally
//    override var editHilitesDialogTitle: String = definedExternally
//    override var fieldEditorWindowTitle: String = definedExternally
//    override var fieldEditorWindow: Window = definedExternally
//    override var hiliteEditor: HiliteEditor = definedExternally
//    override var dragDataAction: dynamic /* String /* "none" */ | String /* "move" */ | String /* "copy" */ */ = definedExternally
//    override var dragTrackerStyle: String = definedExternally
//    override var badFormulaResultValue: String = definedExternally
//    override var missingSummaryFieldValue: String = definedExternally
//    override var canAddFormulaFields: Boolean = definedExternally
//    override var addFormulaFieldText: String = definedExternally
//    override var editFormulaFieldText: String = definedExternally
//    override var removeFormulaFieldText: String = definedExternally
//    override var canAddSummaryFields: Boolean = definedExternally
//    override var addSummaryFieldText: String = definedExternally
//    override var editSummaryFieldText: String = definedExternally
//    override var removeSummaryFieldText: String = definedExternally
//    override var includeHilitesInSummaryFields: Boolean = definedExternally
//    override var titleField: String = definedExternally
//    override var iconField: String = definedExternally
//    override var infoField: String = definedExternally
//    override var dataField: String = definedExternally
//    override var descriptionField: String = definedExternally
//    override var emptyExportMessage: String = definedExternally
//    override var multiSortDialogProperties: MultiSortDialog = definedExternally
//    override var multiSortDialogDefaults: MultiSortDialog = definedExternally
//    override var unknownErrorMessage: String = definedExternally
//    override var noErrorDetailsMessage: String = definedExternally
//    override fun dragComplete(): Unit = definedExternally
//    override fun dropComplete(transferredRecords: Array<Any?>): Unit = definedExternally
//    override fun getDataPathField(dataPath: String): Unit = definedExternally
//    override fun fieldIsEditable(field: String): Boolean = definedExternally
//    override fun fieldIsEditable(field: Number): Boolean = definedExternally
//    override fun fieldIsEditable(field: Any?): Boolean = definedExternally
//    override fun getField(fieldID: String): Any = definedExternally
//    override fun getField(fieldID: Number): Any = definedExternally
//    override fun getFieldNum(fieldName: String): Number = definedExternally
//    override fun find(advancedCriteria: AdvancedCriteria): Any = definedExternally
//    override fun findAll(advancedCriteria: AdvancedCriteria): Array<Any> = definedExternally
//    override fun findIndex(advancedCriteria: AdvancedCriteria): Number = definedExternally
//    override fun findNextIndex(startIndex: Number, advancedCriteria: AdvancedCriteria, endIndex: Number?): Number = definedExternally
//    override fun setDataSource(dataSource: String, fields: Array<Any?>?): Unit = definedExternally
//    override fun setDataSource(dataSource: DataSource, fields: Array<Any?>?): Unit = definedExternally
//    override fun getFieldAlignments(): Array<dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */> = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "startsWith" */): Boolean = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "exact" */): Boolean = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "exactCase" */): Boolean = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "substring" */): Boolean = definedExternally
//    override fun findByKey(keyValue: Any): Record = definedExternally
//    override fun selectRecord(record: Number, newState: Boolean?): Unit = definedExternally
//    override fun selectRecord(record: Record, newState: Boolean?): Unit = definedExternally
//    override fun selectSingleRecord(record: Number): Unit = definedExternally
//    override fun selectSingleRecord(record: Record): Unit = definedExternally
//    override fun deselectRecord(record: Number): Unit = definedExternally
//    override fun deselectRecord(record: Record): Unit = definedExternally
//    override fun selectRecords(records: Number, newState: Boolean?): Unit = definedExternally
//    override fun selectRecords(records: Array<Any?>, newState: Boolean?): Unit = definedExternally
//    override fun deselectRecords(records: Number): Unit = definedExternally
//    override fun deselectRecords(records: Array<Any?>): Unit = definedExternally
//    override fun selectAllRecords(): Unit = definedExternally
//    override fun deselectAllRecords(): Unit = definedExternally
//    override fun selectRange(startRow: Number, endRow: Number, newState: Boolean?): Unit = definedExternally
//    override fun deselectRange(startRow: Number, endRow: Number): Unit = definedExternally
//    override fun anySelected(): Boolean = definedExternally
//    override fun getSelectionLength(): Number = definedExternally
//    override fun getHilites(): Array<Any?> = definedExternally
//    override fun setHilites(hilites: Array<Any?>): Unit = definedExternally
//    override fun getHiliteState(): String = definedExternally
//    override fun setHiliteState(hiliteState: String): Unit = definedExternally
//    override fun enableHilite(hiliteID: String, enable: Boolean?): Unit = definedExternally
//    override fun disableHilite(hiliteID: String): Unit = definedExternally
//    override fun enableHiliting(enable: Boolean?): Unit = definedExternally
//    override fun disableHiliting(): Unit = definedExternally
//    override fun editHilites(): Unit = definedExternally
//    override fun transferRecords(dropRecords: Array<Any?>, targetRecord: Record, index: Number, sourceWidget: Canvas, callback: Any?): Unit = definedExternally
//    override fun getDropValues(record: Record, sourceDS: DataSource, targetRecord: Record, index: Number, sourceWidget: Canvas): Any = definedExternally
//    override fun transferDragData(): Array<Any> = definedExternally
//    override fun getDragData(source: DataBoundComponent): Array<Any?> = definedExternally
//    override fun transferSelectedData(source: DataBoundComponent, index: Number?, callback: Any?): Unit = definedExternally
//    override fun setDragTracker(): Boolean = definedExternally
//    override fun addFormulaField(): Unit = definedExternally
//    override fun editFormulaField(field: String): Unit = definedExternally
//    override fun getFormulaFieldValue(field: String, record: Record): dynamic /* String | Number */ = definedExternally
//    override fun addSummaryField(): Unit = definedExternally
//    override fun editSummaryField(field: String): Unit = definedExternally
//    override fun getSummaryFieldValue(field: String, record: Record): String = definedExternally
//    override fun shouldIncludeHiliteInSummaryField(summaryFieldName: String, usedFieldName: String): Boolean = definedExternally
//    override fun getTitleFieldValue(record: Record): String = definedExternally
//    override fun getTitleField(): String = definedExternally
//    override fun getRecordHiliteCSSText(record: Record, cssText: String, field: String): String = definedExternally
//    override fun getSort(): Array<Any?> = definedExternally
//    override fun setSort(sortSpecifiers: Array<Any?>): Unit = definedExternally
//    override fun askForSort(): Unit = definedExternally
//    override fun isOffline(): Boolean = definedExternally
//    override fun editFields(): Unit = definedExternally
//    override fun userAddedField(field: ListGridField): Boolean = definedExternally
//    override fun selectionUpdated(record: Any, recordList: Array<Any?>): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DetailViewer = definedExternally
        fun requestsArePending(): Boolean = definedExternally
    }
//    override fun willFetchData(newCriteria: Any?): Boolean = definedExternally
}
external open class NativeCheckboxItem : FormItem {
//    override var textBoxStyle: String = definedExternally
    open var showLabel: Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): NativeCheckboxItem = definedExternally
    }
}
external open class RadioGroupItem : FormItem {
    open var vertical: Boolean = definedExternally
    open var fillHorizontalSpace: Boolean = definedExternally
//    override var textBoxStyle: String = definedExternally
    open var wrap: Boolean = definedExternally
    open var itemProperties: RadioItem = definedExternally
    open var disabledValues: Array<String> = definedExternally
//    override var editProxyConstructor: String = definedExternally
    open fun setTextBoxStyle(newTextBoxStyle: String): Unit = definedExternally
//    override fun pendingStatusChanged(form: DynamicForm, item: FormItem, pendingStatus: Boolean, newValue: Any, value: Any): Boolean = definedExternally
    open fun valueHoverHTML(value: Any, item: RadioGroupItem, form: DynamicForm): String = definedExternally
    open fun setValueDisabled(value: Any, disabled: Boolean): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): RadioGroupItem = definedExternally
    }
}
external open class Facet : Class {
    open var id: dynamic /* String | Number */ = definedExternally
    open var title: String = definedExternally
    open var values: Array<Any?> = definedExternally
    open var inlinedValues: Boolean = definedExternally
    open var rollupValue: String = definedExternally
    open var isTree: Boolean = definedExternally
    open var showParentsLast: Boolean = definedExternally
    open var collapsed: Boolean = definedExternally
    open var canCollapse: Boolean = definedExternally
    open var canMinimize: Boolean = definedExternally
    open var width: Number = definedExternally
    open var height: Number = definedExternally
    open var labelHeight: Number = definedExternally
    open var align: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var titleAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var cellAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var borderBefore: String = definedExternally
    open var borderAfter: String = definedExternally
    open var selectionBoundary: dynamic /* String /* "both" */ | String /* "before" */ | String /* "after" */ */ = definedExternally
    open var summaryValue: String = definedExternally
    open var summaryTitle: String = definedExternally
    open var synchColumnLayout: Boolean = definedExternally
    open var proportionalTitle: String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Facet = definedExternally
    }
}
external open class DrawRect : DrawItem {
    open var left: Number = definedExternally
    open var top: Number = definedExternally
    open var width: Number = definedExternally
    open var height: Number = definedExternally
    open var rounding: Number = definedExternally
//    override var lineCap: dynamic /* String /* "square" */ | String /* "round" */ | String /* "butt" */ */ = definedExternally
//    override var titleRotationMode: dynamic /* String /* "neverRotate" */ | String /* "withItem" */ | String /* "withItemAlwaysUp" */ | String /* "withLine" */ | String /* "withLineAlwaysUp" */ */ = definedExternally
    open fun setCenter(left: Number, top: Number): Unit = definedExternally
//    override fun getCenter(): Point = definedExternally
//    override fun getBoundingBox(): Array<Number> = definedExternally
//    override fun isPointInPath(x: Number, y: Number): Boolean = definedExternally
//    override fun moveBy(dX: Number, dY: Number): Unit = definedExternally
//    override fun moveTo(left: Number, top: Number): Unit = definedExternally
    open fun setLeft(left: Number): Unit = definedExternally
    open fun setTop(top: Number): Unit = definedExternally
//    override fun resizeTo(width: Number, height: Number): Unit = definedExternally
//    override fun resizeBy(dX: Number, dY: Number): Unit = definedExternally
    open fun setWidth(width: Number): Unit = definedExternally
    open fun setHeight(height: Number): Unit = definedExternally
    open fun setRect(left: Number, top: Number, width: Number, height: Number): Unit = definedExternally
    open fun setRounding(rounding: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DrawRect = definedExternally
    }
}
external open class GaugeSector {
    open var fillColor: String = definedExternally
    open var startAngle: Number = definedExternally
    open var endAngle: Number = definedExternally
    open var value: Number = definedExternally
}
external open class FormItemEventInfo {
    open var item: FormItem = definedExternally
    open var overTextBox: Boolean = definedExternally
    open var overElement: Boolean = definedExternally
    open var overItem: Boolean = definedExternally
    open var overTitle: Boolean = definedExternally
    open var overInlineError: Boolean = definedExternally
    open var icon: String = definedExternally
}
external open class History {
    companion object {
        fun registerCallback(callback: String, requiresData: Boolean, isAdditional: Boolean? = definedExternally /* null */): Number = definedExternally
        fun registerCallback(callback: Any?, requiresData: Boolean, isAdditional: Boolean? = definedExternally /* null */): Number = definedExternally
        fun unregisterCallback(id: Number): Boolean = definedExternally
        fun getCurrentHistoryId(): String = definedExternally
        fun getHistoryData(id: String): Any = definedExternally
        fun setHistoryTitle(title: String): Unit = definedExternally
        fun addHistoryEntry(id: String, title: String? = definedExternally /* null */, data: Any? = definedExternally /* null */): Unit = definedExternally
        fun readyForAnotherHistoryEntry(): Boolean = definedExternally
    }
}
external open class DetailViewerEditProxy : CanvasEditProxy {
    open var dataSeparatorChar: String = definedExternally
    open var dataDisplaySeparatorChar: String = definedExternally
    open var dataEscapeChar: String = definedExternally
//    override fun getInlineEditText(): Unit = definedExternally
//    override fun setInlineEditText(newValue: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DetailViewerEditProxy = definedExternally
    }
}
external open class HibernateBrowser : Window {
    open var mappingTree: TreeGrid = definedExternally
    open var dataGrid: ListGrid = definedExternally
//    override var title: String = definedExternally
    open var selectButton: Button = definedExternally
    open var includeSubstring: dynamic /* String | Array<String> */ = definedExternally
    open var excludeSubstring: dynamic /* String | Array<String> */ = definedExternally
    open fun getGeneratedDataSource(): Unit = definedExternally
    open fun getResults(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): HibernateBrowser = definedExternally
    }
}
external open class SerializationSettings {
    open var serverless: Boolean = definedExternally
    open var indent: Boolean = definedExternally
    open var outputComponentsIndividually: Boolean = definedExternally
}
external open class Button : StatefulCanvas {
//    override var title: String = definedExternally
    open var hiliteAccessKey: Boolean = definedExternally
    open var showClippedTitleOnHover: Boolean = definedExternally
//    override var icon: String = definedExternally
//    override var iconSize: Number = definedExternally
//    override var iconWidth: Number = definedExternally
//    override var iconHeight: Number = definedExternally
//    override var iconStyle: String = definedExternally
//    override var iconOrientation: String = definedExternally
    open var iconAlign: String = definedExternally
//    override var iconSpacing: Number = definedExternally
//    override var showDisabledIcon: Boolean = definedExternally
//    override var showRollOverIcon: Boolean = definedExternally
    open var iconCursor: dynamic /* String /* "text" */ | String /* "auto" */ | String /* "move" */ | String /* "default" */ | String /* "wait" */ | String /* "hand" */ | String /* "help" */ | String /* "pointer" */ | String /* "arrow" */ | String /* "all-scroll" */ | String /* "crosshair" */ | String /* "col-resize" */ | String /* "row-resize" */ | String /* "e-resize" */ | String /* "w-resize" */ | String /* "n-resize" */ | String /* "s-resize" */ | String /* "se-resize" */ | String /* "ne-resize" */ | String /* "nw-resize" */ | String /* "sw-resize" */ | String /* "not-allowed" */ */ = definedExternally
    open var disabledIconCursor: dynamic /* String /* "text" */ | String /* "auto" */ | String /* "move" */ | String /* "default" */ | String /* "wait" */ | String /* "hand" */ | String /* "help" */ | String /* "pointer" */ | String /* "arrow" */ | String /* "all-scroll" */ | String /* "crosshair" */ | String /* "col-resize" */ | String /* "row-resize" */ | String /* "e-resize" */ | String /* "w-resize" */ | String /* "n-resize" */ | String /* "s-resize" */ | String /* "se-resize" */ | String /* "ne-resize" */ | String /* "nw-resize" */ | String /* "sw-resize" */ | String /* "not-allowed" */ */ = definedExternally
//    override var showFocusedIcon: Boolean = definedExternally
//    override var showDownIcon: Boolean = definedExternally
//    override var showSelectedIcon: Boolean = definedExternally
//    override var autoFit: Boolean = definedExternally
//    override var baseStyle: String = definedExternally
    open var iconOnlyBaseStyle: String = definedExternally
//    override var selected: Boolean = definedExternally
//    override var radioGroup: String = definedExternally
//    override var actionType: dynamic /* String /* "radio" */ | String /* "button" */ | String /* "checkbox" */ */ = definedExternally
//    override var state: dynamic /* String /* "" */ | String /* "Down" */ | String /* "Over" */ | String /* "Disabled" */ */ = definedExternally
//    override var showDisabled: Boolean = definedExternally
//    override var showDown: Boolean = definedExternally
//    override var showFocused: Boolean = definedExternally
//    override var showRollOver: Boolean = definedExternally
//    override var align: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
//    override var valign: dynamic /* String /* "top" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
    open var wrap: Boolean = definedExternally
//    override var canAdaptWidth: Boolean = definedExternally
//    override var overflow: dynamic /* String /* "auto" */ | String /* "visible" */ | String /* "hidden" */ | String /* "scroll" */ | String /* "clip-h" */ | String /* "clip-v" */ */ = definedExternally
//    override fun getTitle(): String = definedExternally
//    override fun setTitle(newTitle: String): Unit = definedExternally
//    override fun setIconOrientation(orientation: String): Unit = definedExternally
//    override fun setIcon(icon: String): Unit = definedExternally
//    override fun setAutoFit(autoFit: Boolean): Unit = definedExternally
//    override fun setBaseStyle(style: String): Unit = definedExternally
//    override fun select(): Unit = definedExternally
//    override fun deselect(): Unit = definedExternally
//    override fun isSelected(): Boolean = definedExternally
    open fun setSelected(): Unit = definedExternally
//    override fun addToRadioGroup(groupID: String): Unit = definedExternally
//    override fun removeFromRadioGroup(groupID: String?): Unit = definedExternally
//    override fun setActionType(): Unit = definedExternally
//    override fun getActionType(): Unit = definedExternally
//    override fun setState(newState: String /* "" */): Unit = definedExternally
//    override fun setState(newState: String /* "Down" */): Unit = definedExternally
//    override fun setState(newState: String /* "Over" */): Unit = definedExternally
//    override fun setState(newState: String /* "Disabled" */): Unit = definedExternally
//    override fun setDisabled(disabled: Boolean): Unit = definedExternally
//    override fun getState(): dynamic /* String /* "" */ | String /* "Down" */ | String /* "Over" */ | String /* "Disabled" */ */ = definedExternally
    open fun action(): Unit = definedExternally
    open fun titleClipped(): Boolean = definedExternally
    open fun titleHoverHTML(defaultHTML: String): String = definedExternally
    open fun setWrap(newWrap: Boolean): Unit = definedExternally
    open fun setAlign(): Unit = definedExternally
    open fun setVAlign(): Unit = definedExternally
    open fun iconClick(): Boolean = definedExternally
    open fun titleHover(): Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Button = definedExternally
    }
}
external open class StatefulCanvasEditProxy : CanvasEditProxy {
//    override fun getInlineEditText(): Unit = definedExternally
//    override fun setInlineEditText(newValue: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): StatefulCanvasEditProxy = definedExternally
    }
}
external open class MenuItem : ListGridRecord {
    open var title: String = definedExternally
    open var submenu: Menu = definedExternally
    open var canSelectParent: Boolean = definedExternally
//    override var isSeparator: Boolean = definedExternally
//    override var enabled: Boolean = definedExternally
    open var checked: Boolean = definedExternally
    open var disabledIcon: String = definedExternally
    open var icon: String = definedExternally
    open var iconWidth: Number = definedExternally
    open var iconHeight: Number = definedExternally
    open var keys: dynamic /* KeyIdentifier | Array<Any?> */ = definedExternally
    open var keyTitle: String = definedExternally
    open var fetchSubmenus: Boolean = definedExternally
    open var enableWhen: AdvancedCriteria = definedExternally
//    override var embeddedComponent: Canvas = definedExternally
//    override var embeddedComponentPosition: dynamic /* String /* "expand" */ | String /* "within" */ */ = definedExternally
//    override var embeddedComponentFields: Array<String> = definedExternally
    open var autoDismiss: Boolean = definedExternally
    open var showIconOnlyInline: Boolean = definedExternally
    open fun enableIf(target: Canvas, menu: Menu, item: MenuItem): Boolean = definedExternally
    open fun checkIf(target: Canvas, menu: Menu, item: MenuItem): Boolean = definedExternally
    open fun dynamicTitle(target: Canvas, menu: Menu, item: MenuItem): String = definedExternally
    open fun dynamicIcon(target: Canvas, menu: Menu, item: MenuItem): String = definedExternally
    open fun click(target: Canvas, item: MenuItem, menu: Menu, colNum: Number? = definedExternally /* null */): Unit = definedExternally
    open fun action(): Unit = definedExternally
}
external open class MultiSortDialog : Window {
    open var multiSortPanel: MultiSortPanel = definedExternally
//    override var title: String = definedExternally
    open var addLevelButtonTitle: String = definedExternally
    open var deleteLevelButtonTitle: String = definedExternally
    open var copyLevelButtonTitle: String = definedExternally
    open var levelUpButtonTitle: String = definedExternally
    open var levelDownButtonTitle: String = definedExternally
    open var invalidListPrompt: String = definedExternally
    open var propertyFieldTitle: String = definedExternally
    open var directionFieldTitle: String = definedExternally
    open var ascendingTitle: String = definedExternally
    open var descendingTitle: String = definedExternally
    open var firstSortLevelTitle: String = definedExternally
    open var otherSortLevelTitle: String = definedExternally
    open var initialSort: Array<Any?> = definedExternally
    open var maxLevels: Number = definedExternally
    open var applyButtonTitle: String = definedExternally
    open var cancelButtonTitle: String = definedExternally
    open var applyButton: IButton = definedExternally
    open var cancelButton: IButton = definedExternally
    open var addLevelButton: IButton = definedExternally
    open var deleteLevelButton: IButton = definedExternally
    open var copyLevelButton: IButton = definedExternally
    open var levelUpButton: ImgButton = definedExternally
    open var levelDownButton: ImgButton = definedExternally
    open var fields: Array<Any?> = definedExternally
    open var optionsGrid: ListGrid = definedExternally
    open fun getNumLevels(): Number = definedExternally
    open fun getSortLevel(levelNum: Number): SortSpecifier = definedExternally
    open fun getSort(): Array<Any?> = definedExternally
    open fun validate(): Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): MultiSortDialog = definedExternally
        fun askForSort(fieldSource: DataSource, initialSort: Array<Any?>, callback: Any?, properties: MultiSortDialog? = definedExternally /* null */): Unit = definedExternally
        fun askForSort(fieldSource: DataBoundComponent, initialSort: Array<Any?>, callback: Any?, properties: MultiSortDialog? = definedExternally /* null */): Unit = definedExternally
        fun askForSort(fieldSource: Array<Any?>, initialSort: Array<Any?>, callback: Any?, properties: MultiSortDialog? = definedExternally /* null */): Unit = definedExternally
    }
}
external open class TileRecord {
    open var tileConstructor: String = definedExternally
    open var tileProperties: Canvas = definedExternally
}
external open class FormItemIcon {
    open var baseStyle: String = definedExternally
    open var name: String = definedExternally
    open var inline: Boolean = definedExternally
    open var inlineIconAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var src: String = definedExternally
    open var text: String = definedExternally
    open var showOver: Boolean = definedExternally
    open var showOverWhen: dynamic /* String /* "icon" */ | String /* "textBox" */ */ = definedExternally
    open var showFocused: Boolean = definedExternally
    open var showRTL: Boolean = definedExternally
    open var showFocusedWithItem: Boolean = definedExternally
    open var neverDisable: Boolean = definedExternally
    open var disableOnReadOnly: Boolean = definedExternally
    open var disabled: Boolean = definedExternally
    open var enableWhen: AdvancedCriteria = definedExternally
    open var tabIndex: Number = definedExternally
    open var width: Number = definedExternally
    open var height: Number = definedExternally
    open var prompt: String = definedExternally
    open var showOnFocus: Boolean = definedExternally
    open var showDisabledOnFocus: Boolean = definedExternally
    open var hspace: Number = definedExternally
    open var visibleWhen: AdvancedCriteria = definedExternally
    open var iconPlacement: dynamic /* String /* "pickerNavigationBar" */ | String /* "formItem" */ | String /* "both" */ */ = definedExternally
    open fun click(form: DynamicForm, item: FormItem, icon: FormItemIcon): Boolean = definedExternally
    open fun keyPress(keyName: String, character: String, form: DynamicForm, item: FormItem, icon: FormItemIcon): Unit = definedExternally
    open fun showIf(form: DynamicForm, item: FormItem): Boolean = definedExternally
}
external open class Tab {
    open var title: String = definedExternally
    open var canEditTitle: Boolean = definedExternally
    open var prompt: String = definedExternally
    open var pickerTitle: String = definedExternally
    open var pane: dynamic /* String | Canvas */ = definedExternally
    open var paneMargin: Number = definedExternally
    open var ID: String = definedExternally
    open var name: String = definedExternally
    open var width: Number = definedExternally
    open var canAdaptWidth: Boolean = definedExternally
    open var disabled: Boolean = definedExternally
    open var icon: String = definedExternally
    open var iconSize: Number = definedExternally
    open var iconWidth: Number = definedExternally
    open var iconHeight: Number = definedExternally
    open var canReorder: Boolean = definedExternally
    open var canClose: Boolean = definedExternally
    open var closeIcon: String = definedExternally
    open var closeIconSize: Number = definedExternally
    open var enableWhen: AdvancedCriteria = definedExternally
    open fun tabSelected(tabSet: TabSet, tabNum: Number, tabPane: Canvas, ID: String, tab: Tab, name: String): Unit = definedExternally
    open fun tabDeselected(tabSet: TabSet, tabNum: Number, tabPane: Canvas, ID: String, tab: Tab, newTab: Tab, name: String): Boolean = definedExternally
}
external open class LayoutEditProxy : CanvasEditProxy {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): LayoutEditProxy = definedExternally
    }
}
external open class ColorItem : TextItem {
//    override var showPickerIcon: Boolean = definedExternally
//    override var pickerIconWidth: Number = definedExternally
//    override var pickerIconHeight: Number = definedExternally
//    override var pickerIconSrc: String = definedExternally
//    override var pickerIconPrompt: String = definedExternally
    open var defaultPickerMode: dynamic /* String /* "simple" */ | String /* "complex" */ */ = definedExternally
    open var allowComplexMode: Boolean = definedExternally
    open var supportsTransparency: Boolean = definedExternally
    open fun pickerColorSelected(color: String, opacity: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ColorItem = definedExternally
    }
}
external open class NavPanel : SplitPane {
    open var isTree: Boolean = definedExternally
    open var navGrid: TreeGrid = definedExternally
    open var navDeck: Deck = definedExternally
    open var headerStyle: String = definedExternally
    open var navItems: Array<Any?> = definedExternally
    open var currentItem: NavItem = definedExternally
    open var currentItemId: String = definedExternally
    open fun setCurrentItem(newCurrentItem: NavItem? = definedExternally /* null */): Unit = definedExternally
    open fun setCurrentItemId(newCurrentItemId: String? = definedExternally /* null */): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): NavPanel = definedExternally
    }
}
external open class DrawGroup : DrawItem {
//    override var knobs: Array<dynamic /* String /* "resize" */ | String /* "move" */ | String /* "startPoint" */ | String /* "endPoint" */ | String /* "controlPoint1" */ | String /* "controlPoint2" */ | String /* "rotate" */ */> = definedExternally
    open var moveItemsWithGroup: Boolean = definedExternally
    open var useGroupRect: Boolean = definedExternally
    open var left: Number = definedExternally
    open var top: Number = definedExternally
    open var width: Number = definedExternally
    open var height: Number = definedExternally
    open var drawItems: Array<Any?> = definedExternally
    open var showGroupRectOutline: Boolean = definedExternally
    open var groupRectOutline: DrawRect = definedExternally
//    override fun erase(): Unit = definedExternally
    open fun setLeft(left: Number): Unit = definedExternally
    open fun setTop(top: Number): Unit = definedExternally
    open fun setWidth(width: Number): Unit = definedExternally
    open fun setHeight(height: Number): Unit = definedExternally
    open fun getGroupRect(): Array<Number> = definedExternally
//    override fun moveTo(left: Number, top: Number): Unit = definedExternally
//    override fun moveBy(dX: Number, dY: Number): Unit = definedExternally
//    override fun rotateTo(degrees: Number): Unit = definedExternally
//    override fun rotateBy(degrees: Number): Unit = definedExternally
//    override fun scaleBy(x: Number, y: Number): Unit = definedExternally
//    override fun getCenter(): Point = definedExternally
//    override fun getBoundingBox(): Array<Number> = definedExternally
//    override fun scaleTo(x: Number, y: Number): Unit = definedExternally
//    override fun dragStart(): Boolean = definedExternally
//    override fun dragMove(): Boolean = definedExternally
//    override fun dragStop(): Boolean = definedExternally
//    override fun mouseDown(): Boolean = definedExternally
//    override fun mouseUp(): Boolean = definedExternally
//    override fun click(): Boolean = definedExternally
//    override fun mouseOver(): Boolean = definedExternally
//    override fun mouseMove(): Boolean = definedExternally
//    override fun mouseOut(): Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DrawGroup = definedExternally
    }
}
external open class TextExportSettings : TextSettings {
//    override var lineSeparator: String = definedExternally
    open var quoteValues: Boolean = definedExternally
    open var nullValueText: String = definedExternally
    open var useDisplayValue: Boolean = definedExternally
    open var forceText: dynamic /* String /* "leadingSpace" */ | String /* "formula" */ */ = definedExternally
    open var dateFormat: dynamic /* String /* "toString" */ | String /* "toLocaleString" */ | String /* "toUSShortDate" */ | String /* "toUSShortDatetime" */ | String /* "toEuropeanShortDate" */ | String /* "toEuropeanShortDatetime" */ | String /* "toJapanShortDate" */ | String /* "toJapanShortDatetime" */ | String /* "toSerializeableDate" */ | String /* "toDateStamp" */ */ = definedExternally
    open var dateTimeFormat: dynamic /* String /* "toString" */ | String /* "toLocaleString" */ | String /* "toUSShortDate" */ | String /* "toUSShortDatetime" */ | String /* "toEuropeanShortDate" */ | String /* "toEuropeanShortDatetime" */ | String /* "toJapanShortDate" */ | String /* "toJapanShortDatetime" */ | String /* "toSerializeableDate" */ | String /* "toDateStamp" */ */ = definedExternally
    open var timeFormat: dynamic /* String /* "toTime" */ | String /* "to24HourTime" */ | String /* "toPaddedTime" */ | String /* "toPadded24HourTime" */ | String /* "toShortTime" */ | String /* "toShort24HourTime" */ | String /* "toShortPaddedTime" */ | String /* "toShortPadded24HourTime" */ */ = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): TextExportSettings = definedExternally
    }
}
external open class Splitbar : StretchImg {
    open var target: Canvas = definedExternally
//    override var vertical: Boolean = definedExternally
//    override var src: String = definedExternally
//    override var hSrc: String = definedExternally
//    override var vSrc: String = definedExternally
//    override var capSize: Number = definedExternally
//    override var skinImgDir: String = definedExternally
//    override var showGrip: Boolean = definedExternally
//    override var gripImgSuffix: String = definedExternally
//    override var showDownGrip: Boolean = definedExternally
//    override var showRollOverGrip: Boolean = definedExternally
    open var showClosedGrip: Boolean = definedExternally
    open var targetAfter: Boolean = definedExternally
    open var invertClosedGripIfTargetAfter: Boolean = definedExternally
//    override var canDrag: Boolean = definedExternally
    open var canCollapse: Boolean = definedExternally
    open var canCollapseOnTap: Boolean = definedExternally
//    override var cursor: dynamic /* String /* "text" */ | String /* "auto" */ | String /* "move" */ | String /* "default" */ | String /* "wait" */ | String /* "hand" */ | String /* "help" */ | String /* "pointer" */ | String /* "arrow" */ | String /* "all-scroll" */ | String /* "crosshair" */ | String /* "col-resize" */ | String /* "row-resize" */ | String /* "e-resize" */ | String /* "w-resize" */ | String /* "n-resize" */ | String /* "s-resize" */ | String /* "se-resize" */ | String /* "ne-resize" */ | String /* "nw-resize" */ | String /* "sw-resize" */ | String /* "not-allowed" */ */ = definedExternally
    open var vResizeCursor: dynamic /* String /* "text" */ | String /* "auto" */ | String /* "move" */ | String /* "default" */ | String /* "wait" */ | String /* "hand" */ | String /* "help" */ | String /* "pointer" */ | String /* "arrow" */ | String /* "all-scroll" */ | String /* "crosshair" */ | String /* "col-resize" */ | String /* "row-resize" */ | String /* "e-resize" */ | String /* "w-resize" */ | String /* "n-resize" */ | String /* "s-resize" */ | String /* "se-resize" */ | String /* "ne-resize" */ | String /* "nw-resize" */ | String /* "sw-resize" */ | String /* "not-allowed" */ */ = definedExternally
    open var hResizeCursor: dynamic /* String /* "text" */ | String /* "auto" */ | String /* "move" */ | String /* "default" */ | String /* "wait" */ | String /* "hand" */ | String /* "help" */ | String /* "pointer" */ | String /* "arrow" */ | String /* "all-scroll" */ | String /* "crosshair" */ | String /* "col-resize" */ | String /* "row-resize" */ | String /* "e-resize" */ | String /* "w-resize" */ | String /* "n-resize" */ | String /* "s-resize" */ | String /* "se-resize" */ | String /* "ne-resize" */ | String /* "nw-resize" */ | String /* "sw-resize" */ | String /* "not-allowed" */ */ = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Splitbar = definedExternally
    }
}
external open class SectionStackSection {
    open var name: String = definedExternally
    open var ID: String = definedExternally
    open var controls: Array<Any?> = definedExternally
    open var title: String = definedExternally
    open var clipTitle: Boolean = definedExternally
    open var showClippedTitleOnHover: Boolean = definedExternally
    open var items: Array<Any?> = definedExternally
    open var showHeader: Boolean = definedExternally
    open var canTabToHeader: Boolean = definedExternally
    open var icon: String = definedExternally
    open var resizeable: Boolean = definedExternally
    open var canReorder: Boolean = definedExternally
    open var canDropBefore: Boolean = definedExternally
    open var expanded: Boolean = definedExternally
    open var hidden: Boolean = definedExternally
    open var canCollapse: Boolean = definedExternally
}
external open class FacadeDataSource : DataSource {
    open var queueRequests: Boolean = definedExternally
    open var queuedRequests: Array<Any?> = definedExternally
    open fun setQueueRequests(queueRequests: Boolean): Unit = definedExternally
    open fun clearQueue(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): FacadeDataSource = definedExternally
    }
}
external open class GroupSpecifier {
    open var property: String = definedExternally
    open var grouping: String = definedExternally
    open var normalizer: Function<*> = definedExternally
    open var context: DataBoundComponent = definedExternally
}
external open class DateTimeItem : DateItem {
//    override var useTextField: Boolean = definedExternally
//    override var browserInputType: String = definedExternally
//    override var displayFormat: dynamic /* String /* "toString" */ | String /* "toLocaleString" */ | String /* "toUSShortDate" */ | String /* "toUSShortDatetime" */ | String /* "toEuropeanShortDate" */ | String /* "toEuropeanShortDatetime" */ | String /* "toJapanShortDate" */ | String /* "toJapanShortDatetime" */ | String /* "toSerializeableDate" */ | String /* "toDateStamp" */ */ = definedExternally
//    override var inputFormat: String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DateTimeItem = definedExternally
    }
}
external open class ColumnTree : Layout, DataBoundComponent {
//    override var dataSource: dynamic /* String | DataSource */ = definedExternally
    open var data: Tree = definedExternally
    open var dataProperties: Tree = definedExternally
//    override var autoFetchData: Boolean = definedExternally
    open var autoFetchTextMatchStyle: dynamic /* String /* "startsWith" */ | String /* "exact" */ | String /* "exactCase" */ | String /* "substring" */ */ = definedExternally
//    override var initialCriteria: Any? = definedExternally
//    override var showDetailFields: Boolean = definedExternally
//    override var dataFetchMode: dynamic /* String /* "basic" */ | String /* "paged" */ | String /* "local" */ */ = definedExternally
    open var folderIcon: String = definedExternally
    open var customIconProperty: String = definedExternally
    open var nodeIcon: String = definedExternally
    open var openIconSuffix: String = definedExternally
    open var closedIconSuffix: String = definedExternally
    open var showOpenIcons: Boolean = definedExternally
    open var showCustomIconOpen: Boolean = definedExternally
    open var customIconOpenProperty: String = definedExternally
    open var showMultipleColumns: Boolean = definedExternally
    open var loadDataOnDemand: Boolean = definedExternally
    open var column: ListGrid = definedExternally
    open var columnProperties: ListGrid = definedExternally
//    override var fields: Array<Any?> = definedExternally
    open var showHeaders: Boolean = definedExternally
    open var firstColumnTitle: String = definedExternally
    open var showNodeCount: Boolean = definedExternally
    open var backButtonTitle: String = definedExternally
    open var backButton: IButton = definedExternally
    open fun fetchData(criteria: Any? = definedExternally /* null */, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun filterData(criteria: Any? = definedExternally /* null */, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun getSelectedRecord(): Record = definedExternally
    open fun navigateBack(): Unit = definedExternally
    open fun nodeSelected(column: ListGrid, node: TreeNode): Boolean = definedExternally
    open fun shouldShowHeader(node: TreeNode, colNum: Number): Unit = definedExternally
    open fun getColumnTitle(node: TreeNode, colNum: Number): Unit = definedExternally
    open fun getRecord(index: Number, colNum: Number? = definedExternally /* null */): TreeNode = definedExternally
    open fun getIcon(node: TreeNode): String = definedExternally
    open fun getNodeTitle(node: TreeNode, recordNum: Number, field: String): String = definedExternally
    open fun getData(): Unit = definedExternally
    open fun setData(newData: Tree): Unit = definedExternally
    open fun getColumn(column: Number): ListGrid = definedExternally
    open fun getColumn(column: TreeNode): ListGrid = definedExternally
    open fun getColumnProperties(node: TreeNode, colNum: Number): ListGrid = definedExternally
    open fun selectRecord(record: Number, newState: Boolean? = definedExternally /* null */, colNum: Number? = definedExternally /* null */): Unit = definedExternally
    open fun selectRecord(record: Record, newState: Boolean? = definedExternally /* null */, colNum: Number? = definedExternally /* null */): Unit = definedExternally
    open fun deselectRecord(record: Number, colNum: Number? = definedExternally /* null */): Unit = definedExternally
    open fun deselectRecord(record: Record, colNum: Number? = definedExternally /* null */): Unit = definedExternally
    open fun selectRecords(records: Number, newState: Boolean? = definedExternally /* null */, colNum: Number? = definedExternally /* null */): Unit = definedExternally
    open fun selectRecords(records: Array<Any?>, newState: Boolean? = definedExternally /* null */, colNum: Number? = definedExternally /* null */): Unit = definedExternally
    open fun deselectRecords(records: Number, colNum: Number? = definedExternally /* null */): Unit = definedExternally
    open fun deselectRecords(records: Array<Any?>, colNum: Number? = definedExternally /* null */): Unit = definedExternally
    open fun selectAllRecords(colNum: Number? = definedExternally /* null */): Unit = definedExternally
    open fun deselectAllRecords(colNum: Number? = definedExternally /* null */): Unit = definedExternally
    open fun anySelected(colNum: Number? = definedExternally /* null */): Boolean = definedExternally
//    override var deepCloneOnEdit: Boolean = definedExternally
//    override var deepCloneNonFieldValuesOnEdit: Boolean = definedExternally
//    override var dataPageSize: Number = definedExternally
//    override var dataFetchDelay: Number = definedExternally
//    override var useAllDataSourceFields: Boolean = definedExternally
//    override var showHiddenFields: Boolean = definedExternally
//    override var showComplexFields: Boolean = definedExternally
//    override var fetchOperation: String = definedExternally
//    override var updateOperation: String = definedExternally
//    override var addOperation: String = definedExternally
//    override var removeOperation: String = definedExternally
//    override var exportFields: Array<String> = definedExternally
//    override var exportAll: Boolean = definedExternally
//    override var exportIncludeSummaries: Boolean = definedExternally
//    override var dragRecategorize: dynamic /* String /* "never" */ | String /* "always" */ | String /* "checked" */ */ = definedExternally
//    override var preventDuplicates: Boolean = definedExternally
//    override var duplicateDragMessage: String = definedExternally
//    override var showOfflineMessage: Boolean = definedExternally
//    override var offlineMessage: String = definedExternally
//    override var offlineSaveMessage: String = definedExternally
//    override var addDropValues: Boolean = definedExternally
//    override var dropValues: Any = definedExternally
//    override var dataArity: String = definedExternally
//    override var progressiveLoading: Boolean = definedExternally
//    override var canEditFieldAttribute: String = definedExternally
//    override var useFlatFields: Boolean = definedExternally
//    override var canChangeNonFieldValues: Boolean = definedExternally
//    override var implicitCriteria: Any? = definedExternally
//    override var canEditHilites: Boolean = definedExternally
//    override var hilites: Array<Any?> = definedExternally
//    override var hiliteIcons: Array<String> = definedExternally
//    override var hiliteIconPosition: dynamic /* String /* "before" */ | String /* "after" */ | String /* "replace" */ */ = definedExternally
//    override var hiliteIconSize: Number = definedExternally
//    override var hiliteIconWidth: Number = definedExternally
//    override var hiliteIconHeight: Number = definedExternally
//    override var hiliteIconLeftPadding: Number = definedExternally
//    override var hiliteIconRightPadding: Number = definedExternally
//    override var hiliteProperty: String = definedExternally
//    override var hiliteState: String = definedExternally
//    override var fieldNamingStrategy: dynamic /* String /* "simple" */ | String /* "uuid" */ */ = definedExternally
//    override var editHilitesText: String = definedExternally
//    override var editHilitesDialogTitle: String = definedExternally
//    override var fieldEditorWindowTitle: String = definedExternally
//    override var fieldEditorWindow: Window = definedExternally
//    override var hiliteEditor: HiliteEditor = definedExternally
//    override var dragDataAction: dynamic /* String /* "none" */ | String /* "move" */ | String /* "copy" */ */ = definedExternally
//    override var dragTrackerStyle: String = definedExternally
//    override var badFormulaResultValue: String = definedExternally
//    override var missingSummaryFieldValue: String = definedExternally
//    override var canAddFormulaFields: Boolean = definedExternally
//    override var addFormulaFieldText: String = definedExternally
//    override var editFormulaFieldText: String = definedExternally
//    override var removeFormulaFieldText: String = definedExternally
//    override var canAddSummaryFields: Boolean = definedExternally
//    override var addSummaryFieldText: String = definedExternally
//    override var editSummaryFieldText: String = definedExternally
//    override var removeSummaryFieldText: String = definedExternally
//    override var includeHilitesInSummaryFields: Boolean = definedExternally
//    override var titleField: String = definedExternally
//    override var iconField: String = definedExternally
//    override var infoField: String = definedExternally
//    override var dataField: String = definedExternally
//    override var descriptionField: String = definedExternally
//    override var emptyExportMessage: String = definedExternally
//    override var multiSortDialogProperties: MultiSortDialog = definedExternally
//    override var multiSortDialogDefaults: MultiSortDialog = definedExternally
//    override var unknownErrorMessage: String = definedExternally
//    override var noErrorDetailsMessage: String = definedExternally
//    override fun dragComplete(): Unit = definedExternally
//    override fun dropComplete(transferredRecords: Array<Any?>): Unit = definedExternally
//    override fun getDataPathField(dataPath: String): Unit = definedExternally
//    override fun fieldIsEditable(field: String): Boolean = definedExternally
//    override fun fieldIsEditable(field: Number): Boolean = definedExternally
//    override fun fieldIsEditable(field: Any?): Boolean = definedExternally
//    override fun getField(fieldID: String): Any = definedExternally
//    override fun getField(fieldID: Number): Any = definedExternally
//    override fun getFieldNum(fieldName: String): Number = definedExternally
//    override fun find(advancedCriteria: AdvancedCriteria): Any = definedExternally
//    override fun findAll(advancedCriteria: AdvancedCriteria): Array<Any> = definedExternally
//    override fun findIndex(advancedCriteria: AdvancedCriteria): Number = definedExternally
//    override fun findNextIndex(startIndex: Number, advancedCriteria: AdvancedCriteria, endIndex: Number?): Number = definedExternally
//    override fun setDataSource(dataSource: String, fields: Array<Any?>?): Unit = definedExternally
//    override fun setDataSource(dataSource: DataSource, fields: Array<Any?>?): Unit = definedExternally
//    override fun exportData(requestProperties: DSRequest?, callback: Any?): Unit = definedExternally
//    override fun getFieldAlignments(): Array<dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */> = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "startsWith" */): Boolean = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "exact" */): Boolean = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "exactCase" */): Boolean = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "substring" */): Boolean = definedExternally
//    override fun findByKey(keyValue: Any): Record = definedExternally
//    override fun selectSingleRecord(record: Number): Unit = definedExternally
//    override fun selectSingleRecord(record: Record): Unit = definedExternally
//    override fun selectRange(startRow: Number, endRow: Number, newState: Boolean?): Unit = definedExternally
//    override fun deselectRange(startRow: Number, endRow: Number): Unit = definedExternally
//    override fun getSelectionLength(): Number = definedExternally
//    override fun getHilites(): Array<Any?> = definedExternally
//    override fun setHilites(hilites: Array<Any?>): Unit = definedExternally
//    override fun getHiliteState(): String = definedExternally
//    override fun setHiliteState(hiliteState: String): Unit = definedExternally
//    override fun enableHilite(hiliteID: String, enable: Boolean?): Unit = definedExternally
//    override fun disableHilite(hiliteID: String): Unit = definedExternally
//    override fun enableHiliting(enable: Boolean?): Unit = definedExternally
//    override fun disableHiliting(): Unit = definedExternally
//    override fun editHilites(): Unit = definedExternally
//    override fun transferRecords(dropRecords: Array<Any?>, targetRecord: Record, index: Number, sourceWidget: Canvas, callback: Any?): Unit = definedExternally
//    override fun getDropValues(record: Record, sourceDS: DataSource, targetRecord: Record, index: Number, sourceWidget: Canvas): Any = definedExternally
//    override fun transferDragData(): Array<Any> = definedExternally
//    override fun getDragData(source: DataBoundComponent): Array<Any?> = definedExternally
//    override fun transferSelectedData(source: DataBoundComponent, index: Number?, callback: Any?): Unit = definedExternally
//    override fun setDragTracker(): Boolean = definedExternally
//    override fun addFormulaField(): Unit = definedExternally
//    override fun editFormulaField(field: String): Unit = definedExternally
//    override fun getFormulaFieldValue(field: String, record: Record): dynamic /* String | Number */ = definedExternally
//    override fun addSummaryField(): Unit = definedExternally
//    override fun editSummaryField(field: String): Unit = definedExternally
//    override fun getSummaryFieldValue(field: String, record: Record): String = definedExternally
//    override fun shouldIncludeHiliteInSummaryField(summaryFieldName: String, usedFieldName: String): Boolean = definedExternally
//    override fun getRecordIndex(record: Record): Number = definedExternally
//    override fun getTitleFieldValue(record: Record): String = definedExternally
//    override fun getTitleField(): String = definedExternally
//    override fun getRecordHiliteCSSText(record: Record, cssText: String, field: String): String = definedExternally
//    override fun getSort(): Array<Any?> = definedExternally
//    override fun setSort(sortSpecifiers: Array<Any?>): Unit = definedExternally
//    override fun askForSort(): Unit = definedExternally
//    override fun isOffline(): Boolean = definedExternally
//    override fun editFields(): Unit = definedExternally
//    override fun userAddedField(field: ListGridField): Boolean = definedExternally
//    override fun selectionUpdated(record: Any, recordList: Array<Any?>): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ColumnTree = definedExternally
        fun requestsArePending(): Boolean = definedExternally
    }
//    override fun willFetchData(newCriteria: Any?): Boolean = definedExternally
}
external open class PortalLayout : Layout {
//    override var overflow: dynamic /* String /* "auto" */ | String /* "visible" */ | String /* "hidden" */ | String /* "scroll" */ | String /* "clip-h" */ | String /* "clip-v" */ */ = definedExternally
    open var columnOverflow: dynamic /* String /* "auto" */ | String /* "visible" */ | String /* "hidden" */ | String /* "scroll" */ | String /* "clip-h" */ | String /* "clip-v" */ */ = definedExternally
    open var canStretchColumnWidths: Boolean = definedExternally
    open var canShrinkColumnWidths: Boolean = definedExternally
    open var stretchColumnWidthsProportionally: Boolean = definedExternally
    open var preventUnderflow: Boolean = definedExternally
    open var preventColumnUnderflow: Boolean = definedExternally
    open var preventRowUnderflow: Boolean = definedExternally
    open var portlets: Array<Any?> = definedExternally
    open var numColumns: Number = definedExternally
    open var showColumnMenus: Boolean = definedExternally
    open var columnBorder: String = definedExternally
    open var canResizeColumns: Boolean = definedExternally
    open var canResizeRows: Boolean = definedExternally
    open var canResizePortlets: Boolean = definedExternally
    open var portletDropTypes: Array<String> = definedExternally
//    override var dropTypes: Array<String> = definedExternally
    open var row: Layout = definedExternally
    open var rowLayout: Layout = definedExternally
    open var column: Layout = definedExternally
    open fun setColumnOverflow(overflow: String /* "auto" */): Unit = definedExternally
    open fun setColumnOverflow(overflow: String /* "visible" */): Unit = definedExternally
    open fun setColumnOverflow(overflow: String /* "hidden" */): Unit = definedExternally
    open fun setColumnOverflow(overflow: String /* "scroll" */): Unit = definedExternally
    open fun setColumnOverflow(overflow: String /* "clip-h" */): Unit = definedExternally
    open fun setColumnOverflow(overflow: String /* "clip-v" */): Unit = definedExternally
    open fun setCanStretchColumnWidths(canStretch: Boolean): Unit = definedExternally
    open fun setCanShrinkColumnWidths(canShrink: Boolean): Unit = definedExternally
    open fun setStretchColumnWidthsProportionally(stretchProportionally: Boolean): Unit = definedExternally
    open fun setPreventUnderflow(preventUnderflow: Boolean): Unit = definedExternally
    open fun setColumnPreventUnderflow(preventColumnUnderflow: Boolean): Unit = definedExternally
    open fun setPreventRowUnderflow(preventRowUnderflow: Boolean): Unit = definedExternally
    open fun getNumColumns(): Number = definedExternally
    open fun setShowColumnMenus(showMenus: Boolean): Unit = definedExternally
    open fun setColumnBorder(columnBorder: String): Unit = definedExternally
    open fun setCanResizeColumns(canResize: Boolean): Unit = definedExternally
    open fun setCanResizeRows(canResize: Boolean): Unit = definedExternally
    open fun setCanResizePortlets(canResize: Boolean): Unit = definedExternally
    open fun setPortletDropTypes(portletDropTypes: Array<String>): Unit = definedExternally
    open fun willAcceptPortletDrop(dragTarget: Canvas, colNum: Number, rowNum: Number, dropPosition: Number? = definedExternally /* null */): Boolean = definedExternally
    open fun getDropPortlet(dragTarget: Canvas, colNum: Number, rowNum: Number, dropPosition: Number? = definedExternally /* null */): Canvas = definedExternally
    open fun addColumn(index: Number): Unit = definedExternally
    open fun removeColumn(index: Number): Unit = definedExternally
    open fun getPortlets(): Array<Any?> = definedExternally
    open fun getPortletArray(): Array<Any?> = definedExternally
    open fun getPortalPosition(portlet: Portlet): PortalPosition = definedExternally
    open fun addPortlet(portlet: Portlet, colNum: Number? = definedExternally /* null */, rowWithinCol: Number? = definedExternally /* null */, positionInExistingRow: Number? = definedExternally /* null */): Unit = definedExternally
    open fun setColumnWidth(colNumber: Number, width: String): Unit = definedExternally
    open fun setColumnWidth(colNumber: Number, width: Number): Unit = definedExternally
    open fun getColumnWidth(colNumber: Number): Number = definedExternally
    open fun removePortlet(portlet: Portlet): Unit = definedExternally
    open fun willMaximizePortlet(portlet: Portlet): Boolean = definedExternally
    open fun portletMaximized(portlet: Portlet): Unit = definedExternally
    open fun willMinimizePortlet(portlet: Portlet): Boolean = definedExternally
    open fun portletMinimized(portlet: Portlet): Unit = definedExternally
    open fun willRestorePortlet(portlet: Portlet): Boolean = definedExternally
    open fun portletRestored(portlet: Portlet): Unit = definedExternally
    open fun willClosePortlet(portlet: Portlet): Boolean = definedExternally
    open fun portletsChanged(): Unit = definedExternally
    open fun portletsResized(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): PortalLayout = definedExternally
    }
}
external open class ProcessSequence : ProcessElement {
    open var elements: Array<Any?> = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ProcessSequence = definedExternally
    }
}
external open class CheckboxItem : FormItem {
//    override var titleStyle: String = definedExternally
//    override var textBoxStyle: String = definedExternally
//    override var width: Number = definedExternally
//    override var showTitle: Boolean = definedExternally
    open var labelAsTitle: Boolean = definedExternally
    open var showLabel: Boolean = definedExternally
    open var showValueIconOver: Boolean = definedExternally
    open var showValueIconDown: Boolean = definedExternally
    open var showValueIconDisabled: Boolean = definedExternally
    open var checkedImage: String = definedExternally
    open var uncheckedImage: String = definedExternally
    open var partialSelectedImage: String = definedExternally
    open var printCheckedImage: String = definedExternally
    open var printUncheckedImage: String = definedExternally
    open var printPartialSelectedImage: String = definedExternally
    open var showUnsetImage: Boolean = definedExternally
    open var unsetImage: String = definedExternally
    open var printUnsetImage: String = definedExternally
    open var checkedDescription: String = definedExternally
    open var uncheckedDescription: String = definedExternally
    open var partialSelectedDescription: String = definedExternally
    open var unsetDescription: String = definedExternally
    open var booleanBaseStyle: String = definedExternally
    open var printBooleanBaseStyle: String = definedExternally
//    override var valueIconWidth: Number = definedExternally
//    override var valueIconHeight: Number = definedExternally
//    override var valueMap: dynamic /* Any? | Array<Any> */ = definedExternally
    open var allowEmptyValue: Boolean = definedExternally
    open var sizeToCheckboxImage: Boolean = definedExternally
//    override var editProxyConstructor: String = definedExternally
    open fun setValueMap(): Unit = definedExternally
    open fun getValueAsBoolean(): Boolean = definedExternally
//    override fun pendingStatusChanged(form: DynamicForm, item: FormItem, pendingStatus: Boolean, newValue: Any, value: Any): Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): CheckboxItem = definedExternally
    }
}
external open class TextImportSettings : TextSettings {
    open var hasHeaderLine: Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): TextImportSettings = definedExternally
    }
}
external open class Validator : Class {
    open var type: dynamic /* String /* "contains" */ | String /* "regexp" */ | String /* "custom" */ | String /* "readOnly" */ | String /* "isBoolean" */ | String /* "isString" */ | String /* "isInteger" */ | String /* "isFloat" */ | String /* "isFunction" */ | String /* "requiredIf" */ | String /* "matchesField" */ | String /* "isOneOf" */ | String /* "integerRange" */ | String /* "lengthRange" */ | String /* "doesntContain" */ | String /* "substringCount" */ | String /* "mask" */ | String /* "dateRange" */ | String /* "floatLimit" */ | String /* "floatRange" */ | String /* "floatPrecision" */ | String /* "required" */ | String /* "visibility" */ | String /* "enable" */ | String /* "isUnique" */ | String /* "hasRelatedRecord" */ | String /* "maxFileSize" */ | String /* "serverCustom" */ | String */ = definedExternally
    open var applyWhen: AdvancedCriteria = definedExternally
    open var dependentFields: Array<String> = definedExternally
    open var condition: dynamic /* String | ValidatorConditionCallback */ = definedExternally
    open var serverCondition: String = definedExternally
    open var serverObject: ServerObject = definedExternally
    open var resultingValue: Any = definedExternally
    open var errorMessage: String = definedExternally
    open var stopIfFalse: Boolean = definedExternally
    open var stopOnError: Boolean = definedExternally
    open var clientOnly: Boolean = definedExternally
    open var validateOnChange: Boolean = definedExternally
    open var caseSensitive: Boolean = definedExternally
    open var operationId: String = definedExternally
    open var serverOnly: Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Validator = definedExternally
        var notABoolean: String = definedExternally
        var notAString: String = definedExternally
        var notAnInteger: String = definedExternally
        var notADecimal: String = definedExternally
        var notADate: String = definedExternally
        var mustBeLessThan: String = definedExternally
        var mustBeGreaterThan: String = definedExternally
        var mustBeLaterThan: String = definedExternally
        var mustBeLaterThanTime: String = definedExternally
        var mustBeEarlierThan: String = definedExternally
        var mustBeEarlierThanTime: String = definedExternally
        var mustBeShorterThan: String = definedExternally
        var mustBeLongerThan: String = definedExternally
        var mustBeExactLength: String = definedExternally
        var requiredField: String = definedExternally
        var notOneOf: String = definedExternally
        var maxFileSizeExceeded: String = definedExternally
        var READONLY: String = definedExternally
        var HIDDEN: String = definedExternally
        var DISABLED: String = definedExternally
        fun addValidator(type: String, condition: (item: dynamic /* FormItem | DataSourceField | ListGridField */, validator: Validator, value: Any, record: Any, additionalContext: Any) -> Unit): Unit = definedExternally
        fun addValidators(newValidators: Any): Unit = definedExternally
        fun addValidatorDefinition(type: String, definition: ValidatorDefinition): Unit = definedExternally
        fun addValidatorDefinitions(newDefinitions: Any): Unit = definedExternally
    }
}
external open class DetailViewerRecord {
    open var linkText: String = definedExternally
}
external open class SerializationContext {
    open var useFlatFields: Boolean = definedExternally
}
external open class FusionChart : Flashlet, Chart {
    open var chartsBaseURL: String = definedExternally
    open var chartURL: String = definedExternally
    open var fusionVersion: String = definedExternally
    open var chartProperties: Any = definedExternally
    open var dataColors: Array<String> = definedExternally
    open fun getDataColor(index: Number): String = definedExternally
//    override var valueProperty: String = definedExternally
//    override var data: dynamic /* CellRecord | Array<Any?> */ = definedExternally
//    override var facets: dynamic /* Facet | Array<Any?> */ = definedExternally
//    override var stacked: Boolean = definedExternally
//    override var chartType: dynamic /* String /* "Area" */ | String /* "Column" */ | String /* "Bar" */ | String /* "Line" */ | String /* "Radar" */ | String /* "Pie" */ | String /* "Doughnut" */ | String /* "Scatter" */ | String /* "Bubble" */ | String /* "Histogram" */ */ = definedExternally
//    override var valueTitle: String = definedExternally
//    override var title: String = definedExternally
//    override var subTitle: String = definedExternally
//    override var threeD: Boolean = definedExternally
//    override var shouldAnimateShow: Boolean = definedExternally
//    override var labelValues: Boolean = definedExternally
//    override fun setupChart(): Unit = definedExternally
//    override fun getFacet(facetId: String): Facet = definedExternally
//    override fun getFacetValue(facetId: String, facetValueId: String): FacetValue = definedExternally
//    override fun getValue(criteria: FacetValueMap): Any = definedExternally
//    override fun setData(newData: CellRecord): Unit = definedExternally
//    override fun setData(newData: Array<Any?>): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): FusionChart = definedExternally
        var allChartTypes: Array<dynamic /* String /* "Area" */ | String /* "Column" */ | String /* "Bar" */ | String /* "Line" */ | String /* "Radar" */ | String /* "Pie" */ | String /* "Doughnut" */ | String /* "Scatter" */ | String /* "Bubble" */ | String /* "Histogram" */ */> = definedExternally
    }
}
external open class HStack : Layout {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): HStack = definedExternally
    }
}
external open class Layout : Canvas {
    open var members: Array<Any?> = definedExternally
//    override var overflow: dynamic /* String /* "auto" */ | String /* "visible" */ | String /* "hidden" */ | String /* "scroll" */ | String /* "clip-h" */ | String /* "clip-v" */ */ = definedExternally
    open var orientation: dynamic /* String /* "vertical" */ | String /* "horizontal" */ */ = definedExternally
    open var vertical: Boolean = definedExternally
    open var vPolicy: dynamic /* String /* "none" */ | String /* "fill" */ */ = definedExternally
    open var hPolicy: dynamic /* String /* "none" */ | String /* "fill" */ */ = definedExternally
    open var minMemberSize: Number = definedExternally
    open var minMemberLength: Number = definedExternally
    open var minBreadthMember: dynamic /* String | Number | Canvas */ = definedExternally
    open var enforcePolicy: Boolean = definedExternally
    open var defaultLayoutAlign: dynamic /* String /* "left" */ | String /* "top" */ | String /* "right" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
    open var align: dynamic /* String /* "left" */ | String /* "top" */ | String /* "right" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
    open var reverseOrder: Boolean = definedExternally
    open var paddingAsLayoutMargin: Boolean = definedExternally
    open var layoutMargin: Number = definedExternally
    open var layoutLeftMargin: Number = definedExternally
    open var layoutRightMargin: Number = definedExternally
    open var layoutTopMargin: Number = definedExternally
    open var layoutBottomMargin: Number = definedExternally
    open var membersMargin: Number = definedExternally
    open var leaveScrollbarGap: Boolean = definedExternally
    open var memberOverlap: Number = definedExternally
    open var defaultResizeBars: dynamic /* String /* "none" */ | String /* "all" */ | String /* "marked" */ | String /* "middle" */ */ = definedExternally
    open var resizeBar: Splitbar = definedExternally
    open var resizeBarClass: String = definedExternally
    open var resizeBarSize: Number = definedExternally
    open var animateMembers: Boolean = definedExternally
    open var animateMemberTime: Number = definedExternally
    open var canDropComponents: Boolean = definedExternally
    open var dropLineThickness: Number = definedExternally
    open var showDropLines: Boolean = definedExternally
    open var showDragPlaceHolder: Boolean = definedExternally
    open var placeHolderProperties: Canvas = definedExternally
    open var stackZIndex: String = definedExternally
    open var managePercentBreadth: Boolean = definedExternally
    open var placeHolderDefaults: Canvas = definedExternally
    open var dropLine: Canvas = definedExternally
    open var locateMembersBy: dynamic /* String /* "name" */ | String /* "title" */ | String /* "index" */ */ = definedExternally
    open var locateMembersType: dynamic /* String /* "none" */ | String /* "Class" */ | String /* "scClass" */ | String /* "role" */ */ = definedExternally
//    override var editProxyConstructor: String = definedExternally
    open fun getMemberOffset(member: Canvas, defaultOffset: Number, alignment: String): Unit = definedExternally
    open fun setAlign(align: String /* "left" */): Unit = definedExternally
    open fun setAlign(align: String /* "top" */): Unit = definedExternally
    open fun setAlign(align: String /* "right" */): Unit = definedExternally
    open fun setAlign(align: String /* "center" */): Unit = definedExternally
    open fun setAlign(align: String /* "bottom" */): Unit = definedExternally
    open fun setLayoutMargin(newMargin: Number? = definedExternally /* null */): Unit = definedExternally
//    override fun revealChild(child: String): Unit = definedExternally
//    override fun revealChild(child: Canvas): Unit = definedExternally
    open fun getMemberDefaultBreadth(member: Canvas, defaultBreadth: Number): Unit = definedExternally
    open fun getMemberSizes(): Array<Any> = definedExternally
    open fun layoutIsDirty(): Boolean = definedExternally
    open fun reflow(reason: String? = definedExternally /* null */): Unit = definedExternally
    open fun reflowNow(): Unit = definedExternally
    open fun getMember(memberID: String): Canvas = definedExternally
    open fun getMember(memberID: Number): Canvas = definedExternally
    open fun getMember(memberID: Canvas): Canvas = definedExternally
    open fun getMemberNumber(memberID: String): Number = definedExternally
    open fun getMemberNumber(memberID: Number): Number = definedExternally
    open fun getMemberNumber(memberID: Canvas): Number = definedExternally
    open fun hasMember(canvas: Canvas): Boolean = definedExternally
    open fun getMembers(): Array<Any?> = definedExternally
    open fun getMembersLength(): Number = definedExternally
    open fun addMember(newMember: Canvas, position: Number? = definedExternally /* null */): Unit = definedExternally
    open fun addMembers(newMembers: Canvas, position: Number? = definedExternally /* null */): Unit = definedExternally
    open fun addMembers(newMembers: Array<Any?>): Unit = definedExternally
    open fun removeMember(member: Canvas): Unit = definedExternally
    open fun removeMembers(members: Canvas): Unit = definedExternally
    open fun removeMembers(members: Array<Any?>): Unit = definedExternally
    open fun setMembers(members: Array<Any?>): Unit = definedExternally
    open fun showMember(member: Canvas, callback: Function<*>? = definedExternally /* null */): Unit = definedExternally
    open fun hideMember(member: Canvas, callback: Function<*>? = definedExternally /* null */): Unit = definedExternally
    open fun setVisibleMember(member: Canvas): Unit = definedExternally
    open fun reorderMember(memberNum: Number, newPosition: Number): Unit = definedExternally
    open fun reorderMembers(start: Number, end: Number, newPosition: Number): Unit = definedExternally
    open fun membersChanged(): Unit = definedExternally
//    override fun getChildTabPosition(child: Canvas): Number = definedExternally
    open fun getDropComponent(dragTarget: Canvas, dropPosition: Number): Canvas = definedExternally
//    override fun drop(): Boolean = definedExternally
    open fun getDropPosition(): Number = definedExternally
    open fun hideDropLine(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Layout = definedExternally
        var VERTICAL: String = definedExternally
        var HORIZONTAL: String = definedExternally
        var NONE: String = definedExternally
        var FILL: String = definedExternally
    }
}
external open class MenuButton : Button {
//    override var editProxyConstructor: String = definedExternally
//    override var title: String = definedExternally
//    override var height: dynamic /* String | Number */ = definedExternally
//    override var icon: String = definedExternally
    open var showMenuButtonImage: Boolean = definedExternally
    open var menuButtonImage: String = definedExternally
    open var menuButtonImageUp: String = definedExternally
//    override var hiliteAccessKey: Boolean = definedExternally
    open var showMenuBelow: Boolean = definedExternally
    open var menuAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var menu: Menu = definedExternally
    open var menuAnimationEffect: String = definedExternally
    open var autoDestroyMenu: Boolean = definedExternally
    open var showMenuOnRollOver: Boolean = definedExternally
    open var rollOverMenuHideDelay: Number = definedExternally
    open fun setShowMenuButtonImage(show: Boolean): Unit = definedExternally
    open fun setShowMenuBelow(below: Boolean): Unit = definedExternally
    open fun showMenu(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): MenuButton = definedExternally
    }
}
external open class DateChooser : VLayout {
    open var navigationLayout: HLayout = definedExternally
    open var closeOnDateClick: Boolean = definedExternally
    open var showFiscalYearChooser: Boolean = definedExternally
    open var fiscalYearChooserButton: IButton = definedExternally
    open var showWeekChooser: Boolean = definedExternally
    open var weekChooserButton: IButton = definedExternally
    open var previousYearButton: IButton = definedExternally
    open var previousMonthButton: IButton = definedExternally
    open var monthChooserButton: IButton = definedExternally
    open var yearChooserButton: IButton = definedExternally
    open var nextMonthButton: IButton = definedExternally
    open var nextYearButton: IButton = definedExternally
    open var buttonLayout: HLayout = definedExternally
    open var dateGrid: DateGrid = definedExternally
    open var todayButton: IButton = definedExternally
    open var cancelButton: IButton = definedExternally
    open var applyButton: IButton = definedExternally
    open var headerHeight: Number = definedExternally
    open var navigationLayoutHeight: Number = definedExternally
//    override var skinImgDir: String = definedExternally
    open var prevYearIcon: String = definedExternally
    open var prevYearIconRTL: String = definedExternally
    open var prevYearIconWidth: Number = definedExternally
    open var prevYearIconHeight: Number = definedExternally
    open var prevMonthIcon: String = definedExternally
    open var prevMonthIconRTL: String = definedExternally
    open var prevMonthIconWidth: Number = definedExternally
    open var prevMonthIconHeight: Number = definedExternally
    open var nextYearIcon: String = definedExternally
    open var nextYearIconRTL: String = definedExternally
    open var nextYearIconWidth: Number = definedExternally
    open var nextYearIconHeight: Number = definedExternally
    open var nextMonthIcon: String = definedExternally
    open var nextMonthIconRTL: String = definedExternally
    open var nextMonthIconWidth: Number = definedExternally
    open var nextMonthIconHeight: Number = definedExternally
    open var showDoubleYearIcon: Boolean = definedExternally
    open var yearMenuStyle: String = definedExternally
    open var startYear: Number = definedExternally
    open var endYear: Number = definedExternally
    open var monthMenuStyle: String = definedExternally
    open var weekMenuStyle: String = definedExternally
    open var buttonLayoutControls: Array<String> = definedExternally
    open var showTodayButton: Boolean = definedExternally
    open var showCancelButton: Boolean = definedExternally
    open var showApplyButton: Boolean = definedExternally
    open var todayButtonTitle: String = definedExternally
    open var cancelButtonTitle: String = definedExternally
    open var applyButtonTitle: String = definedExternally
    open var todayButtonHeight: Number = definedExternally
    open var disableWeekends: Boolean = definedExternally
    open var showWeekends: Boolean = definedExternally
    open var weekendDays: Array<Number> = definedExternally
    open var firstDayOfWeek: Number = definedExternally
    open var baseButtonStyle: String = definedExternally
    open var baseWeekdayStyle: String = definedExternally
    open var baseWeekendStyle: String = definedExternally
    open var baseFiscalYearStyle: String = definedExternally
    open var fiscalYearHeaderStyle: String = definedExternally
    open var baseWeekStyle: String = definedExternally
    open var weekHeaderStyle: String = definedExternally
    open var disabledDates: Array<Any?> = definedExternally
    open var disabledWeekdayStyle: String = definedExternally
    open var disabledWeekendStyle: String = definedExternally
    open var selectedWeekStyle: String = definedExternally
    open var alternateWeekStyles: Boolean = definedExternally
    open var alternateStyleSuffix: String = definedExternally
    open var headerStyle: String = definedExternally
    open var weekendHeaderStyle: String = definedExternally
    open var baseNavButtonStyle: String = definedExternally
    open var navButtonConstructor: String = definedExternally
    open var baseBottomButtonStyle: String = definedExternally
    open var useFirstDayOfFiscalWeek: Boolean = definedExternally
    open var closeOnEscapeKeypress: Boolean = definedExternally
    open var timeItem: TimeItem = definedExternally
    open var timeItemProperties: TimeItem = definedExternally
    open var showTimeItem: Boolean = definedExternally
    open var timeItemTitle: String = definedExternally
    open var use24HourTime: Boolean = definedExternally
    open var fiscalYearFieldTitle: String = definedExternally
    open var weekFieldTitle: String = definedExternally
    open var showSecondItem: Boolean = definedExternally
    open var dayNameLength: Number = definedExternally
    open fun setData(date: Date): Unit = definedExternally
    open fun getData(): Date = definedExternally
    open fun getFiscalCalendar(): FiscalCalendar = definedExternally
    open fun setFiscalCalendar(fiscalCalendar: FiscalCalendar? = definedExternally /* null */): Unit = definedExternally
    open fun getYearTitle(year: Number): String = definedExternally
    open fun getHeaderYearTitle(year: Number): String = definedExternally
    open fun dataChanged(): Unit = definedExternally
    open fun cancelClick(): Unit = definedExternally
    open fun todayClick(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DateChooser = definedExternally
    }
}
external open class SVG : BrowserPlugin {
    open var pluginsPage: String = definedExternally
    open var src: String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SVG = definedExternally
    }
}
external open class MockDataSource : DataSource {
    open var mockData: dynamic /* String | Array<Any?> */ = definedExternally
    open var mockDataType: dynamic /* String /* "grid" */ | String /* "tree" */ */ = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): MockDataSource = definedExternally
    }
}
external open class UserTask : Task {
    open var targetView: dynamic /* String | Canvas */ = definedExternally
    open var inlineView: Canvas = definedExternally
    open var targetForm: dynamic /* String | DynamicForm */ = definedExternally
    open var targetVM: dynamic /* String | ValuesManager */ = definedExternally
    open var saveToServer: Boolean = definedExternally
    open var wizard: Boolean = definedExternally
    open var cancelElement: String = definedExternally
    open var previousElement: String = definedExternally
    open fun goToPrevious(): Unit = definedExternally
    open fun cancelEditing(): Unit = definedExternally
    open fun completeEditing(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): UserTask = definedExternally
    }
}
external open class TreePalette : TreeGrid, Palette {
    open var componentDefaults: Any = definedExternally
//    override var defaultEditContext: dynamic /* EditContext | EditTree | EditPane */ = definedExternally
//    override var generateNames: Boolean = definedExternally
//    override fun setDefaultEditContext(defaultEditContext: EditContext): Unit = definedExternally
//    override fun setDefaultEditContext(defaultEditContext: EditTree): Unit = definedExternally
//    override fun setDefaultEditContext(defaultEditContext: EditPane): Unit = definedExternally
//    override fun makeEditNode(paletteNode: PaletteNode): EditNode = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): TreePalette = definedExternally
    }
}
external open class FiscalYear {
    open var fiscalYear: Number = definedExternally
    open var year: Number = definedExternally
    open var month: Number = definedExternally
    open var date: Number = definedExternally
}
external open class Menu : ListGrid {
    open var iconFieldProperties: ListGridField = definedExternally
    open var iconFieldDefaults: ListGridField = definedExternally
    open var titleFieldProperties: ListGridField = definedExternally
    open var titleFieldDefaults: ListGridField = definedExternally
    open var keyFieldProperties: ListGridField = definedExternally
    open var keyFieldDefaults: ListGridField = definedExternally
    open var submenuFieldProperties: ListGridField = definedExternally
    open var submenuFieldDefaults: ListGridField = definedExternally
//    override var data: dynamic /* Array<Any?> | Tree | Any */ = definedExternally
    open var items: Array<Any?> = definedExternally
//    override var dataSource: DataSource = definedExternally
//    override var initialCriteria: Any? = definedExternally
//    override var autoFetchData: Boolean = definedExternally
//    override var dataProperties: Tree = definedExternally
    open var target: Canvas = definedExternally
//    override var fields: dynamic /* Array<Any?> | Array<dynamic /* String /* "title" */ | String /* "icon" */ | String /* "key" */ | String /* "subMenu" */ */> */ = definedExternally
//    override var bodyStyleName: String = definedExternally
    open var iconBodyStyleName: String = definedExternally
//    override var defaultWidth: Number = definedExternally
//    override var cellHeight: Number = definedExternally
//    override var autoDraw: Boolean = definedExternally
//    override var baseStyle: String = definedExternally
//    override var alternateRecordStyles: Boolean = definedExternally
    open var useKeys: Boolean = definedExternally
    open var showKeys: Boolean = definedExternally
    open var showIcons: Boolean = definedExternally
    open var showSubmenus: Boolean = definedExternally
    open var submenuDirection: String = definedExternally
//    override var emptyMessage: String = definedExternally
    open var iconWidth: Number = definedExternally
    open var iconHeight: Number = definedExternally
    open var showAnimationEffect: String = definedExternally
    open var submenuImage: Img = definedExternally
    open var submenuDisabledImage: Img = definedExternally
    open var checkmarkImage: Img = definedExternally
    open var checkmarkDisabledImage: Img = definedExternally
    open var canSelectParentItems: Boolean = definedExternally
    open var autoDismiss: Boolean = definedExternally
    open var cascadeAutoDismiss: Boolean = definedExternally
    open var autoDismissOnBlur: Boolean = definedExternally
    open var submenuConstructor: String = definedExternally
    open var fetchSubmenus: Boolean = definedExternally
    open var placement: dynamic /* String /* "none" */ | String /* "nearOrigin" */ | String /* "fillPanel" */ | String /* "fillScreen" */ | String /* "halfScreen" */ */ = definedExternally
    open var navigationBar: NavigationBar = definedExternally
    open var cancelButtonTitle: String = definedExternally
    open var navStack: Canvas = definedExternally
//    override var showEdges: Boolean = definedExternally
//    override var showShadow: Boolean = definedExternally
    open var fillSpaceStyleName: String = definedExternally
    open var iconFillSpaceStyleName: String = definedExternally
    open var menuButtonWidth: Number = definedExternally
//    override fun setCriteria(criteria: Any?): Unit = definedExternally
//    override fun setCriteria(criteria: AdvancedCriteria): Unit = definedExternally
//    override fun fetchData(criteria: Any?, callback: Any?, requestProperties: DSRequest?): Unit = definedExternally
    open fun setShowIcons(showIcons: Boolean): Unit = definedExternally
    open fun setShowSubmenus(showSubmenus: Boolean): Unit = definedExternally
    open fun itemClick(item: Any, colNum: Number? = definedExternally /* null */): Boolean = definedExternally
//    override fun showContextMenu(): Boolean = definedExternally
//    open fun setData(items: Array<Any?>): Unit = definedExternally
    open fun setData(items: Tree): Unit = definedExternally
    open fun setData(items: Any): Unit = definedExternally
    open fun setItems(items: Array<Any?>): Unit = definedExternally
//    override fun hideContextMenu(): Unit = definedExternally
    open fun getItem(item: Number): MenuItem = definedExternally
    open fun setItemProperties(item: Number, properties: MenuItem): Unit = definedExternally
    open fun getItemNum(item: Number): Number = definedExternally
    open fun getItemNum(item: MenuItem): Number = definedExternally
    open fun getItems(): Array<Any?> = definedExternally
//    override fun getCellStyle(record: ListGridRecord, rowNum: Number, colNum: Number): String = definedExternally
    open fun showSubmenu(item: Number): Unit = definedExternally
    open fun showSubmenu(item: MenuItem): Unit = definedExternally
    open fun getSubmenu(item: Number): Menu = definedExternally
    open fun getSubmenu(item: MenuItem): Menu = definedExternally
    open fun setItemEnabled(item: Number, newState: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun setItemEnabled(item: MenuItem, newState: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun setItemChecked(item: Number, newState: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun setItemChecked(item: MenuItem, newState: Boolean? = definedExternally /* null */): Boolean = definedExternally
    open fun setItemTitle(item: Number, newTitle: String): Boolean = definedExternally
    open fun setItemTitle(item: MenuItem, newTitle: String): Boolean = definedExternally
    open fun setItemIcon(item: Number, newIcon: String, newDisabledIcon: String? = definedExternally /* null */): Boolean = definedExternally
    open fun setItemIcon(item: MenuItem, newIcon: String, newDisabledIcon: String? = definedExternally /* null */): Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Menu = definedExternally
        fun hideAllMenus(): Unit = definedExternally
    }
}
external open class DrawImage : DrawItem {
    open var left: Number = definedExternally
    open var top: Number = definedExternally
    open var width: Number = definedExternally
    open var height: Number = definedExternally
//    override var title: String = definedExternally
    open var src: String = definedExternally
    open var useMatrixFilter: Boolean = definedExternally
//    override fun getBoundingBox(): Array<Number> = definedExternally
//    override fun getCenter(): Point = definedExternally
    open fun setSrc(src: String): Unit = definedExternally
    open fun setLeft(left: Number): Unit = definedExternally
    open fun setTop(top: Number): Unit = definedExternally
    open fun setWidth(width: Number): Unit = definedExternally
    open fun setHeight(height: Number): Unit = definedExternally
    open fun setRect(left: Number, top: Number, width: Number, height: Number): Unit = definedExternally
//    override fun moveBy(dX: Number, dY: Number): Unit = definedExternally
//    override fun moveTo(left: Number, top: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DrawImage = definedExternally
    }
}
external open class Date {
    open fun duplicate(): Unit = definedExternally
    open fun getShortDayName(length: Number): String = definedExternally
    open fun getDayName(): String = definedExternally
    open fun getShortMonthName(length: Number): String = definedExternally
    open fun getMonthName(): String = definedExternally
    open fun getShortYear(): String = definedExternally
    open fun getWeek(): Number = definedExternally
    open fun getFiscalYear(): FiscalYear = definedExternally
    open fun getFiscalWeek(fiscalCalendar: FiscalCalendar? = definedExternally /* null */): Number = definedExternally
    open fun toDateStamp(): String = definedExternally
    open fun toNormalDate(format: String /* "toString" */): String = definedExternally
    open fun toNormalDate(format: String /* "toLocaleString" */): String = definedExternally
    open fun toNormalDate(format: String /* "toUSShortDate" */): String = definedExternally
    open fun toNormalDate(format: String /* "toUSShortDatetime" */): String = definedExternally
    open fun toNormalDate(format: String /* "toEuropeanShortDate" */): String = definedExternally
    open fun toNormalDate(format: String /* "toEuropeanShortDatetime" */): String = definedExternally
    open fun toNormalDate(format: String /* "toJapanShortDate" */): String = definedExternally
    open fun toNormalDate(format: String /* "toJapanShortDatetime" */): String = definedExternally
    open fun toNormalDate(format: String /* "toSerializeableDate" */): String = definedExternally
    open fun toNormalDate(format: String /* "toDateStamp" */): String = definedExternally
    open fun toNormalDatetime(format: String /* "toString" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toNormalDatetime(format: String /* "toLocaleString" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toNormalDatetime(format: String /* "toUSShortDate" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toNormalDatetime(format: String /* "toUSShortDatetime" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toNormalDatetime(format: String /* "toEuropeanShortDate" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toNormalDatetime(format: String /* "toEuropeanShortDatetime" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toNormalDatetime(format: String /* "toJapanShortDate" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toNormalDatetime(format: String /* "toJapanShortDatetime" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toNormalDatetime(format: String /* "toSerializeableDate" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toNormalDatetime(format: String /* "toDateStamp" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toShortDate(format: String /* "toString" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toShortDate(format: String /* "toLocaleString" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toShortDate(format: String /* "toUSShortDate" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toShortDate(format: String /* "toUSShortDatetime" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toShortDate(format: String /* "toEuropeanShortDate" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toShortDate(format: String /* "toEuropeanShortDatetime" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toShortDate(format: String /* "toJapanShortDate" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toShortDate(format: String /* "toJapanShortDatetime" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toShortDate(format: String /* "toSerializeableDate" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toShortDate(format: String /* "toDateStamp" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toShortDateTime(format: String /* "toString" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toShortDateTime(format: String /* "toLocaleString" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toShortDateTime(format: String /* "toUSShortDate" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toShortDateTime(format: String /* "toUSShortDatetime" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toShortDateTime(format: String /* "toEuropeanShortDate" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toShortDateTime(format: String /* "toEuropeanShortDatetime" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toShortDateTime(format: String /* "toJapanShortDate" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toShortDateTime(format: String /* "toJapanShortDatetime" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toShortDateTime(format: String /* "toSerializeableDate" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun toShortDateTime(format: String /* "toDateStamp" */, useCustomTimezone: Boolean? = definedExternally /* null */): String = definedExternally
    open fun setDefaultDateSeparator(separator: String): Unit = definedExternally
    open fun getDefaultDateSeparator(): String = definedExternally
    open fun toUSShortDate(): String = definedExternally
    open fun toUSShortDateTime(): String = definedExternally
    open fun toEuropeanShortDate(): String = definedExternally
    open fun toEuropeanShortDateTime(): String = definedExternally
    open fun toJapanShortDate(): String = definedExternally
    open fun toJapanShortDateTime(): String = definedExternally
    open fun toSerializeableDate(): String = definedExternally
    open fun setFormatter(functionName: String): Unit = definedExternally
    open fun toPrettyString(): String = definedExternally
    companion object {
        var dayNames: Array<Any> = definedExternally
        var shortDayNames: Array<Any> = definedExternally
        var monthNames: Array<Any> = definedExternally
        var shortMonthNames: Array<Any> = definedExternally
        var weekendDays: Array<Number> = definedExternally
        fun createLogicalDate(year: Number, month: Number, date: Number): Date = definedExternally
        fun createLogicalTime(hour: Number, minute: Number, second: Number): Date = definedExternally
        fun getLogicalDateOnly(date: Date): Date = definedExternally
        fun getLogicalTimeOnly(date: Date): Date = definedExternally
        fun combineLogicalDateAndTime(date: Date, time: Date): Date = definedExternally
        fun compareDates(date1: Date, date2: Date): Number = definedExternally
        fun compareLogicalDates(date1: Date, date2: Date): Number = definedExternally
        fun setInputFormat(format: String): Unit = definedExternally
        fun setInputFormat(format: Function<*>): Unit = definedExternally
        fun getInputFormat(): String = definedExternally
        fun parseInput(dateString: String, format: String? = definedExternally /* null */, centuryThreshold: Number? = definedExternally /* null */, suppressConversion: Boolean? = definedExternally /* null */): Date = definedExternally
        fun setNormalDisplayFormat(format: String): Unit = definedExternally
        fun setNormalDisplayFormat(format: Function<*>): Unit = definedExternally
        fun setNormalDatetimeDisplayFormat(format: String): Unit = definedExternally
        fun setNormalDatetimeDisplayFormat(format: Function<*>): Unit = definedExternally
        fun setShortDisplayFormat(format: String): Unit = definedExternally
        fun setShortDisplayFormat(format: Function<*>): Unit = definedExternally
        fun setDefaultDateSeparator(separator: String): Unit = definedExternally
        fun getDefaultDateSeparator(): String = definedExternally
        fun setShortDatetimeDisplayFormat(format: String): Unit = definedExternally
        fun setShortDatetimeDisplayFormat(format: Function<*>): Unit = definedExternally
        fun setFiscalCalendar(fiscalCalendar: FiscalCalendar): Unit = definedExternally
        fun getFiscalCalendar(): FiscalCalendar = definedExternally
        fun getFiscalStartDate(date: Number, fiscalCalendar: FiscalCalendar? = definedExternally /* null */): Date = definedExternally
        fun getFiscalStartDate(date: Date, fiscalCalendar: FiscalCalendar? = definedExternally /* null */): Date = definedExternally
        fun setShowChooserFiscalYearPickers(showChooserFiscalYearPickers: Boolean): Unit = definedExternally
        fun setShowChooserWeekPickers(showChooserWeekPickers: Boolean): Unit = definedExternally
        fun setFirstDayOfWeek(firstDayOfWeek: Number): Unit = definedExternally
        fun getFirstDayOfWeek(): Number = definedExternally
        fun getFiscalYear(date: Number, fiscalCalendar: FiscalCalendar? = definedExternally /* null */): FiscalYear = definedExternally
        fun getFiscalYear(date: Date, fiscalCalendar: FiscalCalendar? = definedExternally /* null */): FiscalYear = definedExternally
        fun getFiscalWeek(date: Date, fiscalCalendar: FiscalCalendar? = definedExternally /* null */): Number = definedExternally
        fun setWeekendDays(weekendDays: Array<Number>): Unit = definedExternally
        fun getWeekendDays(): Array<Number> = definedExternally
    }
}
external open class SearchForm : DynamicForm {
//    override var canEditFieldAttribute: String = definedExternally
//    override var storeDisplayValues: Boolean = definedExternally
    open var showFilterFieldsOnly: Boolean = definedExternally
    open fun search(criteria: Any?, form: SearchForm): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SearchForm = definedExternally
    }
}
external open class Portlet : Window {
//    override var dragType: String = definedExternally
//    override var canDrop: Boolean = definedExternally
//    override var minHeight: Number = definedExternally
//    override var minWidth: Number = definedExternally
//    override var height: dynamic /* String | Number */ = definedExternally
    open var rowHeight: dynamic /* String | Number */ = definedExternally
    open var showCloseConfirmationMessage: Boolean = definedExternally
    open var closeConfirmationMessage: String = definedExternally
    open var closeConfirmationDialogProperties: Dialog = definedExternally
    open var destroyOnClose: Boolean = definedExternally
//    override var editProxyConstructor: String = definedExternally
//    open fun setHeight(height: Number): Unit = definedExternally
    open fun setRowHeight(height: Number): Unit = definedExternally
    open fun getPortalLayout(): PortalLayout = definedExternally
    open fun getPortalPosition(): PortalPosition = definedExternally
//    override fun closeClick(): Boolean = definedExternally
//    override fun close(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Portlet = definedExternally
    }
}
external open class FieldPicker : VLayout {
    open var dataBoundComponent: Canvas = definedExternally
    open var dataSource: DataSource = definedExternally
    open var sampleRecord: dynamic /* Record | String /* "first" */ | String /* "firstOpenLeaf" */ */ = definedExternally
    open var showHilitesButton: Boolean = definedExternally
    open var showFieldOrderButtons: Boolean = definedExternally
    open var hilitesText: String = definedExternally
    open var availableFieldsTitle: String = definedExternally
    open var currentFieldsTitle: String = definedExternally
    open var addCustomFieldsButtonTitle: String = definedExternally
    open var availableTitleTitle: String = definedExternally
    open var currentTitleTitle: String = definedExternally
    open var sampleValueTitle: String = definedExternally
    open var canFilterSampleValue: Boolean = definedExternally
    open var confirmText: String = definedExternally
    open var removeText: String = definedExternally
    open var instructions: String = definedExternally
    open var instructionLabel: Label = definedExternally
    open var saveAndExitButtonTitle: String = definedExternally
    open var cancelButtonTitle: String = definedExternally
    open var removeItemTitle: String = definedExternally
    open var emptyTitleHint: String = definedExternally
    open var availableFieldsHeaderControls: Array<Any?> = definedExternally
    open var availableFieldsGrid: ListGrid = definedExternally
    open var buttonLayout: HLayout = definedExternally
    open var saveAndExitButton: IButton = definedExternally
    open var cancelChangesButton: IButton = definedExternally
    open var currentFieldsGrid: ListGrid = definedExternally
    open fun callback(fields: Array<Any?>, hilites: Array<Any?>): Unit = definedExternally
    open fun setAvailableFields(newFields: Array<Any?>): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): FieldPicker = definedExternally
    }
}
external open class FormulaBuilder : VLayout {
    open var dataSource: dynamic /* String | DataSource */ = definedExternally
    open var targetRuleScope: dynamic /* String | Canvas */ = definedExternally
    open var fields: Array<String> = definedExternally
    open var field: String = definedExternally
    open var editMode: Boolean = definedExternally
    open var formulaField: TextItem = definedExternally
    open var titleField: TextItem = definedExternally
    open var showHelpIcon: Boolean = definedExternally
    open var helpIcon: FormItemIcon = definedExternally
    open var autoHideCheckBoxLabel: String = definedExternally
    open var showAutoHideCheckBox: Boolean = definedExternally
    open var autoHideCheckBox: TextItem = definedExternally
    open var builderTypeText: String = definedExternally
    open var mathFunctions: Array<String> = definedExternally
    open var cancelled: Boolean = definedExternally
    open var valuePrefix: String = definedExternally
    open var valueSuffix: String = definedExternally
    open var nearbyComponentFieldPrompt: String = definedExternally
    open var currentComponentFieldPrompt: String = definedExternally
    open var dataSourceFieldPrompt: String = definedExternally
    open var fieldKey: ListGrid = definedExternally
    open var instructionsTextStart: String = definedExternally
    open var instructions: Label = definedExternally
    open var messageLabel: Label = definedExternally
    open var cancelButton: Button = definedExternally
    open var testButton: Button = definedExternally
    open var saveAddAnotherButton: Button = definedExternally
    open var saveButton: Button = definedExternally
    open var invalidBuilderPrompt: String = definedExternally
    open var defaultErrorText: String = definedExternally
    open var invalidBlankPrompt: String = definedExternally
    open var validBuilderPrompt: String = definedExternally
    open var helpWindowTitle: String = definedExternally
    open var titleFieldTitle: String = definedExternally
    open var defaultNewFieldTitle: String = definedExternally
    open var keyColumnTitle: String = definedExternally
    open var sourceFieldColumnTitle: String = definedExternally
    open var cancelButtonTitle: String = definedExternally
    open var saveAddAnotherButtonTitle: String = definedExternally
    open var saveButtonTitle: String = definedExternally
    open var saveConfirmationPrompt: String = definedExternally
    open var invalidGeneratedFunctionPrompt: String = definedExternally
    open var sampleHeaderTitle: String = definedExternally
    open var testButtonTitle: String = definedExternally
    open var warnDuplicateTitles: String = definedExternally
    open var warnDuplicateTitlesMessage: String = definedExternally
    open var autoTest: Boolean = definedExternally
    open var autoTestDelay: Number = definedExternally
    open var testRecord: Record = definedExternally
    open var samplePrompt: String = definedExternally
    open fun setFormula(newValue: String): Unit = definedExternally
    open fun getHelpText(): String = definedExternally
    open fun getUpdatedFieldObject(): String = definedExternally
    open fun testFunction(): String = definedExternally
    open fun getTestRecord(): Record = definedExternally
    open fun saveAddAnother(): Unit = definedExternally
    open fun save(): Unit = definedExternally
    open fun fireOnClose(): Unit = definedExternally
    open fun getSamplePrompt(result: TestFunctionResult): String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): FormulaBuilder = definedExternally
    }
}
external open class WindowEditProxy : LayoutEditProxy {
//    override fun getInlineEditText(): Unit = definedExternally
//    override fun setInlineEditText(newValue: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): WindowEditProxy = definedExternally
    }
}
external open class SectionStack : VLayout {
//    override var overflow: dynamic /* String /* "auto" */ | String /* "visible" */ | String /* "hidden" */ | String /* "scroll" */ | String /* "clip-h" */ | String /* "clip-v" */ */ = definedExternally
//    override var styleName: String = definedExternally
    open var sectionHeaderClass: String = definedExternally
    open var headerHeight: Number = definedExternally
    open var sections: Array<Any?> = definedExternally
    open var canResizeSections: Boolean = definedExternally
//    override var canDropComponents: Boolean = definedExternally
    open var canReorderSections: Boolean = definedExternally
    open var canTabToHeaders: Boolean = definedExternally
    open var scrollSectionIntoView: Boolean = definedExternally
    open var useGlobalSectionIDs: Boolean = definedExternally
    open var animateSections: Boolean = definedExternally
    open var visibilityMode: dynamic /* String /* "multiple" */ | String /* "mutex" */ */ = definedExternally
    open var canCollapseAll: Boolean = definedExternally
    open var itemIndent: Number = definedExternally
    open var itemStartIndent: Number = definedExternally
    open var itemEndIndent: Number = definedExternally
    open var showExpandControls: Boolean = definedExternally
    open var locateSectionsBy: dynamic /* String /* "name" */ | String /* "title" */ | String /* "index" */ */ = definedExternally
    open var locateSectionsType: dynamic /* String /* "none" */ | String /* "Class" */ | String /* "scClass" */ | String /* "role" */ */ = definedExternally
//    override var editProxyConstructor: String = definedExternally
    open fun setVisibilityMode(newVisibilityMode: String /* "multiple" */): Unit = definedExternally
    open fun setVisibilityMode(newVisibilityMode: String /* "mutex" */): Unit = definedExternally
    open fun addItem(section: String, item: Canvas, index: Number): Unit = definedExternally
    open fun addItem(section: Number, item: Canvas, index: Number): Unit = definedExternally
    open fun removeItem(section: String, item: Canvas): Unit = definedExternally
    open fun removeItem(section: Number, item: Canvas): Unit = definedExternally
    open fun setItems(section: String, items: Array<Any?>): Unit = definedExternally
    open fun setItems(section: Number, items: Array<Any?>): Unit = definedExternally
    open fun setSectionProperties(section: String, properties: SectionStackSection): Unit = definedExternally
    open fun setSectionProperties(section: Number, properties: SectionStackSection): Unit = definedExternally
    open fun addSection(sections: SectionStackSection, position: Number? = definedExternally /* null */): Unit = definedExternally
    open fun addSection(sections: Array<Any?>, position: Number? = definedExternally /* null */): Unit = definedExternally
    open fun removeSection(sections: String): Unit = definedExternally
    open fun removeSection(sections: Number): Unit = definedExternally
    open fun removeSection(sections: Array<Number>): Unit = definedExternally
    open fun removeSection(sections: Array<String>): Unit = definedExternally
    open fun getSectionNames(): List = definedExternally
    open fun getSections(): List = definedExternally
    open fun reorderSection(section: String, position: Number): Unit = definedExternally
    open fun reorderSection(section: Number, position: Number): Unit = definedExternally
    open fun moveSection(sections: String, position: Number): Unit = definedExternally
    open fun moveSection(sections: Number, position: Number): Unit = definedExternally
    open fun moveSection(sections: Array<Number>, position: Number): Unit = definedExternally
    open fun moveSection(sections: Array<String>, position: Number): Unit = definedExternally
    open fun showSection(sections: String, callback: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun showSection(sections: Number, callback: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun showSection(sections: Array<Number>, callback: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun showSection(sections: Array<String>, callback: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun expandSection(sections: String, callback: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun expandSection(sections: Number, callback: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun expandSection(sections: Array<Number>, callback: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun expandSection(sections: Array<String>, callback: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun sectionForItem(item: Canvas): SectionStackSection = definedExternally
//    override fun revealChild(child: String): Unit = definedExternally
//    override fun revealChild(child: Canvas): Unit = definedExternally
    open fun hideSection(sections: String, callback: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun hideSection(sections: Number, callback: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun hideSection(sections: Array<Number>, callback: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun hideSection(sections: Array<String>, callback: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun collapseSection(sections: String, callback: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun collapseSection(sections: Number, callback: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun collapseSection(sections: Array<Number>, callback: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun collapseSection(sections: Array<String>, callback: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun sectionIsVisible(section: String): Boolean = definedExternally
    open fun sectionIsVisible(section: Number): Boolean = definedExternally
    open fun getVisibleSections(): List = definedExternally
    open fun sectionIsExpanded(section: String): Boolean = definedExternally
    open fun sectionIsExpanded(section: Number): Boolean = definedExternally
    open fun getExpandedSections(): List = definedExternally
    open fun setSectionTitle(section: String, newTitle: String): Unit = definedExternally
    open fun setSectionTitle(section: Number, newTitle: String): Unit = definedExternally
    open fun getSectionHeader(section: String): SectionHeader = definedExternally
    open fun getSectionHeader(section: Number): SectionHeader = definedExternally
    open fun getSectionNumber(sectionName: String): Number = definedExternally
    open fun sectionHeaderClick(sectionHeader: Canvas): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SectionStack = definedExternally
    }
}
external open class XJSONDataSource : DataSource {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): XJSONDataSource = definedExternally
    }
}
external open class SubmitItem : ButtonItem {
//    override var title: String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SubmitItem = definedExternally
    }
}
external open class WebService : Class {
    open var serviceNamespace: String = definedExternally
    open var globalNamespaces: Any = definedExternally
    open fun getOperationNames(): Array<Any> = definedExternally
    open fun getSchema(schemaName: String, schemaType: String? = definedExternally /* null */): DataSource = definedExternally
    open fun callOperation(operationName: String, data: Any, resultType: String, callback: Any?, requestProperties: WSRequest): Unit = definedExternally
    open fun getSoapMessage(wsRequest: WSRequest): String = definedExternally
    open fun getInputDS(operationName: String): DataSource = definedExternally
    open fun getInputHeaderSchema(operationName: String): Any = definedExternally
    open fun getOutputHeaderSchema(operationName: String): Any = definedExternally
    open fun getHeaderData(dsRequest: DSRequest): Any = definedExternally
    open fun getFetchDS(operationName: String, resultType: String, operationBindingProperties: OperationBinding? = definedExternally /* null */): Unit = definedExternally
    open fun setLocation(location: String, operation: String? = definedExternally /* null */): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): WebService = definedExternally
        fun get(serviceNamespace: String): WebService = definedExternally
        fun getByName(serviceName: String, serviceNamespace: String? = definedExternally /* null */): WebService = definedExternally
    }
}
external open class Label : Button {
//    override var contents: String = definedExternally
//    override var dynamicContents: Boolean = definedExternally
//    override var align: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
//    override var valign: dynamic /* String /* "top" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
//    override var wrap: Boolean = definedExternally
//    override var autoFit: Boolean = definedExternally
//    override var icon: String = definedExternally
//    override var iconSize: Number = definedExternally
//    override var iconWidth: Number = definedExternally
//    override var iconHeight: Number = definedExternally
//    override var iconOrientation: String = definedExternally
//    override var iconAlign: String = definedExternally
//    override var iconSpacing: Number = definedExternally
//    override var showDisabledIcon: Boolean = definedExternally
//    override var showRollOverIcon: Boolean = definedExternally
//    override var showFocusedIcon: Boolean = definedExternally
//    override var showDownIcon: Boolean = definedExternally
//    override var showSelectedIcon: Boolean = definedExternally
//    override var styleName: String = definedExternally
//    override var editProxyConstructor: String = definedExternally
//    override fun setIconOrientation(orientation: String): Unit = definedExternally
//    override fun setIcon(icon: String): Unit = definedExternally
//    override fun setStyleName(newStyle: String): Unit = definedExternally
//    override fun setContents(newContents: String?): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Label = definedExternally
    }
}
external open class AdvancedCriteria : Criterion {
    open var strictSQLFiltering: Boolean = definedExternally
}
external open class EditTree : TreeGrid, EditContext {
    open var editContext: EditContext = definedExternally
//    override var autoEditNewNodes: Boolean = definedExternally
//    override var rootComponent: PaletteNode = definedExternally
//    override var defaultPalette: Palette = definedExternally
//    override var extraPalettes: Array<Any?> = definedExternally
//    override var persistCoordinates: Boolean = definedExternally
//    override var allowNestedDrops: Boolean = definedExternally
//    override var showSelectedLabel: Boolean = definedExternally
//    override var selectedBorder: String = definedExternally
//    override var selectedLabelBackgroundColor: String = definedExternally
//    override var canGroupSelect: Boolean = definedExternally
//    override var canDragGroup: Boolean = definedExternally
//    override var hideGroupBorderOnDrag: Boolean = definedExternally
    override var useCopyPasteShortcuts: Boolean? get() = definedExternally; set(value) = definedExternally

    open fun getEditContext(): EditContext = definedExternally
//    override fun getRootEditNode(): EditNode = definedExternally
//    override fun makeEditNode(paletteNode: PaletteNode): EditNode = definedExternally
//    override fun getEditNodeTree(): Tree = definedExternally
//    override fun addNode(newNode: EditNode, parentNode: EditNode?, index: Number?, parentProperty: String?, skipParentComponentAdd: Boolean?, forceSingularFieldReplace: Boolean?): EditNode = definedExternally
//    override fun addFromPaletteNode(paletteNode: PaletteNode, parentNode: EditNode?): EditNode = definedExternally
//    override fun addFromPaletteNodes(paletteNodes: Array<Any?>, parentNode: EditNode?): Array<Any?> = definedExternally
//    override fun removeNode(editNode: EditNode): Unit = definedExternally
    open fun reorderNode(parentNode: EditNode, index: Number, moveToIndex: Number): Unit = definedExternally
//    override fun removeAll(): Unit = definedExternally
//    override fun destroyAll(): Unit = definedExternally
//    override fun isNodeEditingOn(editNode: EditNode): Boolean = definedExternally
//    override fun enableEditing(editNode: EditNode): Unit = definedExternally
//    override fun setNodeProperties(editNode: EditNode, properties: Canvas, skipLiveObjectUpdate: Boolean?): Unit = definedExternally
//    override fun removeNodeProperties(editNode: EditNode, properties: Array<String>): Unit = definedExternally
//    override fun getDefaultPalette(): Palette = definedExternally
//    override fun setDefaultPalette(palette: Palette): Unit = definedExternally
//    override fun makePaletteNode(editNode: EditNode): PaletteNode = definedExternally
//    override fun makePaletteNodeTree(editNode: EditNode): Tree = definedExternally
//    override fun copyEditNodes(editNode: EditNode): Unit = definedExternally
//    override fun copyEditNodes(editNode: Array<Any?>): Unit = definedExternally
//    override fun pasteEditNodes(targetEditNode: EditNode?): Unit = definedExternally
//    override fun addPaletteNodesFromXML(xmlString: String, parentNode: EditNode?, globals: Array<String>?, callback: Function<*>?): Unit = definedExternally
//    override fun addPaletteNodesFromJSON(jsonString: String, parentNode: EditNode?, globals: Array<String>?, callback: Function<*>?): Unit = definedExternally
//    open fun getPaletteNodesFromXML(xmlString: String, callback: (paletteNodes: Array<Any?>) -> Unit): Unit = definedExternally
//    override fun addPaletteNodesFromJS(jsCode: String, parentNode: EditNode?, globals: Array<String>?): Unit = definedExternally
//    override fun serializeAllEditNodes(settings: SerializationSettings?): String = definedExternally
//    override fun serializeAllEditNodesAsJSON(settings: SerializationSettings?): String = definedExternally
//    override fun serializeEditNodes(nodes: Array<Any?>, settings: SerializationSettings?): String = definedExternally
//    override fun serializeEditNodesAsJSON(nodes: Array<Any?>, settings: SerializationSettings?): String = definedExternally
//    override var defaultParent: EditNode = definedExternally
//    override var editMaskProperties: Any = definedExternally
    override var selectionType: dynamic /* String /* "none" */ | String /* "simple" */ | String /* "single" */ | String /* "multiple" */ */ = definedExternally
//    override var canSelectEditNodes: Boolean = definedExternally
//    override var selectedAppearance: dynamic /* String /* "none" */ | String /* "tintMask" */ | String /* "outlineMask" */ | String /* "outlineEdges" */ */ = definedExternally
//    override var selectedTintColor: String = definedExternally
//    override var selectedTintOpacity: Number = definedExternally
//    override var showSelectedLabelOnSelect: Boolean = definedExternally
//    override var hoopSelectionMode: dynamic /* String /* "encloses" */ | String /* "intersects" */ */ = definedExternally
//    override var hoopSelectorProperties: Any = definedExternally
//    override var enableInlineEdit: Boolean = definedExternally
//    override fun nodeAdded(newNode: EditNode, parentNode: EditNode, rootNode: EditNode): Unit = definedExternally
//    open fun getPaletteNodesFromJS(jsCode: String, callback: (paletteNodes: Array<Any?>) -> Unit, globals: Array<String>? = definedExternally /* null */): Unit = definedExternally
//    override fun setEditProxyProperties(editNode: EditNode, properties: EditProxy): Unit = definedExternally
//    override fun editMaskClicked(editNode: EditNode, liveObject: Any): Unit = definedExternally
//    override fun getSelectedLabelText(component: Any): String = definedExternally
//    override fun getSelectedEditNodes(): Array<Any?> = definedExternally
//    override fun getSelectedEditNode(): EditNode = definedExternally
//    override fun isEditNodeSelected(): Boolean = definedExternally
//    override fun selectEditNode(editNode: EditNode): Unit = definedExternally
//    override fun selectSingleEditNode(editNode: EditNode): Unit = definedExternally
//    override fun selectAllEditNodes(): Unit = definedExternally
//    override fun deselectEditNodes(editNodes: Array<Any?>): Unit = definedExternally
//    override fun deselectAllEditNodes(): Unit = definedExternally
//    override fun selectedEditNodesUpdated(editNode: EditNode, editNodeList: Array<Any?>): Unit = definedExternally
//    override fun editNodeUpdated(editNode: EditNode, editContext: EditContext, modifiedProperties: Array<String>): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): EditTree = definedExternally
        var editNodePasteOffset: Number = definedExternally
    }
}
external open class FlowLayout : TileLayout {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): FlowLayout = definedExternally
    }
}
external open class XMLTools : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): XMLTools = definedExternally
        fun loadXML(URL: String, callback: Any?, requestProperties: RPCRequest? = definedExternally /* null */): Unit = definedExternally
        fun disableIEXMLHackaround(): Unit = definedExternally
        fun parseXML(xmlText: String): Any? = definedExternally
        fun nativeXMLAvailable(): Boolean = definedExternally
        fun toJS(element: Any?): Any = definedExternally
        fun selectObjects(`object`: Any, xPath: String): Array<Any> = definedExternally
        fun selectNodes(element: String, expression: String, namespaces: Map<String>? = definedExternally /* null */): Array<Any> = definedExternally
        fun selectNodes(element: Any?, expression: String, namespaces: Map<String>? = definedExternally /* null */): Array<Any> = definedExternally
        fun selectString(element: String, expression: String, namespaces: Map<String>? = definedExternally /* null */): String = definedExternally
        fun selectString(element: Any?, expression: String, namespaces: Map<String>? = definedExternally /* null */): String = definedExternally
        fun selectNumber(element: String, expression: String, namespaces: Map<String>? = definedExternally /* null */): Number = definedExternally
        fun selectNumber(element: Any?, expression: String, namespaces: Map<String>? = definedExternally /* null */): Number = definedExternally
        fun transformNodes(inputDocument: Any?, styleSheet: Any?): String = definedExternally
        fun serializeToString(inputDocument: Any?): String = definedExternally
        fun loadXMLSchema(schemaURL: String, callback: Any?, requestProperties: RPCRequest, autoLoadImports: Boolean): Unit = definedExternally
        fun loadWSDL(wsdlURL: String, callback: Any?, requestProperties: RPCRequest, autoLoadImports: Boolean): Unit = definedExternally
    }
}
external open class RelativeDateItem : CanvasItem {
    open var rangePosition: dynamic /* String /* "start" */ | String /* "end" */ */ = definedExternally
    open var timeUnitOptions: Array<dynamic /* String /* "millisecond" */ | String /* "second" */ | String /* "minute" */ | String /* "hour" */ | String /* "day" */ | String /* "week" */ | String /* "month" */ | String /* "quarter" */ | String /* "year" */ */> = definedExternally
    open var showPastOptions: Boolean = definedExternally
    open var showFutureOptions: Boolean = definedExternally
    open var allowAbsoluteDates: Boolean = definedExternally
    open var rangeRoundingGranularity: Any = definedExternally
    open var millisecondsAgoTitle: String = definedExternally
    open var secondsAgoTitle: String = definedExternally
    open var minutesAgoTitle: String = definedExternally
    open var hoursAgoTitle: String = definedExternally
    open var daysAgoTitle: String = definedExternally
    open var weeksAgoTitle: String = definedExternally
    open var monthsAgoTitle: String = definedExternally
    open var quartersAgoTitle: String = definedExternally
    open var yearsAgoTitle: String = definedExternally
    open var millisecondsFromNowTitle: String = definedExternally
    open var secondsFromNowTitle: String = definedExternally
    open var minutesFromNowTitle: String = definedExternally
    open var hoursFromNowTitle: String = definedExternally
    open var daysFromNowTitle: String = definedExternally
    open var weeksFromNowTitle: String = definedExternally
    open var monthsFromNowTitle: String = definedExternally
    open var quartersFromNowTitle: String = definedExternally
    open var yearsFromNowTitle: String = definedExternally
//    override var defaultValue: dynamic /* String | Date */ = definedExternally
//    override var operator: dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */ = definedExternally
    open var presetOptions: Any = definedExternally
    open var valueFieldWidth: dynamic /* String | Number */ = definedExternally
//    override var valueField: ComboBoxItem = definedExternally
    open var defaultQuantity: Number = definedExternally
    open var minQuantity: Number = definedExternally
    open var maxQuantity: Number = definedExternally
    open var quantityField: SpinnerItem = definedExternally
    open var showChooserIcon: Boolean = definedExternally
    open var pickerIcon: FormItemIcon = definedExternally
//    override var pickerIconPrompt: String = definedExternally
//    override var pickerConstructor: String = definedExternally
    open var baseDate: Date = definedExternally
    open var showCalculatedDateField: Boolean = definedExternally
    open var calculatedDateField: BlurbItem = definedExternally
//    override var inputFormat: String = definedExternally
//    override var displayFormat: dynamic /* String /* "toString" */ | String /* "toLocaleString" */ | String /* "toUSShortDate" */ | String /* "toUSShortDatetime" */ | String /* "toEuropeanShortDate" */ | String /* "toEuropeanShortDatetime" */ | String /* "toJapanShortDate" */ | String /* "toJapanShortDatetime" */ | String /* "toSerializeableDate" */ | String /* "toDateStamp" */ */ = definedExternally
//    override var dateFormatter: dynamic /* String /* "toString" */ | String /* "toLocaleString" */ | String /* "toUSShortDate" */ | String /* "toUSShortDatetime" */ | String /* "toEuropeanShortDate" */ | String /* "toEuropeanShortDatetime" */ | String /* "toJapanShortDate" */ | String /* "toJapanShortDatetime" */ | String /* "toSerializeableDate" */ | String /* "toDateStamp" */ */ = definedExternally
    open var startDate: Date = definedExternally
    open var endDate: Date = definedExternally
    open var centuryThreshold: Number = definedExternally
//    override var shouldSaveValue: Boolean = definedExternally
    open var useSharedPicker: Boolean = definedExternally
    open var showChooserFiscalYearPicker: Boolean = definedExternally
    open var showChooserWeekPicker: Boolean = definedExternally
    open var showPickerTimeItem: Boolean = definedExternally
    open var pickerTimeItemProperties: TimeItem = definedExternally
    open var use24HourTime: Boolean = definedExternally
    open fun formatEditorValue(): Unit = definedExternally
    open fun parseEditorValue(): Unit = definedExternally
    open fun getRelativeDate(): Any = definedExternally
    open fun getCriterion(absolute: Boolean? = definedExternally /* null */): Criterion = definedExternally
    open fun getFiscalCalendar(): FiscalCalendar = definedExternally
    open fun setFiscalCalendar(fiscalCalendar: FiscalCalendar? = definedExternally /* null */): Unit = definedExternally
    open fun getInputFormat(): String = definedExternally
    open fun getEnteredValue(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): RelativeDateItem = definedExternally
        fun getAbsoluteDate(relativeDate: RelativeDate, baseDate: Date? = definedExternally /* null */): Date = definedExternally
    }
}
external open class EditProxy : Class {
    open var useEditMask: Boolean = definedExternally
    open var autoMaskChildren: Boolean = definedExternally
    open var canSelectChildren: Boolean = definedExternally
    open var childrenSnapToGrid: Boolean = definedExternally
    open var childrenSnapResizeToGrid: Boolean = definedExternally
    open var canSelect: Boolean = definedExternally
    open var allowNestedDrops: Boolean = definedExternally
    open var useCopyPasteShortcuts: Boolean = definedExternally
    open var editMask: Canvas = definedExternally
    open var selectedAppearance: dynamic /* String /* "none" */ | String /* "tintMask" */ | String /* "outlineMask" */ | String /* "outlineEdges" */ */ = definedExternally
    open var selectedBorder: String = definedExternally
    open var selectedLabelBackgroundColor: String = definedExternally
    open var selectedTintColor: String = definedExternally
    open var selectedTintOpacity: Number = definedExternally
    open var supportsInlineEdit: Boolean = definedExternally
    open var inlineEditOnDrop: Boolean = definedExternally
    open var inlineEditEvent: dynamic /* String /* "none" */ | String /* "click" */ | String /* "doubleClick" */ | String /* "dblOrKeypress" */ */ = definedExternally
    open var inlineEditForm: DynamicForm = definedExternally
    open var inlineEditInstructionLabel: Label = definedExternally
    open var inlineEditInstructions: String = definedExternally
    open var inlineEditMultiline: Boolean = definedExternally
    open var bringToFrontOnSelect: Boolean = definedExternally
    open var persistCoordinates: Boolean = definedExternally
    open var hoopSelector: Canvas = definedExternally
    open fun setCanSelectChildren(canSelect: Boolean): Unit = definedExternally
    open fun showSelectedAppearance(show: Boolean): Unit = definedExternally
    open fun startInlineEditing(appendChar: String? = definedExternally /* null */): Unit = definedExternally
    open fun getInlineEditText(): Unit = definedExternally
    open fun setInlineEditText(newValue: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): EditProxy = definedExternally
    }
}
external open class VStack : Layout {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): VStack = definedExternally
    }
}
external open class DecisionGateway : ProcessElement {
    open var criteriaMap: Map<Any?> = definedExternally
    open var defaultElement: String = definedExternally
//    override var nextElement: String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DecisionGateway = definedExternally
    }
}
external open class ImgEditProxy : CanvasEditProxy {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ImgEditProxy = definedExternally
    }
}
external open class CalendarView : ListGrid {
    open var calendar: Calendar = definedExternally
    open var viewName: String = definedExternally
    open var useEventCanvasPool: Boolean = definedExternally
    open var eventStyleName: String = definedExternally
    open fun isSelectedView(): Boolean = definedExternally
    open fun isTimelineView(): Boolean = definedExternally
    open fun isDayView(): Boolean = definedExternally
    open fun isWeekView(): Boolean = definedExternally
    open fun isMonthView(): Boolean = definedExternally
    open fun rebuild(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): CalendarView = definedExternally
    }
}
external open class Time : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Time = definedExternally
        var UTCHoursOffset: Number = definedExternally
        var displayFormat: dynamic /* Function<*> | String /* "toTime" */ | String /* "to24HourTime" */ | String /* "toPaddedTime" */ | String /* "toPadded24HourTime" */ | String /* "toShortTime" */ | String /* "toShort24HourTime" */ | String /* "toShortPaddedTime" */ | String /* "toShortPadded24HourTime" */ */ = definedExternally
        var shortDisplayFormat: dynamic /* Function<*> | String /* "toTime" */ | String /* "to24HourTime" */ | String /* "toPaddedTime" */ | String /* "toPadded24HourTime" */ | String /* "toShortTime" */ | String /* "toShort24HourTime" */ | String /* "toShortPaddedTime" */ | String /* "toShortPadded24HourTime" */ */ = definedExternally
        var AMIndicator: String = definedExternally
        var PMIndicator: String = definedExternally
        var adjustForDST: Boolean = definedExternally
        var use24HourTime: Boolean = definedExternally
        var defaultTimeSeparator: String = definedExternally
        var defaultMillisecondSeparator: String = definedExternally
        fun setDefaultDisplayTimezone(offset: String): Unit = definedExternally
        fun getDefaultDisplayTimezone(): String = definedExternally
        fun toTime(date: Date, formatter: String? = definedExternally /* null */, logicalTime: Boolean? = definedExternally /* null */): Unit = definedExternally
        fun toTime(date: Date, formatter: Function<*>? = definedExternally /* null */, logicalTime: Boolean? = definedExternally /* null */): Unit = definedExternally
        fun toShortTime(date: Date, formatter: String? = definedExternally /* null */, logicalTime: Boolean? = definedExternally /* null */): Unit = definedExternally
        fun toShortTime(date: Date, formatter: Function<*>? = definedExternally /* null */, logicalTime: Boolean? = definedExternally /* null */): Unit = definedExternally
        fun parseInput(timeString: String, validTime: Boolean): Unit = definedExternally
        fun createDate(hours: Number? = definedExternally /* null */, minutes: Number? = definedExternally /* null */, seconds: Number? = definedExternally /* null */, milliseconds: Number? = definedExternally /* null */, UTCTime: Boolean? = definedExternally /* null */): Unit = definedExternally
        fun createLogicalTime(hour: Number, minute: Number, second: Number): Date = definedExternally
        fun setShortDisplayFormat(formatter: String): Unit = definedExternally
        fun setShortDisplayFormat(formatter: Function<*>): Unit = definedExternally
        fun setNormalDisplayFormat(formatter: String): Unit = definedExternally
        fun setNormalDisplayFormat(formatter: Function<*>): Unit = definedExternally
        fun compareTimes(time1: String, time2: String): Boolean = definedExternally
        fun compareTimes(time1: String, time2: Date): Boolean = definedExternally
        fun compareTimes(time1: Date, time2: String): Boolean = definedExternally
        fun compareTimes(time1: Date, time2: Date): Boolean = definedExternally
        fun toTime(date: Date): Unit = definedExternally
        fun toShortTime(date: Date): Unit = definedExternally
    }
}
external open class Point {
    open var x: Number = definedExternally
    open var y: Number = definedExternally
}
external open class MultiGroupDialog : Window {
//    override var title: String = definedExternally
    open var addLevelButtonTitle: String = definedExternally
    open var deleteLevelButtonTitle: String = definedExternally
    open var copyLevelButtonTitle: String = definedExternally
    open var levelUpButtonTitle: String = definedExternally
    open var levelDownButtonTitle: String = definedExternally
    open var invalidListPrompt: String = definedExternally
    open var propertyFieldTitle: String = definedExternally
    open var groupingFieldTitle: String = definedExternally
    open var initialGrouping: Array<Any> = definedExternally
    open var maxLevels: Number = definedExternally
    open var applyButtonTitle: String = definedExternally
    open var cancelButtonTitle: String = definedExternally
    open var applyButton: IButton = definedExternally
    open var cancelButton: IButton = definedExternally
    open var addLevelButton: IButton = definedExternally
    open var deleteLevelButton: IButton = definedExternally
    open var copyLevelButton: IButton = definedExternally
    open var levelUpButton: ImgButton = definedExternally
    open var levelDownButton: ImgButton = definedExternally
    open var fields: Array<Any?> = definedExternally
    open var optionsGrid: ListGrid = definedExternally
    open fun getNumLevels(): Number = definedExternally
    open fun getGroup(): Array<Any?> = definedExternally
    open fun validate(): Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): MultiGroupDialog = definedExternally
        fun askForGrouping(fieldSource: Array<String>, initialGrouping: Array<Any>, callback: Any?, properties: MultiGroupDialog? = definedExternally /* null */): Unit = definedExternally
        fun askForGrouping(fieldSource: DataSource, initialGrouping: Array<Any>, callback: Any?, properties: MultiGroupDialog? = definedExternally /* null */): Unit = definedExternally
        fun askForGrouping(fieldSource: DataBoundComponent, initialGrouping: Array<Any>, callback: Any?, properties: MultiGroupDialog? = definedExternally /* null */): Unit = definedExternally
    }
}
external open class RelativeDate {
    open var value: String = definedExternally
    open var rangePosition: dynamic /* String /* "start" */ | String /* "end" */ */ = definedExternally
}
external open class ToolStripGroup : VLayout {
//    override var styleName: String = definedExternally
    open var controls: Array<Any?> = definedExternally
    open var labelLayout: HLayout = definedExternally
    open var labelConstructor: String = definedExternally
    open var label: Label = definedExternally
    open var titleAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var titleStyle: String = definedExternally
    open var autoSizeToTitle: Boolean = definedExternally
    open var titleOrientation: dynamic /* String /* "top" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
    open var titleProperties: Label = definedExternally
    open var titleHeight: Number = definedExternally
    open var body: HLayout = definedExternally
    open var bodyConstructor: String = definedExternally
    open var columnLayout: VLayout = definedExternally
    open var numRows: Number = definedExternally
    open var rowHeight: Number = definedExternally
    open var title: String = definedExternally
    open fun setTitle(title: String): Unit = definedExternally
    open fun setShowTitle(showTitle: Boolean): Unit = definedExternally
    open fun setTitleAlign(align: String /* "left" */): Unit = definedExternally
    open fun setTitleAlign(align: String /* "right" */): Unit = definedExternally
    open fun setTitleAlign(align: String /* "center" */): Unit = definedExternally
    open fun setTitleStyle(styleName: String): Unit = definedExternally
    open fun setTitleOrientation(orientation: String /* "top" */): Unit = definedExternally
    open fun setTitleOrientation(orientation: String /* "center" */): Unit = definedExternally
    open fun setTitleOrientation(orientation: String /* "bottom" */): Unit = definedExternally
    open fun setTitleHeight(titleHeight: Number): Unit = definedExternally
    open fun getControlColumn(control: Canvas): Layout = definedExternally
    open fun setControls(controls: Array<Any?>): Unit = definedExternally
    open fun reflowControls(): Unit = definedExternally
    open fun addControls(controls: Array<Any?>): Unit = definedExternally
    open fun addControl(control: Canvas, index: Number? = definedExternally /* null */): Unit = definedExternally
    open fun removeControl(control: Canvas): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ToolStripGroup = definedExternally
    }
}
external open class DrawDiamond : DrawItem {
    open var left: Number = definedExternally
    open var top: Number = definedExternally
    open var width: Number = definedExternally
    open var height: Number = definedExternally
//    override var titleRotationMode: dynamic /* String /* "neverRotate" */ | String /* "withItem" */ | String /* "withItemAlwaysUp" */ | String /* "withLine" */ | String /* "withLineAlwaysUp" */ */ = definedExternally
    open fun setRect(left: Number, top: Number, width: Number, height: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DrawDiamond = definedExternally
    }
}
external interface EditContext {
    var rootComponent: PaletteNode? get() = definedExternally; set(value) = definedExternally
    var defaultPalette: Palette? get() = definedExternally; set(value) = definedExternally
    var extraPalettes: Array<Any?>? get() = definedExternally; set(value) = definedExternally
    var persistCoordinates: Boolean? get() = definedExternally; set(value) = definedExternally
    var allowNestedDrops: Boolean? get() = definedExternally; set(value) = definedExternally
    var autoEditNewNodes: Boolean? get() = definedExternally; set(value) = definedExternally
    var defaultParent: EditNode? get() = definedExternally; set(value) = definedExternally
    var useCopyPasteShortcuts: Boolean? get() = definedExternally; set(value) = definedExternally
    var editMaskProperties: Any? get() = definedExternally; set(value) = definedExternally
    var selectionType: dynamic /* String /* "none" */ | String /* "simple" */ | String /* "single" */ | String /* "multiple" */ */? get() = definedExternally; set(value) = definedExternally
    var canSelectEditNodes: Boolean? get() = definedExternally; set(value) = definedExternally
    var selectedAppearance: dynamic /* String /* "none" */ | String /* "tintMask" */ | String /* "outlineMask" */ | String /* "outlineEdges" */ */? get() = definedExternally; set(value) = definedExternally
    var selectedBorder: String? get() = definedExternally; set(value) = definedExternally
    var selectedLabelBackgroundColor: String? get() = definedExternally; set(value) = definedExternally
    var selectedTintColor: String? get() = definedExternally; set(value) = definedExternally
    var selectedTintOpacity: Number? get() = definedExternally; set(value) = definedExternally
    var showSelectedLabel: Boolean? get() = definedExternally; set(value) = definedExternally
    var showSelectedLabelOnSelect: Boolean? get() = definedExternally; set(value) = definedExternally
    var canGroupSelect: Boolean? get() = definedExternally; set(value) = definedExternally
    var canDragGroup: Boolean? get() = definedExternally; set(value) = definedExternally
    var hideGroupBorderOnDrag: Boolean? get() = definedExternally; set(value) = definedExternally
    var hoopSelectionMode: dynamic /* String /* "encloses" */ | String /* "intersects" */ */? get() = definedExternally; set(value) = definedExternally
    var hoopSelectorProperties: Any? get() = definedExternally; set(value) = definedExternally
    var enableInlineEdit: Boolean? get() = definedExternally; set(value) = definedExternally
    val getDefaultPalette:(() -> Palette)? get() = definedExternally
    val setDefaultPalette:((palette: Palette) -> Unit)? get() = definedExternally
    val addNode:((newNode: EditNode, parentNode: EditNode? /* null */, index: Number?/* null */, parentProperty: String?/* null */, skipParentComponentAdd: Boolean? /* null */, forceSingularFieldReplace: Boolean? /* null */) -> EditNode)? get() = definedExternally
    val getRootEditNode:(() -> EditNode)? get() = definedExternally
    val nodeAdded:((newNode: EditNode, parentNode: EditNode, rootNode: EditNode) -> Unit)? get() = definedExternally
    val addFromPaletteNode:((paletteNode: PaletteNode, parentNode: EditNode?/* null */) -> EditNode)? get() = definedExternally
    val makeEditNode:((paletteNode: PaletteNode) -> EditNode)? get() = definedExternally
    val getEditNodeTree:(() -> Tree)? get() = definedExternally
    val removeAll:(() -> Unit)? get() = definedExternally
    val destroyAll:(() -> Unit)? get() = definedExternally
    val removeNode:((editNode: EditNode) -> Unit)? get() = definedExternally
    val serializeAllEditNodes:((settings: SerializationSettings?/* null */) -> String)? get() = definedExternally
    val serializeAllEditNodesAsJSON:((settings: SerializationSettings?/* null */) -> String)? get() = definedExternally
    val serializeEditNodes:((nodes: Array<Any?>, settings: SerializationSettings /* null */) -> String)? get() = definedExternally
    val serializeEditNodesAsJSON:((nodes: Array<Any?>, settings: SerializationSettings /* null */) -> String)? get() = definedExternally
    val addPaletteNodesFromXML:((xmlString: String, parentNode: EditNode /* null */, globals: Array<String> /* null */, callback: Function<*> /* null */) -> Unit)? get() = definedExternally
    val addPaletteNodesFromJSON:((jsonString: String, parentNode: EditNode /* null */, globals: Array<String> /* null */, callback: Function<*> /* null */) -> Unit)? get() = definedExternally
    val getPaletteNodesFromXML:((xmlString: String, callback: ((paletteNodes: Array<Any?>) -> Unit)) -> Unit)? get() = definedExternally
    val addPaletteNodesFromJS:((jsCode: String, parentNode: EditNode /* null */, globals: Array<String> /* null */) -> Unit)? get() = definedExternally
    val getPaletteNodesFromJS:((jsCode: String, callback: ((paletteNodes: Array<Any?>) -> Unit), globals: Array<String> /* null */) -> Unit)? get() = definedExternally
    val addFromPaletteNodes:((paletteNodes: Array<Any?>, parentNode: EditNode /* null */) -> Array<Any?>)? get() = definedExternally
    val isNodeEditingOn:((editNode: EditNode) -> Boolean)? get() = definedExternally
    val enableEditing:((editNode: EditNode) -> Unit)? get() = definedExternally
    val setNodeProperties:((editNode: EditNode, properties: Canvas, skipLiveObjectUpdate: Boolean /* null */) -> Unit)? get() = definedExternally
    val removeNodeProperties:((editNode: EditNode, properties: Array<String>) -> Unit)? get() = definedExternally
    val setEditProxyProperties:((editNode: EditNode, properties: EditProxy) -> Unit)? get() = definedExternally
    val makePaletteNode:((editNode: EditNode) -> PaletteNode)? get() = definedExternally
    val makePaletteNodeTree:((editNode: EditNode) -> Tree)? get() = definedExternally
    val copyEditNodes:((editNode: Any) -> Unit)? get() = definedExternally
    val pasteEditNodes:((targetEditNode: EditNode? /* null */) -> Unit)? get() = definedExternally
    val editMaskClicked:((editNode: EditNode, liveObject: Any) -> Unit)? get() = definedExternally
    val getSelectedLabelText:((component: Any) -> String)? get() = definedExternally
    val getSelectedEditNodes:(() -> Array<Any?>)? get() = definedExternally
    val getSelectedEditNode:(() -> EditNode)? get() = definedExternally
    val isEditNodeSelected:(() -> Boolean)? get() = definedExternally
    val selectEditNode:((editNode: EditNode) -> Unit)? get() = definedExternally
    val selectSingleEditNode:((editNode: EditNode) -> Unit)? get() = definedExternally
    val selectAllEditNodes:(() -> Unit)? get() = definedExternally
    val deselectEditNodes:((editNodes: Array<Any?>) -> Unit)? get() = definedExternally
    val deselectAllEditNodes:(() -> Unit)? get() = definedExternally
    val selectedEditNodesUpdated:((editNode: EditNode, editNodeList: Array<Any?>) -> Unit)? get() = definedExternally
    val editNodeUpdated:((editNode: EditNode, editContext: EditContext, modifiedProperties: Array<String>) -> Unit)? get() = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): EditContext = definedExternally
        var editNodePasteOffset: Number = definedExternally
    }
}
external open class FormItem : Class {
    open var type: dynamic /* String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "enum" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ */ = definedExternally
    open var editorType: Any = definedExternally
    open var name: String = definedExternally
    open var dataPath: String = definedExternally
    open var title: String = definedExternally
    open var defaultValue: Any = definedExternally
    open var value: Any = definedExternally
    open var ID: String = definedExternally
    open var emptyDisplayValue: String = definedExternally
    open var hidden: Boolean = definedExternally
    open var valueMap: dynamic /* Any? | Array<Any> */ = definedExternally
    open var optionDataSource: dynamic /* String | DataSource */ get() = definedExternally; set(value) = definedExternally
    open var optionFilterContext: DSRequest? get() = definedExternally; set(value) = definedExternally
    open var optionCriteria: Any? = definedExternally
    open var optionOperationId: String = definedExternally
    open var valueField: String = definedExternally
    open var displayField: String? get() = definedExternally; set(value) = definedExternally
    open var useLocalDisplayFieldValue: Boolean? get() = definedExternally; set(value) = definedExternally
    open var foreignDisplayField: String = definedExternally
    open var multipleValueSeparator: String = definedExternally
    open var fetchMissingValues: Boolean = definedExternally
    open var alwaysFetchMissingValues: Boolean = definedExternally
    open var loadingDisplayValue: String = definedExternally
    open var filterLocally: Boolean? get() = definedExternally; set(value) = definedExternally
    open var dateFormatter: dynamic /* String /* "toString" */ | String /* "toLocaleString" */ | String /* "toUSShortDate" */ | String /* "toUSShortDatetime" */ | String /* "toEuropeanShortDate" */ | String /* "toEuropeanShortDatetime" */ | String /* "toJapanShortDate" */ | String /* "toJapanShortDatetime" */ | String /* "toSerializeableDate" */ | String /* "toDateStamp" */ */ = definedExternally
    open var timeFormatter: dynamic /* String /* "toTime" */ | String /* "to24HourTime" */ | String /* "toPaddedTime" */ | String /* "toPadded24HourTime" */ | String /* "toShortTime" */ | String /* "toShort24HourTime" */ | String /* "toShortPaddedTime" */ | String /* "toShortPadded24HourTime" */ */ = definedExternally
    open var displayFormat: Any = definedExternally
    open var inputFormat: String = definedExternally
    open var decimalPrecision: Number = definedExternally
    open var decimalPad: Number = definedExternally
    open var format: String = definedExternally
    open var exportFormat: String = definedExternally
    open var valueIcons: Any = definedExternally
    open var emptyValueIcon: String = definedExternally
    open var showValueIconOnly: Boolean = definedExternally
    open var suppressValueIcon: Boolean = definedExternally
    open var valueIconWidth: Number = definedExternally
    open var valueIconHeight: Number = definedExternally
    open var valueIconSize: Number = definedExternally
    open var valueIconLeftPadding: Number = definedExternally
    open var valueIconRightPadding: Number = definedExternally
    open var imageURLPrefix: String = definedExternally
    open var imageURLSuffix: String = definedExternally
    open var form: DynamicForm = definedExternally
    open var containerWidget: Canvas = definedExternally
    open var showPickerIcon: Boolean = definedExternally
    open var showFocusedPickerIcon: Boolean = definedExternally
    open var pickerIconDefaults: FormItemIcon = definedExternally
    open var pickerIconProperties: FormItemIcon = definedExternally
    open var pickerIconName: String = definedExternally
    open var pickerIconSrc: String = definedExternally
    open var pickerIconWidth: Number = definedExternally
    open var pickerIconHeight: Number = definedExternally
    open var pickerIconPrompt: String = definedExternally
    open var picker: Canvas = definedExternally
    open var pickerConstructor: String = definedExternally
    open var pickerProperties: Canvas = definedExternally
    open var validators: Array<Any?> = definedExternally
    open var required: Boolean = definedExternally
    open var requiredMessage: String = definedExternally
    open var requiredWhen: Any? = definedExternally
    open var visible: Boolean = definedExternally
    open var visibleWhen: AdvancedCriteria = definedExternally
    open var canEdit: Boolean = definedExternally
    open var readOnlyDisplay: dynamic /* String /* "static" */ | String /* "readOnly" */ | String /* "disabled" */ */ = definedExternally
    open var readOnlyTextBoxStyle: String = definedExternally
    open var clipStaticValue: Boolean = definedExternally
    open var readOnlyWhen: AdvancedCriteria = definedExternally
    open var disabled: Boolean = definedExternally
    open var disableIconsOnReadOnly: Boolean = definedExternally
    open var canFocus: Boolean = definedExternally
    open var accessKey: String = definedExternally
    open var tabIndex: Number = definedExternally
    open var globalTabIndex: Number = definedExternally
    open var selectOnFocus: Boolean = definedExternally
    open var selectOnClick: Boolean = definedExternally
    open var changeOnKeypress: Boolean = definedExternally
    open var showTitle: Boolean = definedExternally
    open var titleOrientation: dynamic /* String /* "left" */ | String /* "top" */ | String /* "right" */ */ = definedExternally
    open var titleAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var titleVAlign: dynamic /* String /* "top" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
    open var clipTitle: Boolean = definedExternally
    open var wrapTitle: Boolean = definedExternally
    open var redrawOnChange: Boolean = definedExternally
    open var validateOnChange: Boolean = definedExternally
    open var validateOnExit: Boolean = definedExternally
    open var stopOnError: Boolean = definedExternally
    open var rejectInvalidValueOnChange: Boolean = definedExternally
    open var synchronousValidation: Boolean = definedExternally
    open var width: dynamic /* String | Number */ = definedExternally
    open var height: dynamic /* String | Number */ = definedExternally
    open var staticHeight: Number = definedExternally
    open var cellHeight: Number = definedExternally
    open var titleColSpan: Number = definedExternally
    open var colSpan: dynamic /* String | Number */ = definedExternally
    open var rowSpan: Number = definedExternally
    open var startRow: Boolean = definedExternally
    open var endRow: Boolean = definedExternally
    open var align: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var vAlign: dynamic /* String /* "top" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
    open var textAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var applyAlignToText: Boolean = definedExternally
    open var left: Number = definedExternally
    open var top: Number = definedExternally
    open var autoCompleteKeywords: Array<String> = definedExternally
    open var autoComplete: dynamic /* String /* "none" */ | String /* "native" */ */ = definedExternally
    open var browserSpellCheck: Boolean = definedExternally
    open var browserInputType: String = definedExternally
    open var icons: Array<Any?> = definedExternally
    open var defaultIconSrc: String = definedExternally
    open var showOverIcons: Boolean = definedExternally
    open var showFocusedIcons: Boolean = definedExternally
    open var iconHSpace: Number = definedExternally
    open var iconVAlign: dynamic /* String /* "top" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
    open var iconWidth: Number = definedExternally
    open var iconHeight: Number = definedExternally
    open var prompt: String = definedExternally
    open var readOnlyHover: String = definedExternally
    open var iconPrompt: String = definedExternally
    open var showIcons: Boolean = definedExternally
    open var showIconsOnFocus: Boolean = definedExternally
    open var showDisabledIconsOnFocus: Boolean = definedExternally
    open var showPickerIconOnFocus: Boolean = definedExternally
    open var showDisabledPickerIconOnFocus: Boolean = definedExternally
    open var canTabToIcons: Boolean = definedExternally
    open var errorIconHeight: Number = definedExternally
    open var errorIconWidth: Number = definedExternally
    open var errorIconSrc: String = definedExternally
    open var showErrorIcon: Boolean = definedExternally
    open var showErrorText: Boolean = definedExternally
    open var showErrorStyle: Boolean = definedExternally
    open var errorOrientation: String = definedExternally
    open var hint: String = definedExternally
    open var showHint: Boolean = definedExternally
    open var wrapHintText: Boolean = definedExternally
    open var minHintWidth: Number = definedExternally
    open var showFocused: Boolean = definedExternally
    open var showOver: Boolean = definedExternally
    open var updateTextBoxOnOver: Boolean = definedExternally
    open var updateControlOnOver: Boolean = definedExternally
    open var updatePickerIconOnOver: Boolean = definedExternally
    open var showDisabled: Boolean = definedExternally
    open var showRTL: Boolean = definedExternally
    open var showPending: Boolean = definedExternally
    open var showDeletions: Boolean = definedExternally
    open var cellStyle: String = definedExternally
    open var hintStyle: String = definedExternally
    open var useDisabledHintStyleForReadOnly: Boolean = definedExternally
    open var titleStyle: String = definedExternally
    open var printTitleStyle: String = definedExternally
    open var textBoxStyle: String = definedExternally
    open var printTextBoxStyle: String = definedExternally
    open var pickerIconStyle: String = definedExternally
    open var controlStyle: String = definedExternally
    open var editPendingCSSText: String = definedExternally
    open var valueDeselectedCSSText: String = definedExternally
    open var showFocusedErrorState: Boolean = definedExternally
    open var cellClassName: String = definedExternally
    open var errorCellClassName: String = definedExternally
    open var titleClassName: String = definedExternally
    open var titleErrorClassName: String = definedExternally
    open var hintClassName: String = definedExternally
    open var hoverDelay: Number = definedExternally
    open var hoverWidth: Any = definedExternally
    open var hoverHeight: Any = definedExternally
    open var hoverAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var hoverVAlign: dynamic /* String /* "top" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
    open var hoverStyle: String = definedExternally
    open var hoverOpacity: Number = definedExternally
    open var showClippedTitleOnHover: Boolean = definedExternally
    open var showClippedValueOnHover: Boolean = definedExternally
    open var showOldValueInHover: Boolean = definedExternally
    open var originalValueMessage: String = definedExternally
    open var operator: dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */ = definedExternally
    open var criteriaField: String = definedExternally
    open var formula: UserFormula = definedExternally
    open var textFormula: UserSummary = definedExternally
    open var saveOnEnter: Boolean = definedExternally
    open var canEditOpaqueValues: Boolean = definedExternally
    open var multiple: Boolean = definedExternally
    open var destroyed: Boolean = definedExternally
    open var errorMessageWidth: Number = definedExternally
    open var applyHeightToTextBox: Boolean = definedExternally
    open var alwaysShowControlBox: Boolean = definedExternally
    open var storeDisplayValues: Boolean = definedExternally
    open var implicitSave: Boolean = definedExternally
    open var implicitSaveOnBlur: Boolean = definedExternally
    open var shouldSaveValue: Boolean = definedExternally
    open var canSelectText: Boolean = definedExternally
    open var supportsCutPasteEvents: Boolean = definedExternally
    open var allowExpressions: Boolean = definedExternally
    open var validOperators: Array<dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */> = definedExternally
    open var locateItemBy: String = definedExternally
    open var editProxyConstructor: String = definedExternally
    open var ariaRole: String = definedExternally
    open var ariaState: Any = definedExternally
    open fun setReadOnlyDisplay(appearance: String /* "static" */): Unit = definedExternally
    open fun setReadOnlyDisplay(appearance: String /* "readOnly" */): Unit = definedExternally
    open fun setReadOnlyDisplay(appearance: String /* "disabled" */): Unit = definedExternally
    open fun valueIconClick(form: DynamicForm, item: FormItem, value: Any): Boolean = definedExternally
    open fun isInGrid(): Boolean = definedExternally
    open fun getListGrid(): ListGrid = definedExternally
    open fun getGridRowNum(): Number = definedExternally
    open fun getGridColNum(): Number = definedExternally
    open fun getFieldName(): String = definedExternally
    open fun getDataPath(): String = definedExternally
    open fun getFullDataPath(): String = definedExternally
    open fun shouldSaveOnEnter(): Boolean = definedExternally
    open fun getTitle(): String = definedExternally
    open fun isVisible(): Boolean = definedExternally
    open fun getRect(): Array<Any> = definedExternally
    open fun getPageRect(): Array<Any> = definedExternally
    open fun shouldApplyHeightToTextBox(): Boolean = definedExternally
    open fun getPixelHeight(): Number = definedExternally
    open fun getVisibleHeight(): Number = definedExternally
    open fun getIconHeight(icon: Any): Number = definedExternally
    open fun getWidth(): dynamic /* String | Number */ = definedExternally
    open fun getPixelWidth(): Number = definedExternally
    open fun getVisibleWidth(): Number = definedExternally
    open fun getVisibleTitleWidth(labelOnly: Boolean): Number = definedExternally
    open fun getIconWidth(icon: Any): Number = definedExternally
    open fun setLeft(): Unit = definedExternally
    open fun setTop(): Unit = definedExternally
    open fun updateState(): Unit = definedExternally
    open fun getValueIconStyle(value: Any): String = definedExternally
    open fun getPrintValueIconStyle(value: Any): String = definedExternally
    open fun getCustomState(elementType: String /* "title" */, derivedState: String): String = definedExternally
    open fun getCustomState(elementType: String /* "textBox" */, derivedState: String): String = definedExternally
    open fun getCustomState(elementType: String /* "cell" */, derivedState: String): String = definedExternally
    open fun getCustomState(elementType: String /* "control" */, derivedState: String): String = definedExternally
    open fun getCustomState(elementType: String /* "pickerIcon" */, derivedState: String): String = definedExternally
    open fun setCellStyle(newCellStyle: String): Unit = definedExternally
    open fun getErrors(): dynamic /* String | Array<String> */ = definedExternally
    open fun getErrorHTML(error: String): String = definedExternally
    open fun getErrorHTML(error: Array<String>): String = definedExternally
    open fun isDrawn(): Boolean = definedExternally
    open fun getIconTabPosition(): Number = definedExternally
    open fun getPickerIconTabPosition(): Number = definedExternally
    open fun addIcon(icon: FormItemIcon, index: Number? = definedExternally /* null */): FormItemIcon = definedExternally
    open fun removeIcon(icon: String): Boolean = definedExternally
    open fun setIconDisabled(icon: String, disabled: Boolean): Unit = definedExternally
    open fun enableIcon(icon: String): Unit = definedExternally
    open fun disableIcon(icon: String): Unit = definedExternally
    open fun showIcon(icon: String): Unit = definedExternally
    open fun hideIcon(icon: String): Unit = definedExternally
    open fun setIconShowOnFocus(icon: String, showOnFocus: Boolean): Unit = definedExternally
    open fun setShowIconsOnFocus(showIconsOnFocus: Boolean): Unit = definedExternally
    open fun setShowPickerIconOnFocus(showPickerIconOnFocus: Boolean): Unit = definedExternally
    open fun getIcon(name: String): FormItemIcon = definedExternally
    open fun showPicker(): Unit = definedExternally
    open fun redraw(reason: String? = definedExternally /* null */): Unit = definedExternally
    open fun show(): Unit = definedExternally
    open fun hide(): Unit = definedExternally
    open fun getDisplayValue(value: Any? = definedExternally /* null */): Any = definedExternally
    open fun mapValueToDisplay(value: Any): String = definedExternally
    open fun formatValue(value: Any, record: ListGridRecord, form: DynamicForm, item: FormItem): String = definedExternally
    open fun formatEditorValue(value: Any, record: ListGridRecord, form: DynamicForm, item: FormItem): String = definedExternally
    open fun parseEditorValue(value: String, form: DynamicForm, item: FormItem): Any = definedExternally
    open fun mapDisplayToValue(value: String): Any = definedExternally
    open fun setValueMap(valueMap: Any?): Unit = definedExternally
    open fun setValueMap(valueMap: Array<Any>): Unit = definedExternally
    open fun setOptionDataSource(dataSource: DataSource): Unit = definedExternally
    open fun setValueIcons(map: Any): Unit = definedExternally
    open fun getValueFieldName(): String = definedExternally
    open fun getDisplayFieldName(): String = definedExternally
    open fun getOptionDataSource(): DataSource = definedExternally
    open fun setValue(newValue: Any): Unit = definedExternally
    open fun shouldFetchMissingValue(newValue: Any): Boolean = definedExternally
    open fun invalidateDisplayValueCache(): Unit = definedExternally
    open fun getSelectedRecord(): ListGridRecord = definedExternally
    open fun clearValue(): Unit = definedExternally
    open fun setPrompt(newPrompt: String): Unit = definedExternally
    open fun setHint(newHint: String): Unit = definedExternally
    open fun setHintStyle(hintStyle: String): Unit = definedExternally
    open fun storeValue(value: Any, showValue: Boolean? = definedExternally /* null */): Unit = definedExternally
    open fun getValue(): Any = definedExternally
    open fun applyFormula(): Unit = definedExternally
    open fun getCanEdit(): Boolean = definedExternally
    open fun setCanEdit(canEdit: Boolean): Unit = definedExternally
    open fun hasAdvancedCriteria(): Boolean = definedExternally
    open fun canEditCriterion(criterion: Criterion): Boolean = definedExternally
    open fun getCriterion(textMatchStyle: String? /* "startsWith" */ = definedExternally /* null */): Criterion = definedExternally
    open fun getCriterion(textMatchStyle: String? /* "exact" */ = definedExternally /* null */): Criterion = definedExternally
    open fun getCriterion(textMatchStyle: String? /* "exactCase" */ = definedExternally /* null */): Criterion = definedExternally
    open fun getCriterion(textMatchStyle: String? /* "substring" */ = definedExternally /* null */): Criterion = definedExternally
    open fun setCriterion(criterion: Criterion): Unit = definedExternally
    open fun valueClipped(): Boolean = definedExternally
    open fun clearErrors(): Unit = definedExternally
    open fun setErrors(errors: String): Unit = definedExternally
    open fun setErrors(errors: Array<String>): Unit = definedExternally
    open fun hasErrors(): Boolean = definedExternally
    open fun validate(): Boolean = definedExternally
    open fun setRequired(required: Boolean): Unit = definedExternally
    open fun getCursorPosition(): Number = definedExternally
    open fun stopHover(): Unit = definedExternally
    open fun itemHover(item: FormItem, form: DynamicForm): Unit = definedExternally
    open fun titleHover(item: FormItem, form: DynamicForm): Unit = definedExternally
    open fun valueHover(item: FormItem, form: DynamicForm): Unit = definedExternally
    open fun titleHoverHTML(item: FormItem, form: DynamicForm): String = definedExternally
    open fun valueHoverHTML(item: FormItem, form: DynamicForm): String = definedExternally
    open fun itemHoverHTML(item: FormItem, form: DynamicForm): String = definedExternally
    open fun setTabIndex(tabIndex: Number): Unit = definedExternally
    open fun setDisabled(disabled: Boolean): Unit = definedExternally
    open fun setShowDisabled(showDisabled: Boolean): Unit = definedExternally
    open fun isDisabled(): Boolean = definedExternally
    open fun enable(): Unit = definedExternally
    open fun disable(): Unit = definedExternally
    open fun getCanFocus(): Boolean = definedExternally
    open fun focusInItem(): Unit = definedExternally
    open fun blurItem(): Unit = definedExternally
    open fun isFocused(): Boolean = definedExternally
    open fun focusAfterItem(forward: Boolean): Unit = definedExternally
    open fun isCutEvent(): Boolean = definedExternally
    open fun isPasteEvent(): Boolean = definedExternally
    open fun shouldStopKeyPressBubbling(keyName: String, characterValue: Number): Boolean = definedExternally
    open fun getLeft(): Number = definedExternally
    open fun getTop(): Number = definedExternally
    open fun getPageLeft(): Number = definedExternally
    open fun getPageTop(): Number = definedExternally
    open fun showIf(item: FormItem, value: Any, form: DynamicForm, values: Any): Boolean = definedExternally
    open fun defaultDynamicValue(item: FormItem, form: DynamicForm, values: Any): Unit = definedExternally
    open fun focus(form: DynamicForm, item: FormItem): Unit = definedExternally
    open fun blur(form: DynamicForm, item: FormItem): Unit = definedExternally
    open fun editorEnter(form: DynamicForm, item: FormItem, value: Any): Unit = definedExternally
    open fun editorExit(form: DynamicForm, item: FormItem, value: Any): Unit = definedExternally
    open fun click(form: DynamicForm, item: FormItem): Boolean = definedExternally
    open fun doubleClick(form: DynamicForm, item: FormItem): Boolean = definedExternally
    open fun showContextMenu(form: DynamicForm, item: FormItem): Boolean = definedExternally
    open fun pickerIconClick(form: DynamicForm, item: FormItem, pickerIcon: FormItemIcon): Boolean = definedExternally
    open fun iconClick(form: DynamicForm, item: FormItem, icon: FormItemIcon): Boolean = definedExternally
    open fun iconKeyPress(keyName: String, character: String, form: DynamicForm, item: FormItem, icon: FormItemIcon): Unit = definedExternally
    open fun change(form: DynamicForm, item: FormItem, value: Any, oldValue: Any): Boolean = definedExternally
    open fun changed(form: DynamicForm, item: FormItem, value: Any): Unit = definedExternally
    open fun pendingStatusChanged(form: DynamicForm, item: FormItem, pendingStatus: Boolean, newValue: Any, value: Any): Boolean = definedExternally
    open fun transformInput(form: DynamicForm, item: FormItem, value: Any, oldValue: Any): Any = definedExternally
    open fun titleClick(form: DynamicForm, item: FormItem): Boolean = definedExternally
    open fun titleDoubleClick(form: DynamicForm, item: FormItem): Boolean = definedExternally
    open fun keyPress(item: FormItem, form: DynamicForm, keyName: String, characterValue: Number): Boolean = definedExternally
    open fun keyDown(item: FormItem, form: DynamicForm, keyName: String): Boolean = definedExternally
    open fun keyUp(item: FormItem, form: DynamicForm, keyName: String): Boolean = definedExternally
    open fun getValueIcon(value: Any): String = definedExternally
    open fun getPrintValueIcon(value: Any): String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): FormItem = definedExternally
        var defaultPickerIconSpace: Number = definedExternally
        var defaultPickerIconHeight: Number = definedExternally
        fun getPickerIcon(pickerName: String /* "date" */, properties: FormItemIcon? = definedExternally /* null */): FormItemIcon = definedExternally
        fun getPickerIcon(pickerName: String /* "clear" */, properties: FormItemIcon? = definedExternally /* null */): FormItemIcon = definedExternally
        fun getPickerIcon(pickerName: String /* "search" */, properties: FormItemIcon? = definedExternally /* null */): FormItemIcon = definedExternally
        fun getPickerIcon(pickerName: String /* "refresh" */, properties: FormItemIcon? = definedExternally /* null */): FormItemIcon = definedExternally
        fun getPickerIcon(pickerName: String /* "comboBox" */, properties: FormItemIcon? = definedExternally /* null */): FormItemIcon = definedExternally
    }
    open fun getCriterion(): Criterion = definedExternally
}
external open class VLayout : Layout {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): VLayout = definedExternally
    }
}
external open class ProcessElement : Class {
    open var ID: String = definedExternally
    open var nextElement: String = definedExternally
    open var description: String = definedExternally
    open fun getElementDescription(): String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ProcessElement = definedExternally
    }
}
external open class SelectOtherItem : Class {
    open var separatorTitle: String = definedExternally
    open var separatorValue: String = definedExternally
    open var otherTitle: String = definedExternally
    open var otherValue: String = definedExternally
    open var selectOtherPrompt: String = definedExternally
    open var dialogWidth: Number = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SelectOtherItem = definedExternally
    }
}
external open class ScrollThumb : StretchImg {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ScrollThumb = definedExternally
    }
}
external open class MenuPalette : Menu, Palette {
//    override var defaultEditContext: dynamic /* EditContext | EditTree | EditPane */ = definedExternally
//    override var generateNames: Boolean = definedExternally
//    override fun setDefaultEditContext(defaultEditContext: EditContext): Unit = definedExternally
//    override fun setDefaultEditContext(defaultEditContext: EditTree): Unit = definedExternally
//    override fun setDefaultEditContext(defaultEditContext: EditPane): Unit = definedExternally
//    override fun makeEditNode(paletteNode: PaletteNode): EditNode = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): MenuPalette = definedExternally
    }
}
external open class DrawPolygon : DrawPath {
//    override var knobs: Array<dynamic /* String /* "resize" */ | String /* "move" */ | String /* "startPoint" */ | String /* "endPoint" */ | String /* "controlPoint1" */ | String /* "controlPoint2" */ | String /* "rotate" */ */> = definedExternally
//    override var showTitleLabelBackground: Boolean = definedExternally
//    override var points: Array<Any?> = definedExternally
//    override var lineCap: dynamic /* String /* "square" */ | String /* "round" */ | String /* "butt" */ */ = definedExternally
//    override var titleRotationMode: dynamic /* String /* "neverRotate" */ | String /* "withItem" */ | String /* "withItemAlwaysUp" */ | String /* "withLine" */ | String /* "withLineAlwaysUp" */ */ = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DrawPolygon = definedExternally
    }
}
external open class SplitPaneEditProxy : LayoutEditProxy {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SplitPaneEditProxy = definedExternally
    }
}
external open class DatabaseBrowser : Window {
    open var serverType: String = definedExternally
    open var dbName: String = definedExternally
    open var catalog: String = definedExternally
    open var schema: String = definedExternally
    open var schemaTree: ListGrid = definedExternally
    open var databaseList: ListGrid = definedExternally
    open var dataGrid: ListGrid = definedExternally
    open var selectButton: Button = definedExternally
//    override var title: String = definedExternally
    open var includeSubstring: dynamic /* String | Array<String> */ = definedExternally
    open var excludeSubstring: dynamic /* String | Array<String> */ = definedExternally
    open fun getGeneratedDataSource(): Unit = definedExternally
    open fun getResults(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DatabaseBrowser = definedExternally
    }
}
external open class DrawSector : DrawItem {
//    override var knobs: Array<dynamic /* String /* "resize" */ | String /* "move" */ | String /* "startPoint" */ | String /* "endPoint" */ | String /* "controlPoint1" */ | String /* "controlPoint2" */ | String /* "rotate" */ */> = definedExternally
//    override var showTitleLabelBackground: Boolean = definedExternally
//    override var rotation: Number = definedExternally
    open var centerPoint: Point = definedExternally
    open var startAngle: Number = definedExternally
    open var endAngle: Number = definedExternally
    open var radius: Number = definedExternally
//    override fun getBoundingBox(): Array<Number> = definedExternally
//    override fun getCenter(): Point = definedExternally
    open fun getArcMidpoint(): Point = definedExternally
//    override fun setCenterPoint(left: Number, top: Number): Unit = definedExternally
//    override fun moveBy(x: Number, y: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DrawSector = definedExternally
        fun getArcMidpoint(centerX: Number, centerY: Number, startAngle: Number, endAngle: Number, radius: Number): Point = definedExternally
    }
}
external open class XORGateway : ProcessElement {
    open var criteria: Any? = definedExternally
//    override var nextElement: String = definedExternally
    open var failureElement: String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): XORGateway = definedExternally
    }
}
external open class JSONEncoder : Class {
    open var serializeInstances: dynamic /* String /* "long" */ | String /* "short" */ | String /* "skip" */ */ = definedExternally
    open var skipInternalProperties: Boolean = definedExternally
    open var showDebugOutput: Boolean = definedExternally
    open var dateFormat: dynamic /* String /* "xmlSchema" */ | String /* "dateConstructor" */ | String /* "logicalDateConstructor" */ */ = definedExternally
    open var escapeNonPrintable: Boolean = definedExternally
    open var strictQuoting: Boolean = definedExternally
    open var circularReferenceMode: dynamic /* String /* "omit" */ | String /* "marker" */ | String /* "path" */ */ = definedExternally
    open var circularReferenceMarker: String = definedExternally
    open var prettyPrint: Boolean = definedExternally
    open fun encode(`object`: Any): String = definedExternally
    open fun encodeDate(theDate: Date): String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): JSONEncoder = definedExternally
    }
}
external open class TilePalette : TileGrid, Palette {
//    override var defaultEditContext: dynamic /* EditContext | EditTree | EditPane */ = definedExternally
//    override var generateNames: Boolean = definedExternally
//    override fun setDefaultEditContext(defaultEditContext: EditContext): Unit = definedExternally
//    override fun setDefaultEditContext(defaultEditContext: EditTree): Unit = definedExternally
//    override fun setDefaultEditContext(defaultEditContext: EditPane): Unit = definedExternally
//    override fun makeEditNode(paletteNode: PaletteNode): EditNode = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): TilePalette = definedExternally
    }
}
external open class ITreeMenuButton : TreeMenuButton {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ITreeMenuButton = definedExternally
    }
}
external open class Hover : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Hover = definedExternally
        var moveWithMouse: Boolean = definedExternally
        var leftOffset: Number = definedExternally
        var topOffset: Number = definedExternally
        var hoverCanvasDefaults: Any = definedExternally
        fun show(contents: String, properties: Label): Unit = definedExternally
        fun show(contents: Canvas, properties: Label): Unit = definedExternally
        fun hide(): Unit = definedExternally
    }
}
external open class Sound : BaseWidget {
    open var src: dynamic /* String | Array<String> */ = definedExternally
    open var autoLoad: Boolean = definedExternally
    open var autoPlay: Boolean = definedExternally
    open fun setSrc(src: String): Unit = definedExternally
    open fun setSrc(src: Array<String>): Unit = definedExternally
    open fun load(canPlayCallback: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun play(playbackCompleteCallback: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    open fun pause(): Unit = definedExternally
    open fun reset(): Unit = definedExternally
    open fun timeChanged(currentTime: Number): Unit = definedExternally
    open fun getDuration(): Number = definedExternally
    open fun getCurrentTime(): Number = definedExternally
    open fun setCurrentTime(time: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Sound = definedExternally
        fun isSupported(): Boolean = definedExternally
        fun play(src: String, playbackCompleteCallback: (() -> Unit)? = definedExternally /* null */): Unit = definedExternally
    }
}
external open class DiscoverTreeSettings {
    open var childrenMode: dynamic /* String /* "object" */ | String /* "any" */ | String /* "array" */ | String /* "objectArray" */ */ = definedExternally
    open var scanMode: dynamic /* String /* "node" */ | String /* "branch" */ | String /* "level" */ */ = definedExternally
    open var tieMode: dynamic /* String /* "stop" */ | String /* "node" */ | String /* "highest" */ */ = definedExternally
    open var newChildrenProperty: String = definedExternally
    open var typeProperty: String = definedExternally
    open var nameProperty: String = definedExternally
}
external open class TimeItem : FormItem {
    open var textField: TextItem = definedExternally
    open var textFieldProperties: TextItem = definedExternally
//    override var browserInputType: String = definedExternally
//    override var wrapHintText: Boolean = definedExternally
    open var showHintInField: Boolean = definedExternally
    open var usePlaceholderForHint: Boolean = definedExternally
    open var showHourItem: Boolean = definedExternally
    open var hourItem: SelectItem = definedExternally
    open var hourItemProperties: SelectItem = definedExternally
    open var hourItemTitle: String = definedExternally
    open var hourItemPrompt: String = definedExternally
    open var showMinuteItem: Boolean = definedExternally
    open var minuteItem: SelectItem = definedExternally
    open var minuteItemProperties: SelectItem = definedExternally
    open var minuteItemTitle: String = definedExternally
    open var minuteItemPrompt: String = definedExternally
    open var showSecondItem: Boolean = definedExternally
    open var secondItem: SelectItem = definedExternally
    open var secondItemProperties: SelectItem = definedExternally
    open var secondItemTitle: String = definedExternally
    open var secondItemPrompt: String = definedExternally
    open var showMillisecondItem: Boolean = definedExternally
    open var millisecondItem: SelectItem = definedExternally
    open var millisecondItemProperties: SelectItem = definedExternally
    open var millisecondItemTitle: String = definedExternally
    open var millisecondItemPrompt: String = definedExternally
    open var ampmItem: SelectItem = definedExternally
    open var ampmItemProperties: SelectItem = definedExternally
    open var ampmItemTitle: String = definedExternally
//    override var displayFormat: dynamic /* String /* "toTime" */ | String /* "to24HourTime" */ | String /* "toPaddedTime" */ | String /* "toPadded24HourTime" */ | String /* "toShortTime" */ | String /* "toShort24HourTime" */ | String /* "toShortPaddedTime" */ | String /* "toShortPadded24HourTime" */ */ = definedExternally
//    override var timeFormatter: dynamic /* String /* "toTime" */ | String /* "to24HourTime" */ | String /* "toPaddedTime" */ | String /* "toPadded24HourTime" */ | String /* "toShortTime" */ | String /* "toShort24HourTime" */ | String /* "toShortPaddedTime" */ | String /* "toShortPadded24HourTime" */ */ = definedExternally
    open var timeFormatter24Hour: dynamic /* String /* "toTime" */ | String /* "to24HourTime" */ | String /* "toPaddedTime" */ | String /* "toPadded24HourTime" */ | String /* "toShortTime" */ | String /* "toShort24HourTime" */ | String /* "toShortPaddedTime" */ | String /* "toShortPadded24HourTime" */ */ = definedExternally
    open var timeFormatter12Hour: dynamic /* String /* "toTime" */ | String /* "to24HourTime" */ | String /* "toPaddedTime" */ | String /* "toPadded24HourTime" */ | String /* "toShortTime" */ | String /* "toShort24HourTime" */ | String /* "toShortPaddedTime" */ | String /* "toShortPadded24HourTime" */ */ = definedExternally
    open var useMask: Boolean = definedExternally
    open var useTextField: Boolean = definedExternally
//    override var textAlign: dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */ = definedExternally
    open var invalidTimeStringMessage: String = definedExternally
    open var use24HourTime: Boolean = definedExternally
//    override var textBoxStyle: String = definedExternally
    open var hourValues: Array<Number> = definedExternally
    open var hourMinValue: Number = definedExternally
    open var hourMaxValue: Number = definedExternally
    open var hourIncrement: Number = definedExternally
    open var minuteValues: Array<Number> = definedExternally
    open var minuteMinValue: Number = definedExternally
    open var minuteMaxValue: Number = definedExternally
    open var minuteIncrement: Number = definedExternally
    open var secondValues: Array<Number> = definedExternally
    open var secondMinValue: Number = definedExternally
    open var secondMaxValue: Number = definedExternally
    open var secondIncrement: Number = definedExternally
    open var millisecondValues: Array<Number> = definedExternally
    open var millisecondMinValue: Number = definedExternally
    open var millisecondMaxValue: Number = definedExternally
    open var millisecondIncrement: Number = definedExternally
    open fun setHourValues(values: Array<Number>): Unit = definedExternally
    open fun getHourValues(): Array<Number> = definedExternally
    open fun setMinuteValues(values: Array<Number>): Unit = definedExternally
    open fun getMinuteValues(): Array<Number> = definedExternally
    open fun setSecondValues(values: Array<Number>): Unit = definedExternally
    open fun getSecondValues(): Array<Number> = definedExternally
    open fun setMillisecondValues(values: Array<Number>): Unit = definedExternally
    open fun getMillisecondValues(): Array<Number> = definedExternally
    open fun setHours(hours: Number): Unit = definedExternally
    open fun setMinutes(minutes: Number): Unit = definedExternally
    open fun setSeconds(seconds: Number): Unit = definedExternally
    open fun setMilliseconds(milliseconds: Number): Unit = definedExternally
    open fun getDuration(timeUnit: String? /* "millisecond" */ = definedExternally /* null */): Number = definedExternally
    open fun getDuration(timeUnit: String? /* "second" */ = definedExternally /* null */): Number = definedExternally
    open fun getDuration(timeUnit: String? /* "minute" */ = definedExternally /* null */): Number = definedExternally
    open fun getDuration(timeUnit: String? /* "hour" */ = definedExternally /* null */): Number = definedExternally
    open fun getDuration(timeUnit: String? /* "day" */ = definedExternally /* null */): Number = definedExternally
    open fun getDuration(timeUnit: String? /* "week" */ = definedExternally /* null */): Number = definedExternally
    open fun getDuration(timeUnit: String? /* "month" */ = definedExternally /* null */): Number = definedExternally
    open fun getDuration(timeUnit: String? /* "quarter" */ = definedExternally /* null */): Number = definedExternally
    open fun getDuration(timeUnit: String? /* "year" */ = definedExternally /* null */): Number = definedExternally
//    override fun pendingStatusChanged(form: DynamicForm, item: FormItem, pendingStatus: Boolean, newValue: Any, value: Any): Boolean = definedExternally
//    override fun setValue(newValue: Any): Unit = definedExternally
    open fun getEnteredValue(): String = definedExternally
    open fun setSelectionRange(start: Number, end: Number): Unit = definedExternally
    open fun getSelectionRange(): Array<Any> = definedExternally
    open fun selectValue(): Unit = definedExternally
    open fun deselectValue(start: Boolean? = definedExternally /* null */): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): TimeItem = definedExternally
    }
    open fun getDuration(): Number = definedExternally
}
external open class DrawLine : DrawItem {
//    override var knobs: Array<dynamic /* String /* "resize" */ | String /* "move" */ | String /* "startPoint" */ | String /* "endPoint" */ | String /* "controlPoint1" */ | String /* "controlPoint2" */ | String /* "rotate" */ */> = definedExternally
//    override var titleRotationMode: dynamic /* String /* "neverRotate" */ | String /* "withItem" */ | String /* "withItemAlwaysUp" */ | String /* "withLine" */ | String /* "withLineAlwaysUp" */ */ = definedExternally
//    override var showTitleLabelBackground: Boolean = definedExternally
    open var startPoint: Point = definedExternally
    open var endPoint: Point = definedExternally
    open var startLeft: Number = definedExternally
    open var startTop: Number = definedExternally
    open var endLeft: Number = definedExternally
    open var endTop: Number = definedExternally
    open fun setStartPoint(left: Number, top: Number): Unit = definedExternally
    open fun setEndPoint(left: Number, top: Number): Unit = definedExternally
//    override fun getBoundingBox(): Array<Number> = definedExternally
//    override fun getCenter(): Point = definedExternally
//    override fun isPointInPath(x: Number, y: Number): Boolean = definedExternally
//    override fun moveBy(left: Number, top: Number): Unit = definedExternally
    open fun moveStartPointTo(left: Number, top: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DrawLine = definedExternally
    }
}
external open class AdaptiveMenu : Layout {
    open var partialInlining: Boolean = definedExternally
    open var inlinePlacement: dynamic /* String /* "left" */ | String /* "top" */ | String /* "right" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
    open var showIconOnlyInline: Boolean = definedExternally
    open var items: Array<Any?> = definedExternally
    open var menu: Menu = definedExternally
    open var menuButton: MenuButton = definedExternally
    open var menuButtonTitle: String = definedExternally
    open var menuButtonIcon: String = definedExternally
    open var inlineMenuItem: ToolStripButton = definedExternally
    open var inlineSubmenuItem: IconMenuButton = definedExternally
    open var showInlineSeparators: Boolean = definedExternally
    open var inlineImgButton: ImgButton = definedExternally
    open fun setItems(items: MenuItem): Unit = definedExternally
    open fun setItems(items: Array<Any?>): Unit = definedExternally
    open fun setPartialInlining(partialInlining: Boolean): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): AdaptiveMenu = definedExternally
    }
}
external open class ResultSet : Class, List {
    open var fetchMode: dynamic /* String /* "basic" */ | String /* "paged" */ | String /* "local" */ */ = definedExternally
    open var initialData: Array<Any?> = definedExternally
    open var initialLength: Number = definedExternally
    open var sortSpecifiers: Array<Any?> = definedExternally
    open var allRows: Array<Any?> = definedExternally
    open var resultSize: Number = definedExternally
    open var fetchDelay: Number = definedExternally
    open var dataSource: DataSource = definedExternally
    open var fetchOperation: String = definedExternally
    open var requestProperties: DSRequest = definedExternally
    open var implicitCriteria: Any? = definedExternally
    open var criteria: Any? = definedExternally
    open var criteriaPolicy: dynamic /* String /* "dropOnChange" */ | String /* "dropOnShortening" */ */ = definedExternally
    open var useClientSorting: Boolean = definedExternally
    open var useClientFiltering: Boolean = definedExternally
    open var updateCacheFromRequest: Boolean = definedExternally
    open var dropCacheOnUpdate: Boolean = definedExternally
    open var disableCacheSync: Boolean = definedExternally
    open var progressiveLoading: Boolean = definedExternally
    open var neverDropUpdatedRows: Boolean = definedExternally
    open var updatePartialCache: Boolean = definedExternally
    open var alwaysRequestVisibleRows: Boolean = definedExternally
    open fun allMatchingRowsCached(): Boolean = definedExternally
    open fun allRowsCached(): Boolean = definedExternally
//    override fun getValueMap(idField: String, displayField: String): Any = definedExternally
//    override fun getLength(): Number = definedExternally
//    override fun indexOf(obj: Any, pos: Number?, endPos: Number?): Number = definedExternally
//    override fun get(pos: Number): Any = definedExternally
//    override fun getRange(start: Number, end: Number): Array<Any> = definedExternally
    open fun getAllVisibleRows(): Array<Any?> = definedExternally
    open fun usingFilteredData(): Boolean = definedExternally
    open fun getAllCachedRows(): Array<Any?> = definedExternally
//    override fun duplicate(): ResultSet = definedExternally
    open fun lengthIsKnown(): Boolean = definedExternally
    open fun rowIsLoaded(rowNum: Number): Boolean = definedExternally
    open fun rangeIsLoaded(startRow: Number, endRow: Number): Boolean = definedExternally
    open fun findByKey(keyValue: Any): Record = definedExternally
    open fun setCriteria(newCriteria: Any?): Boolean = definedExternally
    open fun getCriteria(): Any? = definedExternally
    open fun compareCriteria(newCriteria: Any?, oldCriteria: Any?, requestProperties: DSRequest? = definedExternally /* null */, policy: String? = definedExternally /* null */): Number = definedExternally
    open fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "startsWith" */ = definedExternally /* null */): Boolean = definedExternally
    open fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "exact" */ = definedExternally /* null */): Boolean = definedExternally
    open fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "exactCase" */ = definedExternally /* null */): Boolean = definedExternally
    open fun willFetchData(newCriteria: Any?, textMatchStyle: String? /* "substring" */ = definedExternally /* null */): Boolean = definedExternally
//    override fun sortByProperty(property: String, up: Boolean, normalizer: Any?, context: Any?): List = definedExternally
//    override fun sortByProperty(property: String, up: Boolean, normalizer: Function<*>?, context: Any?): List = definedExternally
    open fun getSort(): Array<Any?> = definedExternally
    open fun setSort(): Unit = definedExternally
    open fun resort(): Unit = definedExternally
    open fun filterLocalData(): Unit = definedExternally
    open fun applyFilter(data: Array<Any>, criteria: Any?, requestProperties: DSRequest? = definedExternally /* null */): Array<Any> = definedExternally
    open fun invalidateCache(): Unit = definedExternally
    open fun transformData(newData: Any, dsResponse: DSResponse): Array<Any?> = definedExternally
    open fun dataArrived(startRow: Number, endRow: Number): Unit = definedExternally
//    override fun findAll(propertyName: String, value: Any?): Array<Any> = definedExternally
//    override fun findAll(propertyName: Any?, value: Any?): Array<Any> = definedExternally
//    override fun findAll(propertyName: AdvancedCriteria, value: Any?): Array<Any> = definedExternally
//    override fun find(propertyName: String, value: Any?): Any = definedExternally
//    override fun find(propertyName: Any?, value: Any?): Any = definedExternally
//    override fun find(propertyName: AdvancedCriteria, value: Any?): Any = definedExternally
//    override fun findIndex(propertyName: String, value: Any?): Number = definedExternally
//    override fun findIndex(propertyName: Any?, value: Any?): Number = definedExternally
//    override fun findIndex(propertyName: AdvancedCriteria, value: Any?): Number = definedExternally
//    override fun findNextIndex(startIndex: Number, propertyName: String, value: Any?, endIndex: Number?): Number = definedExternally
//    override fun findNextIndex(startIndex: Number, propertyName: Any?, value: Any?, endIndex: Number?): Number = definedExternally
//    override fun findNextIndex(startIndex: Number, propertyName: Function<*>, value: Any?, endIndex: Number?): Number = definedExternally
//    override fun findNextIndex(startIndex: Number, propertyName: AdvancedCriteria, value: Any?, endIndex: Number?): Number = definedExternally
//    override fun getProperty(property: String): Array<Any> = definedExternally
//    override fun isEmpty(): Boolean = definedExternally
//    override fun first(): Any = definedExternally
//    override fun last(): Any = definedExternally
//    override fun lastIndexOf(obj: Any, pos: Number?, endPos: Number?): Number = definedExternally
//    override fun contains(obj: Any, pos: Number?): Boolean = definedExternally
//    override fun containsAll(list: List): Boolean = definedExternally
//    override fun intersect(lists: Any): List = definedExternally
//    override fun equals(list: List): Boolean = definedExternally
//    override fun getItems(itemList: Array<Number>): Array<Any> = definedExternally
//    override fun set(pos: Number, obj: Any): Any = definedExternally
//    override fun addAt(obj: Any, pos: Number): Any = definedExternally
//    override fun removeAt(pos: Number): Any = definedExternally
//    override fun add(`object`: Any): Any = definedExternally
//    override fun addList(list: Array<Any>, listStartRow: Number?, listEndRow: Number?): List = definedExternally
//    override fun setLength(length: Number): Unit = definedExternally
//    override fun addListAt(list: Array<Any>, pos: Number): Array<Any> = definedExternally
//    override fun remove(obj: Any): Boolean = definedExternally
//    override fun removeList(list: Array<Any>): List = definedExternally
//    override fun sort(comparator: Function<*>?): List = definedExternally
//    override fun dataChanged(): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ResultSet = definedExternally
        fun getLoadingMarker(): String = definedExternally
    }
    open fun willFetchData(newCriteria: Any?): Boolean = definedExternally
    // override fun sortByProperty(property: String, up: Boolean): List = definedExternally
}
external open class DrawBlockConnector : DrawCurve {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): DrawBlockConnector = definedExternally
    }
}
external open class RibbonBar : ToolStrip {
    open fun addGroup(group: RibbonGroup, position: Number? = definedExternally /* null */): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): RibbonBar = definedExternally
    }
}
external open class PresetDateRangeItem : PresetCriteriaItem {
//    override fun getCriterion(): dynamic /* AdvancedCriteria | Criterion */ = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): PresetDateRangeItem = definedExternally
    }
}
external open class EdgedCanvas : Canvas {
//    override var skinImgDir: String = definedExternally
//    override var edgeImage: String = definedExternally
    open var edgeColor: String = definedExternally
//    override var customEdges: Array<String> = definedExternally
    open var showCenter: Boolean = definedExternally
//    override var edgeSize: Number = definedExternally
    open var edgeLeft: Number = definedExternally
    open var edgeRight: Number = definedExternally
    open var edgeTop: Number = definedExternally
    open var edgeBottom: Number = definedExternally
//    override var edgeOffset: Number = definedExternally
    open var edgeOffsetTop: Number = definedExternally
    open var edgeOffsetBottom: Number = definedExternally
    open var edgeOffsetLeft: Number = definedExternally
    open var edgeOffsetRight: Number = definedExternally
    open var centerBackgroundColor: String = definedExternally
    open var edgeStyleName: String = definedExternally
    open var addEdgeStyleSuffix: Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): EdgedCanvas = definedExternally
    }
}
external open class ColorPicker : Window {
    open var okButton: IButton = definedExternally
    open var showOkButton: Boolean = definedExternally
    open var okButtonConstructor: Class = definedExternally
    open var cancelButton: IButton = definedExternally
    open var showCancelButton: Boolean = definedExternally
    open var cancelButtonConstructor: Class = definedExternally
    open var modeToggleButton: IButton = definedExternally
    open var showModeToggleButton: Boolean = definedExternally
    open var modeToggleButtonConstructor: Class = definedExternally
    open var defaultColor: Text = definedExternally
    open var colorButtonSize: Number = definedExternally
    open var colorButtonBaseStyle: String = definedExternally
    open var colorArray: Array<String> = definedExternally
    open var swatchWidth: Number = definedExternally
    open var swatchHeight: Number = definedExternally
    open var lumWidth: Number = definedExternally
    open var supportsTransparency: Boolean = definedExternally
    open var opacityText: String = definedExternally
    open var swatchImageURL: String = definedExternally
    open var crosshairImageURL: String = definedExternally
    open var lessButtonTitle: String = definedExternally
    open var moreButtonTitle: String = definedExternally
    open var basicColorLabel: String = definedExternally
    open var selectedColorLabel: String = definedExternally
    open var opacitySliderLabel: String = definedExternally
    open var defaultOpacity: Number = definedExternally
    open var redFieldTitle: String = definedExternally
    open var redFieldPrompt: String = definedExternally
    open var greenFieldTitle: String = definedExternally
    open var greenFieldPrompt: String = definedExternally
    open var blueFieldTitle: String = definedExternally
    open var blueFieldPrompt: String = definedExternally
    open var htmlFieldTitle: String = definedExternally
    open var htmlFieldPrompt: String = definedExternally
    open var hueFieldTitle: String = definedExternally
    open var hueFieldPrompt: String = definedExternally
    open var satFieldTitle: String = definedExternally
    open var satFieldPrompt: String = definedExternally
    open var lumFieldTitle: String = definedExternally
    open var lumFieldPrompt: String = definedExternally
    open var okButtonTitle: String = definedExternally
    open var cancelButtonTitle: String = definedExternally
    open var autoPosition: Boolean = definedExternally
    open var autoCenterOnShow: Boolean = definedExternally
    open var autoHide: Boolean = definedExternally
    open var defaultPickMode: dynamic /* String /* "simple" */ | String /* "complex" */ */ = definedExternally
    open var allowComplexMode: Boolean = definedExternally
    open fun setSupportsTransparency(transparencyFlag: Boolean): Unit = definedExternally
    open fun getRed(): Number = definedExternally
    open fun getGreen(): Number = definedExternally
    open fun getBlue(): Number = definedExternally
    open fun getHue(): Number = definedExternally
    open fun getSaturation(): Number = definedExternally
    open fun getLuminosity(): Number = definedExternally
    open fun getHtmlColor(): String = definedExternally
    open fun getOpacity(): Number = definedExternally
    open fun setRed(newValue: Number): Unit = definedExternally
    open fun setGreen(newValue: Number): Unit = definedExternally
    open fun setBlue(newValue: Number): Unit = definedExternally
    open fun setHue(newValue: Number): Unit = definedExternally
    open fun setSaturation(newValue: Number): Unit = definedExternally
    open fun setLuminosity(newValue: Number): Unit = definedExternally
    open fun setHtmlColor(newValue: Text): Unit = definedExternally
//    override fun setOpacity(newValue: Number): Unit = definedExternally
    open fun setCurrentPickMode(pickMode: String /* "simple" */): Unit = definedExternally
    open fun setCurrentPickMode(pickMode: String /* "complex" */): Unit = definedExternally
    open fun colorChanged(): Unit = definedExternally
    open fun colorSelected(color: String, opacity: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ColorPicker = definedExternally
        fun getSharedColorPicker(properties: Any, keepCurrentState: Boolean? = definedExternally /* null */): Unit = definedExternally
    }
}
external open class Hilite {
    open var id: String = definedExternally
    open var cssText: String = definedExternally
    open var fieldName: dynamic /* String | Array<String> */ = definedExternally
    open var criteria: dynamic /* Any? | AdvancedCriteria */ = definedExternally
    open var htmlBefore: String = definedExternally
    open var htmlAfter: String = definedExternally
    open var htmlValue: String = definedExternally
    open var disabled: Boolean = definedExternally
    open var canEdit: Boolean = definedExternally
    open var title: String = definedExternally
    open var textColor: String = definedExternally
    open var backgroundColor: String = definedExternally
    open var icon: String = definedExternally
    open var replacementValue: String = definedExternally
}
external open class Timer : Class {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Timer = definedExternally
        fun setTimeout(action: String, delay: Number): Any = definedExternally
        fun setTimeout(action: Function<*>, delay: Number): Any = definedExternally
        fun clear(timerEvent: Any): Unit = definedExternally
    }
}
external open class SimpleTabButton : Button {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SimpleTabButton = definedExternally
    }
}
external open class SortSpecifier {
    open var property: String = definedExternally
    open var direction: dynamic /* String /* "ascending" */ | String /* "descending" */ */ = definedExternally
    open var normalizer: Function<*> = definedExternally
    open var context: DataBoundComponent = definedExternally
}
external open class TextItem : FormItem {
//    override var width: Number = definedExternally
//    override var height: Number = definedExternally
//    override var textBoxStyle: String = definedExternally
    open var length: Number = definedExternally
    open var enforceLength: Boolean = definedExternally
    open var emptyStringValue: Any = definedExternally
    open var browserAutoCapitalize: Boolean = definedExternally
    open var browserAutoCorrect: Boolean = definedExternally
//    override var browserInputType: String = definedExternally
//    override var selectOnFocus: Boolean = definedExternally
//    override var selectOnClick: Boolean = definedExternally
//    override var changeOnKeypress: Boolean = definedExternally
//    override var supportsCutPasteEvents: Boolean = definedExternally
//    override var fetchMissingValues: Boolean = definedExternally
    open var showHintInField: Boolean = definedExternally
    open var usePlaceholderForHint: Boolean = definedExternally
    open var printFullText: Boolean = definedExternally
//    override var saveOnEnter: Boolean = definedExternally
    open var escapeHTML: Boolean = definedExternally
    open var suppressBrowserClearIcon: Boolean = definedExternally
    open var characterCasing: dynamic /* String /* "default" */ | String /* "upper" */ | String /* "lower" */ */ = definedExternally
    open var keyPressFilter: String = definedExternally
    open var formatOnBlur: Boolean = definedExternally
    open var formatOnFocusChange: Boolean = definedExternally
    open var mask: String = definedExternally
    open var maskOverwriteMode: Boolean = definedExternally
    open var maskSaveLiterals: Boolean = definedExternally
    open var maskPadChar: String = definedExternally
    open var maskPromptChar: String = definedExternally
//    override var editProxyConstructor: String = definedExternally
    open fun getHint(): String = definedExternally
    open fun getSelectionRange(): Array<Number> = definedExternally
    open fun setSelectionRange(start: Number, end: Number): Unit = definedExternally
    open fun selectValue(): Unit = definedExternally
    open fun deselectValue(start: Boolean? = definedExternally /* null */): Unit = definedExternally
//    override fun shouldFetchMissingValue(newValue: Any): Boolean = definedExternally
    open fun setSuppressBrowserClearIcon(newValue: Boolean): Unit = definedExternally
    open fun getEnteredValue(): String = definedExternally
    open fun setKeyPressFilter(filter: String): Unit = definedExternally
    open fun transformPastedValue(item: FormItem, form: DynamicForm, pastedValue: String): String = definedExternally
    open fun setMask(mask: String): Unit = definedExternally
//    override fun pendingStatusChanged(form: DynamicForm, item: FormItem, pendingStatus: Boolean, newValue: Any, value: Any): Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): TextItem = definedExternally
        var DEFAULT: String = definedExternally
        var UPPER: String = definedExternally
        var LOWER: String = definedExternally
        var suppressClearIconClassName: String = definedExternally
    }
}
external open class HeaderLevel {
    open var unit: dynamic /* String /* "millisecond" */ | String /* "second" */ | String /* "minute" */ | String /* "hour" */ | String /* "day" */ | String /* "week" */ | String /* "month" */ | String /* "quarter" */ | String /* "year" */ */ = definedExternally
    open var headerWidth: Number = definedExternally
    open var titles: Array<String> = definedExternally
    open fun titleFormatter(headerLevel: HeaderLevel, startDate: Date, endDate: Date, defaultValue: String, viewer: Calendar): String = definedExternally
}
external open class ProgressbarEditProxy : StatefulCanvasEditProxy {
//    override fun getInlineEditText(): Unit = definedExternally
//    override fun setInlineEditText(newValue: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ProgressbarEditProxy = definedExternally
    }
}
external open class HiddenItem : FormItem {
//    override var showTitle: Boolean = definedExternally
//    override var colSpan: dynamic /* String | Number */ = definedExternally
//    override var rowSpan: Number = definedExternally
//    override var fetchMissingValues: Boolean = definedExternally
//    override var alwaysFetchMissingValues: Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): HiddenItem = definedExternally
    }
}
external open class SyntaxHiliter : Class {
    open fun hilite(source: String): String = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SyntaxHiliter = definedExternally
    }
}
external open class BrowserPlugin : Canvas {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): BrowserPlugin = definedExternally
    }
}
external open class Operator {
    open var ID: dynamic /* String /* "equals" */ | String /* "notEqual" */ | String /* "iEquals" */ | String /* "iNotEqual" */ | String /* "greaterThan" */ | String /* "lessThan" */ | String /* "greaterOrEqual" */ | String /* "lessOrEqual" */ | String /* "contains" */ | String /* "startsWith" */ | String /* "endsWith" */ | String /* "iContains" */ | String /* "iStartsWith" */ | String /* "iEndsWith" */ | String /* "notContains" */ | String /* "notStartsWith" */ | String /* "notEndsWith" */ | String /* "iNotContains" */ | String /* "iNotStartsWith" */ | String /* "iNotEndsWith" */ | String /* "iBetween" */ | String /* "iBetweenInclusive" */ | String /* "matchesPattern" */ | String /* "iMatchesPattern" */ | String /* "containsPattern" */ | String /* "startsWithPattern" */ | String /* "endsWithPattern" */ | String /* "iContainsPattern" */ | String /* "iStartsWithPattern" */ | String /* "iEndsWithPattern" */ | String /* "regexp" */ | String /* "iregexp" */ | String /* "isBlank" */ | String /* "notBlank" */ | String /* "isNull" */ | String /* "notNull" */ | String /* "inSet" */ | String /* "notInSet" */ | String /* "equalsField" */ | String /* "notEqualField" */ | String /* "iEqualsField" */ | String /* "iNotEqualField" */ | String /* "greaterThanField" */ | String /* "lessThanField" */ | String /* "greaterOrEqualField" */ | String /* "lessOrEqualField" */ | String /* "containsField" */ | String /* "startsWithField" */ | String /* "endsWithField" */ | String /* "iContainsField" */ | String /* "iStartsWithField" */ | String /* "iEndsWithField" */ | String /* "notContainsField" */ | String /* "notStartsWithField" */ | String /* "notEndsWithField" */ | String /* "iNotContainsField" */ | String /* "iNotStartsWithField" */ | String /* "iNotEndsWithField" */ | String /* "and" */ | String /* "not" */ | String /* "or" */ | String /* "between" */ | String /* "betweenInclusive" */ */ = definedExternally
    open var title: String = definedExternally
    open var titleProperty: String = definedExternally
    open var textTitle: String = definedExternally
    open var textTitleProperty: String = definedExternally
    open var fieldTypes: Array<dynamic /* String /* "boolean" */ | String /* "text" */ | String /* "integer" */ | String /* "float" */ | String /* "date" */ | String /* "time" */ | String /* "datetime" */ | String /* "enum" */ | String /* "intEnum" */ | String /* "sequence" */ | String /* "link" */ | String /* "image" */ | String /* "binary" */ | String /* "imageFile" */ | String /* "any" */ | String /* "custom" */ | String /* "modifier" */ | String /* "modifierTimestamp" */ | String /* "creator" */ | String /* "creatorTimestamp" */ | String /* "password" */ | String /* "ntext" */ | String /* "localeInt" */ | String /* "localeFloat" */ | String /* "localeCurrency" */ | String /* "phoneNumber" */ */> = definedExternally
    open var requiresServer: Boolean = definedExternally
    open var hidden: Boolean = definedExternally
    open var valueType: dynamic /* String /* "none" */ | String /* "custom" */ | String /* "fieldType" */ | String /* "fieldName" */ | String /* "criteria" */ | String /* "valueRange" */ | String /* "valueSet" */ */ = definedExternally
    open var editorType: String = definedExternally
    open var symbol: String = definedExternally
    open fun condition(value: Any, record: Record, fieldName: Any, criterion: Criterion, operator: Operator): Boolean = definedExternally
    open fun compareCriteria(newCriterion: Criterion, oldCriterion: Criterion): Number = definedExternally
    open fun getCriterion(fieldName: String, item: FormItem): Criterion = definedExternally
}
external open class MathFunction : Class {
    open var name: String = definedExternally
    open var description: String = definedExternally
    open var jsFunction: Function<*> = definedExternally
    open var defaultSortPosition: Number = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): MathFunction = definedExternally
        fun registerFunction(newFunction: MathFunction): Unit = definedExternally
        fun getRegisteredFunctionIndex(): Number = definedExternally
        fun getDefaultFunctionIndex(): Number = definedExternally
    }
}
external open class Timeline : Calendar {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Timeline = definedExternally
    }
}
external open class SectionHeader : Label {
//    override var title: String = definedExternally
    open var clipTitle: Boolean = definedExternally
//    override var showClippedTitleOnHover: Boolean = definedExternally
    open var controls: Array<Any?> = definedExternally
    open var controlsLayout: Layout = definedExternally
//    override var icon: String = definedExternally
//    override var baseStyle: String = definedExternally
//    override var noDoubleClicks: Boolean = definedExternally
    open fun getSectionStack(): SectionStack = definedExternally
//    override fun titleClipped(): Boolean = definedExternally
//    override fun titleHoverHTML(defaultHTML: String): String = definedExternally
//    override fun titleHover(): Boolean = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SectionHeader = definedExternally
    }
}
external open class ToolStripMenuButton : MenuButton {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): ToolStripMenuButton = definedExternally
    }
}
external open class LinkItem : TextItem {
//    override var disableIconsOnReadOnly: Boolean = definedExternally
//    override var iconVAlign: dynamic /* String /* "top" */ | String /* "center" */ | String /* "bottom" */ */ = definedExternally
//    override var readOnlyDisplay: dynamic /* String /* "static" */ | String /* "readOnly" */ | String /* "disabled" */ */ = definedExternally
    open var target: String = definedExternally
    open var linkTitle: String = definedExternally
    open fun setLinkTitle(title: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): LinkItem = definedExternally
    }
}
external open class PickTreeItem : CanvasItem {
//    override var shouldSaveValue: Boolean = definedExternally
    open var button: Canvas = definedExternally
    open var pendingButtonStyle: String = definedExternally
    open var dataSource: dynamic /* String | DataSource */ = definedExternally
    open var dataProperties: Tree = definedExternally
    open var valueTree: Tree = definedExternally
    open var loadDataOnDemand: Boolean = definedExternally
//    override var displayField: String = definedExternally
//    override var valueField: String = definedExternally
    open var emptyMenuMessage: String = definedExternally
//    override var emptyDisplayValue: String = definedExternally
//    override var readOnlyDisplay: dynamic /* String /* "static" */ | String /* "readOnly" */ | String /* "disabled" */ */ = definedExternally
    open var canSelectParentItems: Boolean = definedExternally
//    override var optionDataSource: DataSource = definedExternally
    open fun setValueTree(valueTree: Tree): Unit = definedExternally
//    override fun pendingStatusChanged(form: DynamicForm, item: FormItem, pendingStatus: Boolean, newValue: Any, value: Any): Boolean = definedExternally
    open fun fetchData(): Unit = definedExternally
    open fun setEmptyDisplayValue(emptyDisplayValue: String): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): PickTreeItem = definedExternally
    }
}
external open class SelectItem : FormItem, PickList {
//    override var height: Number = definedExternally
    open var addUnknownValues: Boolean = definedExternally
//    override var defaultValue: Any = definedExternally
    open var defaultToFirstOption: Boolean = definedExternally
//    override var multiple: Boolean = definedExternally
    open var multipleAppearance: dynamic /* String /* "grid" */ | String /* "picklist" */ */ = definedExternally
//    override var useClientFiltering: Any = definedExternally
//    override var showPickerIcon: Boolean = definedExternally
//    override var emptyDisplayValue: String = definedExternally
//    override var textBoxStyle: String = definedExternally
//    override var controlStyle: String = definedExternally
//    override var pickerIconStyle: String = definedExternally
//    override var showFocused: Boolean = definedExternally
//    override var pickerIconWidth: Number = definedExternally
//    override var pickerIconHeight: Number = definedExternally
//    override var pickerIconSrc: String = definedExternally
    open var hiliteOnFocus: Boolean = definedExternally
    open var hiliteColor: String = definedExternally
    open var hiliteTextColor: String = definedExternally
    open var pickButtonWidth: Number = definedExternally
    open var pickButtonHeight: Number = definedExternally
    open var pickButtonSrc: String = definedExternally
//    override var showOver: Boolean = definedExternally
//    override var updateTextBoxOnOver: Boolean = definedExternally
//    override var updateControlOnOver: Boolean = definedExternally
//    override var canSelectText: Boolean = definedExternally
    open var allowEmptyValue: Boolean = definedExternally
//    override var specialValues: Any? = definedExternally
    open var separateSpecialValues: Boolean = definedExternally
    open var separateValuesList: ListGrid = definedExternally
    open var autoFetchData: Boolean = definedExternally
    open var showHintInField: Boolean = definedExternally
    open var progressiveLoading: Boolean = definedExternally
//    override var saveOnEnter: Boolean = definedExternally
    open var openOnSpace: Boolean = definedExternally
    open var openOnDownArrow: Boolean = definedExternally
//    override var rootNodeId: dynamic /* String | Number */ = definedExternally
    // override var autoOpenTree: String = definedExternally
    open var pickListPlacement: dynamic /* String | Canvas */ = definedExternally
//    override var iconPlacement: dynamic /* String /* "pickerNavigationBar" */ | String /* "formItem" */ | String /* "both" */ */ = definedExternally
    open var pickerExitButton: NavigationButton = definedExternally
    open var pickerExitButtonTitle: String = definedExternally
    // override var emptyPickListMessage: String = definedExternally
    open var pickerNavigationBar: NavigationBar = definedExternally
    open var allowMultiCharSearch: Boolean = definedExternally
    open var escapeHTML: Boolean = definedExternally
//    override var pickListConstructor: String = definedExternally
//    override var pickTreeConstructor: String = definedExternally
//    override var dataSetType: String = definedExternally
    override var optionDataSource: dynamic /* String | DataSource */ get() = definedExternally; set(value) = definedExternally
//    override var textMatchStyle: dynamic /* String /* "startsWith" */ | String /* "exact" */ | String /* "exactCase" */ | String /* "substring" */ */ = definedExternally
//    override var pickListFields: Array<Any?> = definedExternally
//    override var cachePickListResults: Boolean = definedExternally
//    override var fetchDisplayedFieldsOnly: Boolean = definedExternally
//    override var optionFilterContext: DSRequest = definedExternally
    override var optionFilterContext: DSRequest? get() = definedExternally; set(value) = definedExternally
//    override var optionOperationId: String = definedExternally
    override var displayField: String? get() = definedExternally; set(value) = definedExternally
//    override var valueField: String = definedExternally
    override var filterLocally: Boolean? get() = definedExternally; set(value) = definedExternally
//    override var pickListCriteria: Any? = definedExternally
//    override var showOptionsFromDataSource: Boolean = definedExternally
//    override var pickListProperties: ListGrid = definedExternally
//    override var sortField: dynamic /* String | Number | Array<String> */ = definedExternally
//    override var initialSort: Array<Any?> = definedExternally
//    override var editProxyConstructor: String = definedExternally
//    override fun setValueMap(valueMap: Any?): Unit = definedExternally
//    override fun setValueMap(valueMap: Array<Any>): Unit = definedExternally
    open fun defaultDynamicValue(): Unit = definedExternally
//    override fun pendingStatusChanged(form: DynamicForm, item: FormItem, pendingStatus: Boolean, newValue: Any, value: Any): Boolean = definedExternally
//    override fun showPicker(): Unit = definedExternally
//    override fun setValue(newValue: Any): Unit = definedExternally
    open fun getSelectedRecords(): Array<Any?> = definedExternally
//    override fun fetchData(callback: Any?, requestProperties: DSRequest?): Unit = definedExternally
//    override fun getDisplayFieldName(): String = definedExternally
//    override fun getValueFieldName(): String = definedExternally
//    override fun dataArrived(startRow: Number, endRow: Number, data: ResultSet): Unit = definedExternally
//    override fun getSelectedRecord(): ListGridRecord = definedExternally
//    override var pickListHeight: Number = definedExternally
//    override var emptyPickListHeight: Number = definedExternally
//    override var hideEmptyPickList: Boolean = definedExternally
//    override var pickListWidth: Number = definedExternally
//    override var pickListMaxWidth: Number = definedExternally
//    override var pickListBaseStyle: String = definedExternally
//    override var pickListTallBaseStyle: String = definedExternally
//    override var pickListApplyRowNumberStyle: Boolean = definedExternally
//    override var animatePickList: Boolean = definedExternally
//    override var pickListAnimationTime: Number = definedExternally
//    override var fetchDelay: Number = definedExternally
//    override var pickListCellHeight: Number = definedExternally
//    override var pickListHeaderHeight: Number = definedExternally
    override var useLocalDisplayFieldValue: Boolean? get() = definedExternally; set(value) = definedExternally
//    override var valueIconField: String = definedExternally
//    override var showAllOptions: Boolean = definedExternally
//    override var separatorRows: Array<Any?> = definedExternally
//    override fun getOptionDataSource(): DataSource = definedExternally
//    override fun getPickListFilterCriteria(): Any? = definedExternally
//    override fun getClientPickListData(): Array<Any?> = definedExternally
//    override fun filterClientPickListData(): Array<Any?> = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): SelectItem = definedExternally
        var selectAllStoredValue: String = definedExternally
        var emptyStoredValue: String = definedExternally
    }
}
external open class FileItem : CanvasItem {
//    override var shouldSaveValue: Boolean = definedExternally
//    override var multiple: Boolean = definedExternally
    open var accept: String = definedExternally
    open var showFileInline: Boolean = definedExternally
    open var editForm: DynamicForm = definedExternally
    open var uploadItem: UploadItem = definedExternally
    open var displayForm: DynamicForm = definedExternally
    open var displayItem: StaticTextItem = definedExternally
    open var displayCanvas: Canvas = definedExternally
    open var viewIconSrc: String = definedExternally
    open var downloadIconSrc: String = definedExternally
    open fun setMultiple(multiple: Boolean): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): FileItem = definedExternally
    }
}
external open class HTMLFlow : Canvas, DataBoundComponent {
//    override var contents: String = definedExternally
//    override var dynamicContents: Boolean = definedExternally
    open var contentsURL: String = definedExternally
    open var loadingMessage: String = definedExternally
    open var contentsURLParams: Any = definedExternally
    open var httpMethod: dynamic /* String /* "GET" */ | String /* "POST" */ */ = definedExternally
    open var contentsType: dynamic /* String /* "page" */ | String /* "fragment" */ */ = definedExternally
    open var allowCaching: Boolean = definedExternally
    open var evalScriptBlocks: Boolean = definedExternally
    open var captureSCComponents: Boolean = definedExternally
    open var selectContentOnSelectAll: Boolean = definedExternally
    open var iframeSandbox: String = definedExternally
    open fun setContentsURL(url: String? = definedExternally /* null */, params: Any? = definedExternally /* null */): Unit = definedExternally
    open fun loadingContent(): Boolean = definedExternally
//    override fun setContents(newContents: String?): Unit = definedExternally
    open fun fetchRelatedData(record: ListGridRecord, schema: String, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun fetchRelatedData(record: ListGridRecord, schema: Canvas, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun fetchRelatedData(record: ListGridRecord, schema: DataSource, callback: Any? = definedExternally /* null */, requestProperties: DSRequest? = definedExternally /* null */): Unit = definedExternally
    open fun handleError(rpcRequest: RPCRequest, rpcResponse: RPCResponse): Boolean = definedExternally
    open fun transformHTML(html: String): Unit = definedExternally
    open fun contentLoaded(): Unit = definedExternally
//    override var deepCloneOnEdit: Boolean = definedExternally
//    override var deepCloneNonFieldValuesOnEdit: Boolean = definedExternally
//    override var dataSource: dynamic /* String | DataSource */ = definedExternally
//    override var dataFetchMode: dynamic /* String /* "basic" */ | String /* "paged" */ | String /* "local" */ */ = definedExternally
//    override var dataPageSize: Number = definedExternally
//    override var dataFetchDelay: Number = definedExternally
//    override var fields: Array<Any?> = definedExternally
//    override var useAllDataSourceFields: Boolean = definedExternally
//    override var showHiddenFields: Boolean = definedExternally
//    override var showDetailFields: Boolean = definedExternally
//    override var showComplexFields: Boolean = definedExternally
//    override var fetchOperation: String = definedExternally
//    override var updateOperation: String = definedExternally
//    override var addOperation: String = definedExternally
//    override var removeOperation: String = definedExternally
//    override var exportFields: Array<String> = definedExternally
//    override var exportAll: Boolean = definedExternally
//    override var exportIncludeSummaries: Boolean = definedExternally
//    override var dragRecategorize: dynamic /* String /* "never" */ | String /* "always" */ | String /* "checked" */ */ = definedExternally
//    override var preventDuplicates: Boolean = definedExternally
//    override var duplicateDragMessage: String = definedExternally
//    override var showOfflineMessage: Boolean = definedExternally
//    override var offlineMessage: String = definedExternally
//    override var offlineSaveMessage: String = definedExternally
//    override var addDropValues: Boolean = definedExternally
//    override var dropValues: Any = definedExternally
//    override var dataArity: String = definedExternally
//    override var progressiveLoading: Boolean = definedExternally
//    override var canEditFieldAttribute: String = definedExternally
//    override var useFlatFields: Boolean = definedExternally
//    override var canChangeNonFieldValues: Boolean = definedExternally
//    override var autoFetchData: Boolean = definedExternally
//    override var initialCriteria: Any? = definedExternally
//    override var implicitCriteria: Any? = definedExternally
//    override var canEditHilites: Boolean = definedExternally
//    override var hilites: Array<Any?> = definedExternally
//    override var hiliteIcons: Array<String> = definedExternally
//    override var hiliteIconPosition: dynamic /* String /* "before" */ | String /* "after" */ | String /* "replace" */ */ = definedExternally
//    override var hiliteIconSize: Number = definedExternally
//    override var hiliteIconWidth: Number = definedExternally
//    override var hiliteIconHeight: Number = definedExternally
//    override var hiliteIconLeftPadding: Number = definedExternally
//    override var hiliteIconRightPadding: Number = definedExternally
//    override var hiliteProperty: String = definedExternally
//    override var hiliteState: String = definedExternally
//    override var fieldNamingStrategy: dynamic /* String /* "simple" */ | String /* "uuid" */ */ = definedExternally
//    override var editHilitesText: String = definedExternally
//    override var editHilitesDialogTitle: String = definedExternally
//    override var fieldEditorWindowTitle: String = definedExternally
//    override var fieldEditorWindow: Window = definedExternally
//    override var hiliteEditor: HiliteEditor = definedExternally
//    override var dragDataAction: dynamic /* String /* "none" */ | String /* "move" */ | String /* "copy" */ */ = definedExternally
//    override var dragTrackerStyle: String = definedExternally
//    override var badFormulaResultValue: String = definedExternally
//    override var missingSummaryFieldValue: String = definedExternally
//    override var canAddFormulaFields: Boolean = definedExternally
//    override var addFormulaFieldText: String = definedExternally
//    override var editFormulaFieldText: String = definedExternally
//    override var removeFormulaFieldText: String = definedExternally
//    override var canAddSummaryFields: Boolean = definedExternally
//    override var addSummaryFieldText: String = definedExternally
//    override var editSummaryFieldText: String = definedExternally
//    override var removeSummaryFieldText: String = definedExternally
//    override var includeHilitesInSummaryFields: Boolean = definedExternally
//    override var titleField: String = definedExternally
//    override var iconField: String = definedExternally
//    override var infoField: String = definedExternally
//    override var dataField: String = definedExternally
//    override var descriptionField: String = definedExternally
//    override var emptyExportMessage: String = definedExternally
//    override var multiSortDialogProperties: MultiSortDialog = definedExternally
//    override var multiSortDialogDefaults: MultiSortDialog = definedExternally
//    override var unknownErrorMessage: String = definedExternally
//    override var noErrorDetailsMessage: String = definedExternally
//    override fun dragComplete(): Unit = definedExternally
//    override fun dropComplete(transferredRecords: Array<Any?>): Unit = definedExternally
//    override fun getDataPathField(dataPath: String): Unit = definedExternally
//    override fun fieldIsEditable(field: String): Boolean = definedExternally
//    override fun fieldIsEditable(field: Number): Boolean = definedExternally
//    override fun fieldIsEditable(field: Any?): Boolean = definedExternally
//    override fun getField(fieldID: String): Any = definedExternally
//    override fun getField(fieldID: Number): Any = definedExternally
//    override fun getFieldNum(fieldName: String): Number = definedExternally
//    override fun find(advancedCriteria: AdvancedCriteria): Any = definedExternally
//    override fun findAll(advancedCriteria: AdvancedCriteria): Array<Any> = definedExternally
//    override fun findIndex(advancedCriteria: AdvancedCriteria): Number = definedExternally
//    override fun findNextIndex(startIndex: Number, advancedCriteria: AdvancedCriteria, endIndex: Number?): Number = definedExternally
//    override fun setDataSource(dataSource: String, fields: Array<Any?>?): Unit = definedExternally
//    override fun setDataSource(dataSource: DataSource, fields: Array<Any?>?): Unit = definedExternally
//    override fun exportData(requestProperties: DSRequest?, callback: Any?): Unit = definedExternally
//    override fun getFieldAlignments(): Array<dynamic /* String /* "left" */ | String /* "right" */ | String /* "center" */ */> = definedExternally
//    override fun willFetchData(newCriteria: Any?, textMatchStyle: dynamic /* String /* "startsWith" */ | String /* "exact" */ | String /* "exactCase" */ | String /* "substring" */ */ /*= null*/): Boolean = definedExternally
//    override fun findByKey(keyValue: Any): Record = definedExternally
//    override fun selectRecord(record: Number, newState: Boolean?): Unit = definedExternally
//    override fun selectRecord(record: Record, newState: Boolean?): Unit = definedExternally
//    override fun selectSingleRecord(record: Number): Unit = definedExternally
//    override fun selectSingleRecord(record: Record): Unit = definedExternally
//    override fun deselectRecord(record: Number): Unit = definedExternally
//    override fun deselectRecord(record: Record): Unit = definedExternally
//    override fun selectRecords(records: Number, newState: Boolean?): Unit = definedExternally
//    override fun selectRecords(records: Array<Any?>, newState: Boolean?): Unit = definedExternally
//    override fun deselectRecords(records: Number): Unit = definedExternally
//    override fun deselectRecords(records: Array<Any?>): Unit = definedExternally
//    override fun selectAllRecords(): Unit = definedExternally
//    override fun deselectAllRecords(): Unit = definedExternally
//    override fun selectRange(startRow: Number, endRow: Number, newState: Boolean?): Unit = definedExternally
//    override fun deselectRange(startRow: Number, endRow: Number): Unit = definedExternally
//    override fun anySelected(): Boolean = definedExternally
//    override fun getSelectionLength(): Number = definedExternally
//    override fun getHilites(): Array<Any?> = definedExternally
//    override fun setHilites(hilites: Array<Any?>): Unit = definedExternally
//    override fun getHiliteState(): String = definedExternally
//    override fun setHiliteState(hiliteState: String): Unit = definedExternally
//    override fun enableHilite(hiliteID: String, enable: Boolean?): Unit = definedExternally
//    override fun disableHilite(hiliteID: String): Unit = definedExternally
//    override fun enableHiliting(enable: Boolean?): Unit = definedExternally
//    override fun disableHiliting(): Unit = definedExternally
//    override fun editHilites(): Unit = definedExternally
//    override fun transferRecords(dropRecords: Array<Any?>, targetRecord: Record, index: Number, sourceWidget: Canvas, callback: Any?): Unit = definedExternally
//    override fun getDropValues(record: Record, sourceDS: DataSource, targetRecord: Record, index: Number, sourceWidget: Canvas): Any = definedExternally
//    override fun transferDragData(): Array<Any> = definedExternally
//    override fun getDragData(source: DataBoundComponent): Array<Any?> = definedExternally
//    override fun transferSelectedData(source: DataBoundComponent, index: Number?, callback: Any?): Unit = definedExternally
//    override fun setDragTracker(): Boolean = definedExternally
//    override fun addFormulaField(): Unit = definedExternally
//    override fun editFormulaField(field: String): Unit = definedExternally
//    override fun getFormulaFieldValue(field: String, record: Record): dynamic /* String | Number */ = definedExternally
//    override fun addSummaryField(): Unit = definedExternally
//    override fun editSummaryField(field: String): Unit = definedExternally
//    override fun getSummaryFieldValue(field: String, record: Record): String = definedExternally
//    override fun shouldIncludeHiliteInSummaryField(summaryFieldName: String, usedFieldName: String): Boolean = definedExternally
//    override fun getRecordIndex(record: Record): Number = definedExternally
//    override fun getTitleFieldValue(record: Record): String = definedExternally
//    override fun getTitleField(): String = definedExternally
//    override fun getRecordHiliteCSSText(record: Record, cssText: String, field: String): String = definedExternally
//    override fun getSort(): Array<Any?> = definedExternally
//    override fun setSort(sortSpecifiers: Array<Any?>): Unit = definedExternally
//    override fun askForSort(): Unit = definedExternally
//    override fun isOffline(): Boolean = definedExternally
//    override fun editFields(): Unit = definedExternally
//    override fun userAddedField(field: ListGridField): Boolean = definedExternally
//    override fun selectionUpdated(record: Any, recordList: Array<Any?>): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): HTMLFlow = definedExternally
        fun requestsArePending(): Boolean = definedExternally
    }
    // override fun willFetchData(newCriteria: Any?): Boolean = definedExternally
}
external open class CanvasEditProxy : EditProxy {
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): CanvasEditProxy = definedExternally
    }
}
external open class ValidatorDefinition {
    open var type: String = definedExternally
    open var shortName: String = definedExternally
    open var requiresServer: Boolean = definedExternally
    open var defaultErrorMessage: String = definedExternally
    open var condition: dynamic /* String | ValidatorConditionCallback */ = definedExternally
    open var action: dynamic /* String | ValidatorActionCallback */ = definedExternally
}
external open class Slider : Canvas {
    open var title: String = definedExternally
    open var length: Number = definedExternally
    open var vertical: Boolean = definedExternally
    open var thumbThickWidth: Number = definedExternally
    open var thumbThinWidth: Number = definedExternally
    open var trackWidth: Number = definedExternally
    open var hThumbStyle: String = definedExternally
    open var vThumbStyle: String = definedExternally
    open var hTrackStyle: String = definedExternally
    open var vTrackStyle: String = definedExternally
    open var showActiveTrack: Boolean = definedExternally
    open var activeTrackStyle: String = definedExternally
    open var thumbSrc: String = definedExternally
    open var trackSrc: String = definedExternally
    open var trackCapSize: Number = definedExternally
    open var trackImageType: dynamic /* String /* "center" */ | String /* "tile" */ | String /* "stretch" */ | String /* "normal" */ */ = definedExternally
    open var showTitle: Boolean = definedExternally
    open var showRange: Boolean = definedExternally
    open var showValue: Boolean = definedExternally
    open var labelWidth: Number = definedExternally
    open var labelHeight: Number = definedExternally
    open var labelSpacing: Number = definedExternally
    open var titleSpacing: Number = definedExternally
    open var value: Number = definedExternally
    open var minValue: Number = definedExternally
    open var minValueLabel: String = definedExternally
    open var maxValue: Number = definedExternally
    open var maxValueLabel: String = definedExternally
    open var numValues: Number = definedExternally
    open var roundValues: Boolean = definedExternally
    open var roundPrecision: Number = definedExternally
    open var flipValues: Boolean = definedExternally
    open var sliderTarget: Canvas = definedExternally
//    override var canFocus: Boolean = definedExternally
    open var stepPercent: Number = definedExternally
    open var animateThumb: Boolean = definedExternally
    open var animateThumbTime: Number = definedExternally
    open var animateThumbInit: Boolean = definedExternally
    open fun setValue(newValue: Number, noAnimation: Boolean): Unit = definedExternally
    open fun getValue(): Number = definedExternally
    open fun valueChanged(value: Number): Unit = definedExternally
    open fun valueIsChanging(): Boolean = definedExternally
    open fun setMinValue(newValue: Number): Unit = definedExternally
    open fun setMaxValue(newValue: Number): Unit = definedExternally
    open fun setNumValues(newNumValues: Number): Unit = definedExternally
    open fun setTitle(newTitle: String): Unit = definedExternally
    open fun setVertical(isVertical: Boolean): Unit = definedExternally
    open fun setThumbThickWidth(newWidth: Number): Unit = definedExternally
    open fun setThumbThinWidth(newWidth: Number): Unit = definedExternally
    open fun setTrackWidth(newWidth: Number): Unit = definedExternally
    open fun setThumbSrc(newSrc: String): Unit = definedExternally
    open fun setTrackSrc(newSrc: String): Unit = definedExternally
    open fun setTrackCapSize(newSize: Number): Unit = definedExternally
    open fun setTrackImageType(newType: String /* "center" */): Unit = definedExternally
    open fun setTrackImageType(newType: String /* "tile" */): Unit = definedExternally
    open fun setTrackImageType(newType: String /* "stretch" */): Unit = definedExternally
    open fun setTrackImageType(newType: String /* "normal" */): Unit = definedExternally
    open fun setShowTitle(showTitle: Boolean): Unit = definedExternally
    open fun setShowRange(showRange: Boolean): Unit = definedExternally
    open fun setShowValue(showValue: Boolean): Unit = definedExternally
    open fun setLabelWidth(labelWidth: Number): Unit = definedExternally
    open fun setLabelHeight(newHeight: Number): Unit = definedExternally
    open fun setLabelSpacing(labelWidth: Number): Unit = definedExternally
    open fun setMaxValueLabel(labelText: String): Unit = definedExternally
    open fun setRoundValues(roundValues: Boolean): Unit = definedExternally
    open fun setRoundPrecision(roundPrecision: Number): Unit = definedExternally
    open fun setFlipValues(flipValues: Boolean): Unit = definedExternally
    open fun setStepPercent(stepPercent: Number): Unit = definedExternally
    companion object {
        fun create(typeCheckedProperties: Any? = definedExternally /* null */, uncheckedProperties: Any? = definedExternally /* null */): Slider = definedExternally
    }
}
