apply plugin: 'org.jetbrains.kotlin.frontend'
apply plugin: 'kotlin2js'
apply plugin: 'idea'

kotlinFrontend {
    downloadNodeJsVersion = 'latest'

    npm {
        dependency "style-loader"
        dependency "@jetbrains/kotlin-redux"
        dependency "redux"

        devDependency("karma")
    }

    sourceMaps = true

    webpackBundle {

        bundleName = "app"
        contentPath = file('src/main/web')
//        proxyUrl = "http://[::1]:8182"
//        port = 8188

    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"

    compile 'org.jetbrains:kotlin-redux:4.0.0-pre.67-kotlin-1.3.20'
}

compileKotlin2Js {
    kotlinOptions.metaInfo = true
    kotlinOptions.outputFile = "$project.buildDir.path/js/${project.name}.js"
    kotlinOptions.sourceMap = true
    kotlinOptions.sourceMapEmbedSources = "always"
    // kotlin-redux wrapper doesn't seem to work with 'umd'
    // kotlinOptions.moduleKind = 'umd'
    kotlinOptions.moduleKind = 'commonjs'
    kotlinOptions.main = "call"
}

//noinspection GroovyAssignabilityCheck
task cleanWeb(type: Delete) {
    delete '../smartgwt/src/main/webapp/app'
    delete '../smartgwt/src/main/webapp/app-redux'
    delete '../smartgwt/src/main/webapp/app-redux.html'
}

task copyToWeb {
    doLast {

        def targetRoot = "../smartgwt/src/main/webapp"
        // Generic `app` directory (see BuiltInDS.java where the script is injected)
        copy {
            from 'build/bundle'
            into("${targetRoot}/app")
        }

        // `app-redux` specific assets
        copy {
            from 'src/main/web/app-redux'
            into("${targetRoot}/app-redux")
        }

        // `app-redux` entrypoint Html file
        copy {
            from 'src/main/web/app-redux.html'
            into("${targetRoot}")
        }

    }

}
copyToWeb.dependsOn cleanWeb
copyToWeb.dependsOn bundle

task copyToGwtDevWeb {
    doLast {

        def targetRoot = "../smartgwt/build/gwt/warDev"
        // Generic `app` directory (see BuiltInDS.java where the script is injected)
        copy {
            from 'build/bundle'
            into("${targetRoot}/app")
        }

        // `app-redux` specific assets
        copy {
            from 'src/main/web/app-redux'
            into("${targetRoot}/app-redux")
        }

        // `app-redux` entrypoint Html file
        copy {
            from 'src/main/web/app-redux.html'
            into("${targetRoot}")
        }

    }

}
copyToGwtDevWeb.dependsOn copyToWeb

idea {
    module {
        excludeDirs += file("src/main/web/lib")

    }
}
