@file:JsQualifier("isc")
package isc

/**
 *  Static singleton class with APIs for dmiOverview of
 *   server side methods when running the SmartClient java server.
 */
open external class DMI : Class {
    companion object {
        /**
         *  Creates a new DMI
         * 
         *  @param typeCheckedProperties {Partial<DMI>=} Object literal containing init properties that will be checked against the class field types.
         *  @param uncheckedProperties {Object} Object literal containing init properties that will not be checked against the class field types.
         *  @return {DMI} The new instance
         */
        fun create(typeCheckedProperties: dynamic?, uncheckedProperties: Object?): DMI = definedExternally
        /**
         * 
         *   Calls a server-side DMI method. At a minimum, you need to specify the appID
         *   (applicationDeclaration), ServerObject.className
         *   or ServerObject.ID and methodName to call.
         *   Arguments and callback are optional. There are two ways to invoke this method:
         * 
         *   DMI.call(appID, className, methodName,
         *       arg1, arg2 ...argN, callback);
         * 
         *   or:
         * 
         *   DMI.call({
         *     appID: appID,
         *     className: className,
         *     methodName: methodName,
         *     arguments: [arg1, arg2, ...argN], //optional
         *     callback: callback, //optional
         *     requestParams: requestProps // optional
         *   });
         * 
         *   If you use the first signature, you must either specify a callback or if you don't want a
         *   callback, pass a null as the last argument. The second signature allows you to
         *   specify requestParams that are applied to the RPCRequest generated by this DMI call.
         *   This allows you to override some defaults - for example to suppress the "Contacting Server"
         *   prompt, change it's text; change the timeout or set any other property settable on
         *   RPCRequest.
         * 
         *   Arguments to be passed to the server method may be specified.
         *   If present, each argument will be serialized into JSON,
         *   sent to the server and translated to an equivalent Java object to be passed into the
         *   method. The translation follows the same rules as for data passed to the server as
         *   part of a standard RPCRequest.data.
         *   For example if a server side method has the signature
         * 
         *   someMethod(String title, Map overrides);
         * 
         *   a DMI call to that method would could pass in a standard String and JavaScript object -
         *   for example:
         * 
         *   isc.DMI.call({
         *     appID: "someApp",
         *     className: "com.smartclient.demo.MyClass",
         *     methodName: "someMethod",
         *     arguments: ["Title String", {field1:"Value 1", field2:"Value 2"}]
         *   });
         * 
         * 
         *   Note that you can use the loadDMIStubsTag tag to bind all methods of
         *   ServerObjects defined in a given .app.xml file and call methods on them
         *   directly.
         * 
         * 
         *  @param {string | object} the appID (.app.xml file to look in) or comprehensive request             object as documented above.
         *  @param {string} ServerObject.className or ServerObject.ID
         *  @param {string} the name of the method to call on the serverObject
         *  @param {any} The next N-1 params specify arguments to the server-side method.
         *  @param {RPCCallback} The callback of the response. If you do not want a callback, you             must specify a null value for this parameter when              using the first signature (documented above).
         */
        fun call(appID: dynamic, className: String, methodName: String, args: dynamic, callback: ((response: RPCResponse, rawData: dynamic, request: RPCRequest) -> Unit)): RPCRequest = definedExternally
        /**
         * 
         *   Returns a URL to a server-side DMI method. At a minimum, you need to specify the appID
         *   (applicationDeclaration), ServerObject.className
         *   or ServerObject.ID and methodName to call.
         *   Arguments are optional. There are two ways to invoke this method:
         * 
         *   DMI.getURL(appID, className, methodName,
         *       arg1, arg2 ...argN);
         * 
         *   or:
         * 
         *   DMI.getURL({
         *     appID: appID,
         *     className: className,
         *     methodName: methodName,
         *     arguments: [arg1, arg2, ...argN], //optional
         *     requestParams: requestProps // optional
         *   });
         * 
         *   The second signature allows you to specify requestParams that are applied to the
         *   RPCRequest generated by this DMI call.
         * 
         *   Note that because the entirety of the request is encoded in the URL, there is an
         *   inherent limitation on the amount of data that you can send viat he criteria argument to
         *   the server. The actual length depends on your server configuration and other factors
         *   such as the size of cookies (if any) being sent to the server and other HTTP headers in
         *   use. Conservatively, assume that you have about 2 kilobytes to work with.
         * 
         * 
         *  @param {string | object} the appID (.app.xml file to look in) or comprehensive                     request object as documented above.
         *  @param {string} ServerObject.className or ServerObject.ID
         *  @param {string} the name of the method to call on the serverObject
         *  @param {any=} The next N-1 params specify arguments to the server-side method.
         */
        fun getURL(appID: dynamic, className: String, methodName: String, args: dynamic?): String = definedExternally
    }
}