@file:JsQualifier("isc")
package isc

/**
 *  This class enables background (deferred) loading and caching of JS, CSS and Image files. It is
 *   designed to work standalone from the rest of the SmartClient framework to provide a lightweight
 *   caching and loading mechanism for SmartClient modules as well as user-built application
 *   modules/fragments.
 * 
 *   The most common usage scenarios are:
 * 
 * 
 *  - Caching JS, CSS, Image files in the browser in anticipation of a transition to a page
 *    that requires these files. For example, a plain HTML (non-SmartClient) login page or
 *    landing page can begin caching SmartClient in the background while allowing the user
 *    to login, or giving the user something to read. Normally, loading SmartClient or other
 *    large JavaScript files would block page loading and display. By loading SmartClient in
 *    the background only after a simple HTML landing page has loaded, you can completely
 *    eliminate perceived download time associated with loading a rich UI application, making a
 *    much larger difference in user experience than any difference in framework/application size.
 * 
 *  - Loading a multi-phase UI. In this scenario, an initial rendering of a page is done with
 *    minimal data transfer to the browser. Then JS, CSS, and Image files are fetched in the
 *    background to provide richer UI components. During this time the user can continue to normally
 *    interact with the initial page. Once loading is complete, the UI is updated with richer
 *    components.
 * 
 * 
 *   The recommended usage pattern is to use the loadISC custom tag provided as part of
 *   the SmartClient SDK. You can specify cacheOnly="true" to loadISC to cache the
 *   SmartClient framework in the background or alternately defer="true" to load the
 *   SmartClient framework and make it available in the current page. You can specify the
 *   onload attribute of the tag to provide a JavaScript callback to your code that will
 *   be called when the framework loading is complete.
 * 
 *   If you're not working in a JSP environment, you can use the
 *   FileLoader.cacheISC/FileLoader.loadISC APIs to accomplish
 *   the same effect as the loadISC JSP tag.
 * 
 *   Additional APIs are provided for performing dynamic caching and loading of other JS, CSS, and
 *   Image files to improve the performance of your application. See below.
 * 
 *   You must set window.isomorphicDir before loading and using this module unless the
 *   default of '../isomorphic/' is acceptable. E.g. if your html file is in your toplevel webroot
 *   directory, then your HTML file should say (note the trailing slash):
 * 
 *   &lt;SCRIPT&gt;window.isomorphicDir='isomorphic/'&lt;/SCRIPT&gt;
 *   &lt;SCRIPT SRC=isomorphic/system/modules/ISC_FileLoader.js&gt;&lt;/SCRIPT&gt;
 * 
 *   In addition, if you are using Smart GWT, you must set FileLoader.modulesDir to
 *   "modules/", as follows:
 * 
 *    isc.FileLoader.modulesDir = "modules/";
 * 
 * 
 *   This module is usable independent of the rest of SmartClient - you can use it on pages that
 *   don't load any other modules. In practice, the general pattern is to use this module on
 *   static HTML pages such as a login page to pre-cache SmartClient modules, application logic,
 *   skin files, and css so that once the user logs in, there's no latency to load the rich UI.
 * 
 *   You can also load the FileLoader itself dynamically - see FileLoader.ensureLoaded
 * 
 *   Note: You can also reference this class via the alias isc.FL
 */
open external class FileLoader {
    companion object {
        /**
         *  Name of the query parameter to use for version-specific cache-busting. This will be used by
         *   FileLoader.addVersionToLoadTags.
         * 
         *   Also remember that both FileLoader.loadISC and FileLoader.cacheISC
         *   uses this so if you change it for one remember to change it for the other to not get inconsistencies
         *   in the url's generated by FileLoader.
         *  @type {string}
         *  @default "isc_version"
         */
        var versionParamName: String = definedExternally
        /**
         *  By default we add the version to the URL. Using this attribute you can turn this feature off.
         *   The parameter name used for this can be set via FileLoader.versionParamName.
         * 
         *   Note that if you are using FileLoader.cacheISC to pre-cache the Smartclient
         *   framework and in your application code use manual script tags to load the framework files
         *   you will have to call Page.setAddVersionToSkinCSS before loading the skin in order to get
         *   the skins stylesheet to have a cache-busting parameter appended to its url.
         * 
         *   It is recommended to use FileLoader.loadISC if you plan on using
         *   FileLoader.cacheISC for pre-caching as this will ensure that the loaded
         *   files and their urls will be consistent provided the FileLoader configuration is the same for
         *   both pages.
         *  @type {boolean}
         *  @default true
         */
        var addVersionToLoadTags: Boolean = definedExternally
        /**
         *  Path to module files (ISC_Core.js et al) relative to the isomorphicDir (see
         *   FileLoader).
         * 
         *   Does not normally need to be set for SmartClient. If using Smart GWT, set to "modules/".
         *  @type {string}
         *  @default "system/modules/"
         */
        var modulesDir: String = definedExternally
        /**
         *  Default list of modules for
         *   FileLoader.loadISC/FileLoader.cacheISC to use if none are
         *   provided by the user.
         *  @type {string}
         *  @default "Core,Foundation,Containers,Grids,Forms,DataBinding"
         */
        var defaultModules: String = definedExternally
        /**
         *  Default skin for FileLoader.loadISC/FileLoader.cacheISC to
         *   use if one is not provided by the user.
         *  @type {string}
         *  @default "Enterprise"
         */
        var defaultSkin: String = definedExternally
        /**
         * 
         *   Caches the specified SmartClient modules and skin. Calling this method is equivalent to using
         *   the loadISC JSP tag with cacheOnly="true".
         * 
         * 
         *  @param {string=} Name of the skin to load. If not specified, the skin specified by the            default FileLoader.defaultSkin will be used.             Instead of a skin name, you can specify a skinDir - this works just             like Page.setSkinDir - the skin assumed to be a skinDir if             there's at least one forward slash (/) in the name.
         *  @param {string | List=} List of modules to load. If not specified, the list of modules                  specified by the default                  FileLoader.defaultModules will be used. You                  can specify modules as "Core,Foundation" or as ["Core",                  "Foundation"]
         *  @param {string | Function=} Optional code to execute when all specified modules and                   skin have been cached.
         */
        fun cacheISC(skin: String?, modules: dynamic?, onload: dynamic?): Unit = definedExternally
        /**
         * 
         *   Caches the specified locale.
         * 
         * 
         *  @param {string=} Name of the locale to cache..
         *  @param {string | Function=} Optional code to execute when all specified locale                   has been cached..
         */
        fun cacheLocale(locale: String?, onload: dynamic?): Unit = definedExternally
        /**
         * 
         *   Loads the specified SmartClient modules and skin in defer mode. Calling this method is
         *   equivalent to using the loadISC JSP tag with defer="true".
         * 
         * 
         *  @param {string=} Name of the skin to load. If not specified, the skin specified by the            default FileLoader.defaultSkin will be used.             Instead of a skin name, you can specify a skinDir - this works just             like Page.setSkinDir - the skin assumed to be a skinDir if             there's at least one forward slash (/) in the name.
         *  @param {string | Array<any>=} List of modules to load. If not specified, the list of modules                  specified by the default                  FileLoader.defaultModules will be used. You                  can specify modules as e.g: "Core,Foundation" or as ["Core",                  "Foundation"]
         *  @param {string | Function=} Optional code to execute when all specified modules and                   skin have loaded.
         */
        fun loadISC(skin: String?, modules: dynamic?, onload: dynamic?): Unit = definedExternally
        /**
         * 
         *   Loads the specified locale in defer mode.
         * 
         * 
         *  @param {string=} Name of the locale to load.
         *  @param {string | Function=} Optional code to execute when all specified locale                   has loaded.
         */
        fun loadLocale(locale: String?, onload: dynamic?): Unit = definedExternally
        /**
         * 
         *   Loads the specified JS files into the context of the current page.
         * 
         * 
         *  @param {string | Array<any>} List of URLs pointing to JS files to load. This can either be a                string with comma separated URLs or an Array of URLs.
         *  @param {string | Function=} Optional code to execute when the last of the specified URLs                   has completed loading.
         */
        fun loadJSFiles(URLs: dynamic, onload: dynamic?): Unit = definedExternally
        /**
         * 
         *   Loads the specified SmartClient modules into the context of the current page.
         * 
         *   This call is idempotent in that duplicate module loads are automatically suppressed (no
         *   request is issued) and your specified onload callback will still fire.
         * 
         * 
         *  @param {string | Array<any>} List of SmartClient modules to load. This can either be a                 string with comma separated module names or an Array of module                  names.
         *  @param {string | Function=} Optional code to execute when the last of the specified                   modules has completed loading.
         */
        fun loadModules(modules: dynamic, onload: dynamic?): Unit = definedExternally
        /**
         * 
         *   Caches the specified list of files.
         * 
         * 
         *  @param {string | Array<any>} List of URLs to cache. These may point to image, js, or css                files. This can either be a string with comma separated URLs or an                Array of URLs.
         *  @param {string | Function=} Optional code to execute when the last of the specified                   files has been cached.
         *  @param {string=} Specifies the type of the files referenced by the URLs. Valid values are:            "js", "css", and "image". If not specified, the type is auto-derived from             the file extension. If a type cannot be derived, the cache directive             for that specific URL will be ignored and an error will be logged to             the Developer Console. You must specify a type if you use a             non-standard extension for your file - for example if you use a JSP             or a servlet with no extension to generate images.
         */
        fun cacheFiles(URLs: dynamic, onload: dynamic?, type: String?): Unit = definedExternally
        /**
         * 
         *   Caches the specified SmartClient modules.
         * 
         * 
         *  @param {string | Array<any>} List of SmartClient modules to cache. This can either be a                 string with comma separated module names or an Array of module                  names.
         *  @param {string | Function=} Optional code to execute when the last of the specified                   modules has been cached.
         */
        fun cacheModules(modules: dynamic, onload: dynamic?): Unit = definedExternally
        /**
         * 
         *   Caches a set of state images derived from a base image. This is useful for caching a set of
         *   images for a single component. For example this code:
         * 
         *   isc.FileLoader.cacheImgStates("/isomorphic/skins/SmartClient/images/TreeGrid/opener.png",
         *                  "closed,opening,opened");
         * 
         *   Will cause the following images to be cached:
         * 
         *   /isomorphic/skins/SmartClient/images/TreeGrid/opener_closed.png
         *   /isomorphic/skins/SmartClient/images/TreeGrid/opener_opening.png
         *   /isomorphic/skins/SmartClient/images/TreeGrid/opener_opened.png
         * 
         * 
         * 
         *  @param {string | Array<any>} List of base image URLs from which stateful names are to be                  derived. This can either be a                   string with comma separated baseURLs or an Array of baseURLs.
         *  @param {string | Array<any>=} List of states to load. If none specified, The following                  default list will be used:                   "Down,Over,Selected,Selected_Down,Selected_Over". This can                   either be a string with comma separated states or an Array                   of states.
         *  @param {string | Function=} Optional code to execute when the last of the specified URLs                   has completed caching.
         */
        fun cacheImgStates(baseURLs: dynamic, states: dynamic?, onload: dynamic?): Unit = definedExternally
        /**
         * 
         *   Caches a set of state stretch images derived from a base image. This is useful for caching a set
         *   of images for a single component. For example this code:
         * 
         *   isc.FileLoader.cacheStretchImgStates("/isomorphic/skins/SmartClient/images/button/button.png",
         *                     "Down,Over");
         * 
         *   Will cause the following images to be cached:
         * 
         *   /isomorphic/skins/SmartClient/images/button/button_start.png
         *   /isomorphic/skins/SmartClient/images/button/button_stretch.png
         *   /isomorphic/skins/SmartClient/images/button/button_end.png
         *   /isomorphic/skins/SmartClient/images/button/button_Down_start.png
         *   /isomorphic/skins/SmartClient/images/button/button_Down_stretch.png
         *   /isomorphic/skins/SmartClient/images/button/button_Down_end.png
         *   /isomorphic/skins/SmartClient/images/button/button_Over_start.png
         *   /isomorphic/skins/SmartClient/images/button/button_Over_stretch.png
         *   /isomorphic/skins/SmartClient/images/button/button_Over_end.png
         * 
         * 
         * 
         *  @param {string | Array<any>} List of base image URLs from which stateful names are to be                  derived. This can either be a                   string with comma separated baseURLs or an Array of baseURLs.
         *  @param {string | Array<any>=} List of states to load. If none specified, The following                  default list will be used:                   "Down,Over,Selected,Selected_Down,Selected_Over". This can                   either be a string with comma separated states or an Array                   of states
         *  @param {string | Array<any>=} List of StretchImg pieces to cache. If not specified, the                  following list will be used: "start,stretch,end". This can                   either be a string with comma separated piece names or an Array                   of piece names.
         *  @param {string | Function=} Optional code to execute when the last of the specified URLs                   has completed caching.
         */
        fun cacheStretchImgStates(baseURLs: dynamic, states: dynamic?, pieces: dynamic?, onload: dynamic?): Unit = definedExternally
        /**
         * 
         *   Caches a set of edge images derived from a base image.
         *   For example this code:
         * 
         *   isc.FileLoader.cacheEdgeImages("/isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6.png");
         * 
         *   Will cause the following images to be cached:
         * 
         *   /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_TL.png
         *   /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_T.png
         *   /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_TR.png
         *   /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_L.png
         *   /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_R.png
         *   /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_BL.png
         *   /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_B.png
         *   /isomorphic/skins/SmartClient/images/edges/rounded/frame/A3B2CC/6_BR.png
         * 
         * 
         * 
         *  @param {string | Array<any>} List of base image URLs from which position-specific edge                  names are to be derived. This can either be a                   string with comma separated baseURLs or an Array of baseURLs.
         *  @param {boolean=} If true, also causes the center image to be cached. Default                  is false.
         *  @param {string | Array<any>=} List of edges to load. If none specified, The following                  default list will be used:                   "TL,T,TR,L,R,BL,B,BR". The list of valid values is the                   set of extensions specified by                   EdgedCanvas.edgeImage. This can                   either be a string with comma separated edge extension or an                   Array of edge extensions.
         *  @param {string | Array<any>=} List of colors to cache. If not specified, no color is                   specified. The list of valid colors are those that you have                   specified as EdgedCanvas.edgeColor.                   This can either be a string with comma separated colors or an Array                   of colors.
         *  @param {string | Function=} Optional code to execute when the last of the specified URLs                   has completed caching.
         */
        fun cacheEdgeImages(baseURLs: dynamic, showCenter: Boolean?, edges: dynamic?, colors: dynamic?, onload: dynamic?): Unit = definedExternally
        /**
         * 
         *   Caches a set of shadow images at various depths. For example this code:
         * 
         *   isc.FileLoader.cacheShadows("/isomorphic/skins/SmartClient/images/shared/shadows", "5");
         * 
         *   Will cause the following images to be cached:
         * 
         *   /isomorphic/skins/SmartClient/images/shared/shadows/ds5_TL.png
         *   /isomorphic/skins/SmartClient/images/shared/shadows/ds5_T.png
         *   /isomorphic/skins/SmartClient/images/shared/shadows/ds5_TR.png
         *   /isomorphic/skins/SmartClient/images/shared/shadows/ds5_L.png
         *   /isomorphic/skins/SmartClient/images/shared/shadows/ds5_R.png
         *   /isomorphic/skins/SmartClient/images/shared/shadows/ds5_BL.png
         *   /isomorphic/skins/SmartClient/images/shared/shadows/ds5_B.png
         *   /isomorphic/skins/SmartClient/images/shared/shadows/ds5_BR.png
         * 
         * 
         * 
         *  @param {string} Base directory containing the shadow images.
         *  @param {string | Array<any>} List of depths to load. These values corresponds to the Canvas                  attribute Canvas.shadowDepth.  This can either be                   a string with comma separated depths or an Array of depths.
         *  @param {string=} Name of the base shadow image from which list of URLs is                  generated. If not specified, this defaults to "ds.png".
         *  @param {string | Function=} Optional code to execute when the last of the specified URLs                   has completed caching.
         */
        fun cacheShadows(baseDir: String, depths: dynamic, baseShadowImage: String?, onload: dynamic?): Unit = definedExternally
        /**
         * 
         *   Loads the FileLoader into the page if it has not already been loaded. Whether the FileLoader
         *   is loaded or not, the callback fires.
         * 
         *   The purpose of this method is to enable a canonical way of loading/caching code and assets.
         *   As follows:
         * 
         *   isc.FileLoader.ensureLoaded(function () {
         *     isc.FileLoader.loadModules(["DataBinding", "SomethingElse"]);
         *     isc.FileLoader.loadJSFiles("/my/precious.js", function () {
         *       isc.Log.logWarn("All necessary assets loaded!");
         *     });
         *   });
         * 
         * 
         * 
         *  @param {Callback} Callback to fire when FileLoader has loaded.
         */
        fun ensureLoaded(callback: dynamic): Unit = definedExternally
    }
}